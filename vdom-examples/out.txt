Unification error: Couldn't match (_::Session) ~@ () against (_::Session) ~> _::Any
Unification error: Couldn't match (_::Session) ~@ EndBang against (_::Session) ~> _::Any
compiling to IR
compiled IR
([`Fun ((237, (([a], Int) ~> a, "selectElem", `Global )),
         ([(627, (`Unl , `Any ), `Type ...); (629, (`Unl , `Any ), `Row ...)],
           [(235, ([_], "", `Local )); (236, (Int, "", `Local ))],
           ([`Let ((233, (Int, "i", `Local )), ([], `Return `Variable 236));
             `Let ((234, ([_], "xs", `Local )), ([], `Return `Variable 235))],
             `Apply (`TApp (`TAbs ([(620, (`Unl , `Any ), `Type ...);
                                    (621, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 57,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`TAbs ([(622, (`Unl , `Any ),
                                                    `Type ...);
                                                  (623, (`Unl , `Any ),
                                                    `Row ...)],
                                                  `TApp (`Variable 61,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)])),
                                           [`Type `MetaTypeVar ...;
                                            `Row ({}, ..., false)]),
                                    [`Variable 233; `Variable 234])]))),
         None, `Unknown );
  `Fun ((246,
          (((a::Any) -b-> c::Any, (d::Any) -b-> a::Any) -> (d::Any) -b-> c::Any,
            "compose", `Global )),
         ([(638, (`Any , `Any ), `Type ...); (637, (`Any , `Any ), `Row ...);
           (639, (`Any , `Any ), `Type ...);
           (636, (`Any , `Any ), `Type ...); (634, (`Any , `Any ), `Row ...)],
           [(244, ((_::Any) -> _::Any, "", `Local ));
            (245, ((_::Any) -> _::Any, "", `Local ))],
           ([`Let ((238, ((_::Any) -> _::Any, "g", `Local )),
                    ([], `Return `Variable 245));
             `Let ((239, ((_::Any) -> _::Any, "f", `Local )),
                    ([], `Return `Variable 244));
             `Fun ((243, ((_::Any) -> _::Any, "_fun__g18", `Local )),
                    ([], [(242, (_::Any, "", `Local ))],
                      ([`Let ((240, (_::Any, "x", `Local )),
                               ([], `Return `Variable 242));
                        `Let ((241, (_::Any, "", `Local )),
                               ([], `Apply (`Variable 238, [`Variable 240])))],
                        `Apply (`Variable 239, [`Variable 241]))), None,
                    `Unknown )], `Return `Variable 243)), None, `Unknown );
  `Rec [((251, ((Int, a) ~> [a], "replicate", `Global )),
          ([(654, (`Unl , `Any ), `Type ...);
            (663, (`Unl , `Any ), `Row ...)],
            [(249, (Int, "", `Local )); (250, (_, "", `Local ))],
            ([`Let ((247, (_, "item", `Local )), ([], `Return `Variable 250));
              `Let ((248, (Int, "n", `Local )), ([], `Return `Variable 249))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 248; `Constant `Int 0]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((252, ([_], "", `Local )),
                             ([],
                               `Apply (`Variable 251,
                                        [`ApplyPure (`TApp (`Variable 2,
                                                             [`Row ({}, ...,
                                                                    false)]),
                                                      [`Variable 248;
                                                       `Constant `Int 1]);
                                         `Variable 247])))],
                      `Return `ApplyPure (`TApp (`Variable 55,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 247; `Variable 252]))))),
          None, `Unknown )];
  `Rec [((257,
           (((a::Any) ~b~> [c], [a::Any]) ~b~> [c], "concatMap", `Global )),
          ([(675, (`Any , `Any ), `Type ...);
            (682, (`Unl , `Any ), `Row ...);
            (683, (`Unl , `Any ), `Type ...)],
            [(255, ((_::Any) ~> [_], "", `Local ));
             (256, ([_::Any], "", `Local ))],
            ([`Let ((253, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 256));
              `Let ((254, ((_::Any) ~> [_], "f", `Local )),
                     ([], `Return `Variable 255));
              `Let ((260, ([_::Any], "", `Local )),
                     ([], `Return `Variable 253))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 260;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((261, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 260])));
                      `Let ((262, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 260])));
                      `Let ((259, ([_::Any], "tl", `Local )),
                             ([], `Return `Variable 262));
                      `Let ((258, (_::Any, "hd", `Local )),
                             ([], `Return `Variable 261));
                      `Let ((264, ([_], "", `Local )),
                             ([], `Apply (`Variable 254, [`Variable 258])));
                      `Let ((263, ([_], "", `Local )),
                             ([],
                               `Apply (`Variable 257,
                                        [`Variable 254; `Variable 259])))],
                      `Return `ApplyPure (`TApp (`Variable 56,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 264; `Variable 263]))))),
          None, `Unknown )];
  `Fun ((273, (((a) ~b~> Bool, [a]) ~b~> [a], "filter", `Global )),
         ([(700, (`Unl , `Any ), `Type ...); (702, (`Unl , `Any ), `Row ...)],
           [(271, ((_) ~> Bool, "", `Local )); (272, ([_], "", `Local ))],
           ([`Let ((265, ([_], "l", `Local )), ([], `Return `Variable 272));
             `Let ((266, ((_) ~> Bool, "p", `Local )),
                    ([], `Return `Variable 271));
             `Fun ((270, ((a) ~> [a], "_fun__g19", `Local )),
                    ([], [(269, (_, "", `Local ))],
                      ([`Let ((267, (_, "x", `Local )),
                               ([], `Return `Variable 269));
                        `Let ((268, (Bool, "", `Local )),
                               ([], `Apply (`Variable 266, [`Variable 267])))],
                        `If (`Variable 268,
                              ([],
                                `Return `ApplyPure (`TApp (`Variable 55,
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 267;
                                                      `TApp (`Variable 54,
                                                              [`Type 
                                                               `MetaTypeVar ...])])),
                              ([],
                                `Return `TApp (`Variable 54,
                                                [`Type `MetaTypeVar ...]))))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(691, (`Any , `Any ), `Type ...);
                                    (692, (`Unl , `Any ), `Row ...);
                                    (693, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 257,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Variable 270; `Variable 265]))), None, `Unknown );
  `Rec [((278, (((a) ~b~> _, [a]) ~b~> [a], "sortBy", `Global )),
          ([(379, (`Unl , `Any ), `Type ...);
            (380, (`Unl , `Any ), `Row ...);
            (381, (`Unl , `Any ), `Type ...)],
            [(276, ((_) ~> _, "", `Local )); (277, ([_], "", `Local ))],
            ([`Let ((274, ([_], "l", `Local )), ([], `Return `Variable 277));
              `Let ((275, ((_) ~> _, "f", `Local )),
                     ([], `Return `Variable 276));
              `Let ((281, ([_], "", `Local )), ([], `Return `Variable 274))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 281;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((282, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 281])));
                      `Let ((283, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 281])));
                      `Let ((280, ([_], "xs", `Local )),
                             ([], `Return `Variable 283));
                      `Let ((279, (_, "x", `Local )),
                             ([], `Return `Variable 282));
                      `Fun ((288, ((_) ~> Bool, "_fun__g20", `Local )),
                             ([], [(287, (_, "", `Local ))],
                               ([`Let ((284, (_, "y", `Local )),
                                        ([], `Return `Variable 287));
                                 `Let ((286, (_, "", `Local )),
                                        ([],
                                          `Apply (`Variable 275,
                                                   [`Variable 284])));
                                 `Let ((285, (_, "", `Local )),
                                        ([],
                                          `Apply (`Variable 275,
                                                   [`Variable 279])))],
                                 `Return `ApplyPure (`TApp (`Variable 15,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)]),
                                                      [`Variable 286;
                                                       `Variable 285]))),
                             None, `Unknown );
                      `Let ((289, ([_], "lt", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(719, (`Unl , `Any ),
                                                        `Type ...);
                                                      (720, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 273,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 288; `Variable 280])));
                      `Fun ((294, ((_) ~> Bool, "_fun__g21", `Local )),
                             ([], [(293, (_, "", `Local ))],
                               ([`Let ((290, (_, "y", `Local )),
                                        ([], `Return `Variable 293));
                                 `Let ((292, (_, "", `Local )),
                                        ([],
                                          `Apply (`Variable 275,
                                                   [`Variable 290])));
                                 `Let ((291, (_, "", `Local )),
                                        ([],
                                          `Apply (`Variable 275,
                                                   [`Variable 279])))],
                                 `Return `ApplyPure (`TApp (`Variable 18,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)]),
                                                      [`Variable 292;
                                                       `Variable 291]))),
                             None, `Unknown );
                      `Let ((295, ([_], "ge", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(735, (`Unl , `Any ),
                                                        `Type ...);
                                                      (736, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 273,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 294; `Variable 280])));
                      `Let ((297, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(752, (`Unl , `Any ),
                                                        `Type ...);
                                                      (753, (`Unl , `Any ),
                                                        `Row ...);
                                                      (754, (`Unl , `Any ),
                                                        `Type ...)],
                                                      `TApp (`Variable 278,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `MetaTypeVar ...])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Type `MetaTypeVar ...]),
                                        [`Variable 275; `Variable 289])));
                      `Let ((296, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(761, (`Unl , `Any ),
                                                        `Type ...);
                                                      (762, (`Unl , `Any ),
                                                        `Row ...);
                                                      (763, (`Unl , `Any ),
                                                        `Type ...)],
                                                      `TApp (`Variable 278,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `MetaTypeVar ...])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Type `MetaTypeVar ...]),
                                        [`Variable 275; `Variable 295])))],
                      `Return `ApplyPure (`TApp (`Variable 56,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 297;
                                            `ApplyPure (`TApp (`Variable 56,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                         [`ApplyPure (
                                                          `TApp (`Variable 55,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 279;
                                                            `TApp (`Variable 54,
                                                                    [`Type 
                                                                    `MetaTypeVar ...])]);
                                                          `Variable 296])]))))),
          None, `Unknown )];
  `Fun ((302, (((a) ~b~> (|_::Base), [a]) ~b~> [a], "sortByBase", `Global )),
         ([(382, (`Unl , `Any ), `Type ...); (383, (`Unl , `Any ), `Row ...);
           (384, (`Unl , `Base ), `Row ...)],
           [(300, ((_) ~> (|_::Base), "", `Local ));
            (301, ([_], "", `Local ))],
           ([`Let ((298, ([_], "l", `Local )), ([], `Return `Variable 301));
             `Let ((299, ((_) ~> (|_::Base), "f", `Local )),
                    ([], `Return `Variable 300))],
             `Apply (`TApp (`TAbs ([(786, (`Unl , `Any ), `Type ...);
                                    (787, (`Unl , `Any ), `Row ...);
                                    (788, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 278,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Variable 299; `Variable 298]))), None, `Unknown );
  `Rec [((307, (((a::Any) ~b~> c, [a::Any]) ~b~> [c], "map", `Global )),
          ([(804, (`Any , `Any ), `Type ...);
            (811, (`Unl , `Any ), `Row ...);
            (812, (`Unl , `Any ), `Type ...)],
            [(305, ((_::Any) ~> _, "", `Local ));
             (306, ([_::Any], "", `Local ))],
            ([`Let ((303, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 306));
              `Let ((304, ((_::Any) ~> _, "f", `Local )),
                     ([], `Return `Variable 305));
              `Let ((310, ([_::Any], "", `Local )),
                     ([], `Return `Variable 303))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 310;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((311, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 310])));
                      `Let ((312, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 310])));
                      `Let ((309, ([_::Any], "tl", `Local )),
                             ([], `Return `Variable 312));
                      `Let ((308, (_::Any, "hd", `Local )),
                             ([], `Return `Variable 311));
                      `Let ((314, (_, "", `Local )),
                             ([], `Apply (`Variable 304, [`Variable 308])));
                      `Let ((313, ([_], "", `Local )),
                             ([],
                               `Apply (`Variable 307,
                                        [`Variable 304; `Variable 309])))],
                      `Return `ApplyPure (`TApp (`Variable 55,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 314; `Variable 313]))))),
          None, `Unknown )];
  `Rec [((317, (([a]) ~> [a], "init", `Global )),
          ([(385, (`Unl , `Any ), `Type ...);
            (386, (`Unl , `Any ), `Row ...)], [(316, ([_], "", `Local ))],
            ([`Let ((315, ([_], "list", `Local )),
                     ([], `Return `Variable 316));
              `Let ((321, ([_], "", `Local )), ([], `Return `Variable 315))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 321;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Special `Wrong [_]),
                    ([`Let ((322, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 321])));
                      `Let ((323, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 321])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 323;
                                         `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])]),
                            ([`Let ((318, (_, "y", `Local )),
                                     ([], `Return `Variable 322))],
                              `Return `TApp (`Variable 54,
                                              [`Type `MetaTypeVar ...])),
                            ([`Let ((320, ([_], "t", `Local )),
                                     ([], `Return `Variable 323));
                              `Let ((319, (_, "h", `Local )),
                                     ([], `Return `Variable 322));
                              `Let ((324, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(830,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (831,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 317,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 320])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 319;
                                                    `Variable 324]))))))),
          None, `Unknown )];
  `Fun ((327, ((a::Any) -> a::Any, "id", `Global )),
         ([(844, (`Any , `Any ), `Type ...); (845, (`Any , `Any ), `Row ...)],
           [(326, (_::Any, "", `Local ))],
           ([`Let ((325, (_::Any, "x", `Local )), ([], `Return `Variable 326))],
             `Return `Variable 325)), None, `Unknown );
  `Fun ((336,
          (((a::Any) -b-> (c::Any) -b-> d::Any) -> (a::Any, c::Any) -b-> d::Any,
            "uncurry", `Global )),
         ([(852, (`Any , `Any ), `Type ...); (854, (`Any , `Any ), `Row ...);
           (853, (`Any , `Any ), `Type ...);
           (856, (`Any , `Any ), `Type ...); (850, (`Any , `Any ), `Row ...)],
           [(335, ((_::Any) -b-> (_::Any) -b-> _::Any, "", `Local ))],
           ([`Let ((328, ((_::Any) -b-> (_::Any) -b-> _::Any, "f", `Local )),
                    ([], `Return `Variable 335));
             `Fun ((334, ((_::Any, _::Any) -> _::Any, "_fun__g22", `Local )),
                    ([],
                      [(332, (_::Any, "", `Local ));
                       (333, (_::Any, "", `Local ))],
                      ([`Let ((329, (_::Any, "y", `Local )),
                               ([], `Return `Variable 333));
                        `Let ((330, (_::Any, "x", `Local )),
                               ([], `Return `Variable 332));
                        `Let ((331, ((_::Any) -> _::Any, "", `Local )),
                               ([], `Apply (`Variable 328, [`Variable 330])))],
                        `Apply (`Variable 331, [`Variable 329]))), None,
                    `Unknown )], `Return `Variable 334)), None, `Unknown );
  `Fun ((345,
          (((a::Any, b::Any) -c-> d::Any) -> (a::Any) -> (b::Any) -c-> d::Any,
            "curry", `Global )),
         ([(865, (`Any , `Any ), `Type ...);
           (866, (`Any , `Any ), `Type ...); (867, (`Any , `Any ), `Row ...);
           (868, (`Any , `Any ), `Type ...); (863, (`Any , `Any ), `Row ...);
           (870, (`Any , `Any ), `Row ...)],
           [(344, ((_::Any, _::Any) -> _::Any, "", `Local ))],
           ([`Let ((337, ((_::Any, _::Any) -> _::Any, "f", `Local )),
                    ([], `Return `Variable 344));
             `Fun ((343,
                     ((_::Any) -> (_::Any) -> _::Any, "_fun__g23", `Local )),
                    ([], [(342, (_::Any, "", `Local ))],
                      ([`Let ((338, (_::Any, "x", `Local )),
                               ([], `Return `Variable 342));
                        `Fun ((341,
                                ((_::Any) -> _::Any, "_fun__g24", `Local )),
                               ([], [(340, (_::Any, "", `Local ))],
                                 ([`Let ((339, (_::Any, "y", `Local )),
                                          ([], `Return `Variable 340))],
                                   `Apply (`Variable 337,
                                            [`Variable 338; `Variable 339]))),
                               None, `Unknown )], `Return `Variable 341)),
                    None, `Unknown )],
             `Return `TAbs ([(869, (`Any , `Any ), `Row ...)], `Variable 343))),
         None, `Unknown );
  `Rec [((348, (([[a]]) ~> [a], "concat", `Global )),
          ([(892, (`Unl , `Any ), `Type ...);
            (891, (`Unl , `Any ), `Row ...)], [(347, ([[_]], "", `Local ))],
            ([`Let ((346, ([[_]], "list", `Local )),
                     ([], `Return `Variable 347));
              `Let ((351, ([[_]], "", `Local )), ([], `Return `Variable 346))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 351;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((352, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 351])));
                      `Let ((353, ([[_]], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 351])));
                      `Let ((350, ([[_]], "xs", `Local )),
                             ([], `Return `Variable 353));
                      `Let ((349, ([_], "x", `Local )),
                             ([], `Return `Variable 352));
                      `Let ((354, ([_], "", `Local )),
                             ([], `Apply (`Variable 348, [`Variable 350])))],
                      `Return `ApplyPure (`TApp (`Variable 56,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 349; `Variable 354]))))),
          None, `Unknown )];
  `Rec [((359, (((a) ~b~> Bool, [a]) ~b~> [a], "dropWhile", `Global )),
          ([(387, (`Unl , `Any ), `Type ...);
            (388, (`Unl , `Any ), `Row ...)],
            [(357, ((_) ~> Bool, "", `Local )); (358, ([_], "", `Local ))],
            ([`Let ((355, ([_], "list", `Local )),
                     ([], `Return `Variable 358));
              `Let ((356, ((_) ~> Bool, "pred", `Local )),
                     ([], `Return `Variable 357));
              `Let ((362, ([_], "", `Local )), ([], `Return `Variable 355))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 362;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((363, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 362])));
                      `Let ((364, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 362])));
                      `Let ((361, ([_], "t", `Local )),
                             ([], `Return `Variable 364));
                      `Let ((360, (_, "h", `Local )),
                             ([], `Return `Variable 363));
                      `Let ((365, (Bool, "", `Local )),
                             ([], `Apply (`Variable 356, [`Variable 360])));
                      `Let ((366, (Bool, "", `Local )),
                             ([], `Return `Variable 365))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `Primitive `Bool ;
                                                `Row ({}, ..., false)]),
                                        [`Variable 366; `Constant `Bool true]),
                            ([],
                              `Apply (`TApp (`TAbs ([(912, (`Unl , `Any ),
                                                       `Type ...);
                                                     (913, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 359,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 356; `Variable 361])),
                            ([],
                              `If (`ApplyPure (`TApp (`Variable 13,
                                                       [`Type `Primitive `Bool ;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 366;
                                                 `Constant `Bool false]),
                                    ([], `Return `Variable 355),
                                    ([], `Special `Wrong [_])))))))), 
          None, `Unknown )];
  `Fun ((370, ((Int) -> Bool, "even", `Global )),
         ([(933, (`Unl , `Any ), `Row ...)], [(369, (Int, "", `Local ))],
           ([`Let ((367, (Int, "i", `Local )), ([], `Return `Variable 369));
             `Let ((368, (Int, "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 6, [`Row ({}, ..., false)]),
                               [`Variable 367; `Constant `Int 2])))],
             `Return `ApplyPure (`TApp (`Variable 13,
                                         [`Type `MetaTypeVar ...;
                                          `Row ({}, ..., false)]),
                                  [`Variable 368; `Constant `Int 0]))), 
         None, `Unknown );
  `Fun ((373, (((1:a::Any|_)) -> a::Any, "first", `Global )),
         ([(938, (`Any , `Any ), `Type ...); (939, (`Unl , `Any ), `Row ...);
           (936, (`Any , `Any ), `Row ...)],
           [(372, ((1:_::Any|_), "", `Local ))],
           ([`Let ((371, ((1:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 372))],
             `Return `Project ("1", `Variable 371))), None, `Unknown );
  `Fun ((386, (([a]) ~> [a], "reverse", `Global )),
         ([(967, (`Unl , `Any ), `Type ...); (969, (`Unl , `Any ), `Row ...)],
           [(385, ([_], "", `Local ))],
           ([`Let ((374, ([_], "l", `Local )), ([], `Return `Variable 385));
             `Rec [((379, (([a], [a]) ~> [a], "aux", `Local )),
                     ([(956, (`Unl , `Any ), `Type ...);
                       (961, (`Unl , `Any ), `Row ...)],
                       [(377, ([_], "", `Local )); (378, ([_], "", `Local ))],
                       ([`Let ((375, ([_], "o", `Local )),
                                ([], `Return `Variable 378));
                         `Let ((376, ([_], "l", `Local )),
                                ([], `Return `Variable 377));
                         `Let ((382, ([_], "", `Local )),
                                ([], `Return `Variable 376))],
                         `If (`ApplyPure (`TApp (`Variable 13,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 382;
                                            `TApp (`Variable 54,
                                                    [`Type `MetaTypeVar ...])]),
                               ([], `Return `Variable 375),
                               ([`Let ((383, (_, "", `Local )),
                                        ([],
                                          `Apply (`TApp (`Variable 57,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 382])));
                                 `Let ((384, ([_], "", `Local )),
                                        ([],
                                          `Apply (`TApp (`Variable 58,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 382])));
                                 `Let ((381, ([_], "xs", `Local )),
                                        ([], `Return `Variable 384));
                                 `Let ((380, (_, "x", `Local )),
                                        ([], `Return `Variable 383))],
                                 `Apply (`Variable 379,
                                          [`Variable 381;
                                           `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 380;
                                                         `Variable 375])]))))),
                     None, `Unknown )]],
             `Apply (`TApp (`TAbs ([(964, (`Unl , `Any ), `Type ...);
                                    (965, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 379,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 374;
                       `TApp (`Variable 54, [`Type `MetaTypeVar ...])]))),
         None, `Unknown );
  `Fun ((389, (((6:a::Any|_)) -> a::Any, "sixth", `Global )),
         ([(975, (`Any , `Any ), `Type ...); (976, (`Unl , `Any ), `Row ...);
           (973, (`Any , `Any ), `Row ...)],
           [(388, ((6:_::Any|_), "", `Local ))],
           ([`Let ((387, ((6:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 388))],
             `Return `Project ("6", `Variable 387))), None, `Unknown );
  `Fun ((397,
          (((a::Any, b::Any) -c-> d::Any) -> (b::Any, a::Any) -c-> d::Any,
            "flip", `Global )),
         ([(984, (`Any , `Any ), `Type ...);
           (983, (`Any , `Any ), `Type ...); (985, (`Any , `Any ), `Row ...);
           (986, (`Any , `Any ), `Type ...); (981, (`Any , `Any ), `Row ...)],
           [(396, ((_::Any, _::Any) -> _::Any, "", `Local ))],
           ([`Let ((390, ((_::Any, _::Any) -> _::Any, "f", `Local )),
                    ([], `Return `Variable 396));
             `Fun ((395, ((_::Any, _::Any) -> _::Any, "_fun__g25", `Local )),
                    ([],
                      [(393, (_::Any, "", `Local ));
                       (394, (_::Any, "", `Local ))],
                      ([`Let ((391, (_::Any, "y", `Local )),
                               ([], `Return `Variable 394));
                        `Let ((392, (_::Any, "x", `Local )),
                               ([], `Return `Variable 393))],
                        `Apply (`Variable 390, [`Variable 391; `Variable 392]))),
                    None, `Unknown )], `Return `Variable 395)), None,
         `Unknown );
  `Fun ((400, (((3:a::Any|_)) -> a::Any, "third", `Global )),
         ([(995, (`Any , `Any ), `Type ...); (996, (`Unl , `Any ), `Row ...);
           (993, (`Any , `Any ), `Row ...)],
           [(399, ((3:_::Any|_), "", `Local ))],
           ([`Let ((398, ((3:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 399))],
             `Return `Project ("3", `Variable 398))), None, `Unknown );
  `Rec [((403, (([Bool]) ~> Bool, "and", `Global )),
          ([(1014, (`Unl , `Any ), `Row ...)],
            [(402, ([Bool], "", `Local ))],
            ([`Let ((401, ([Bool], "l", `Local )),
                     ([], `Return `Variable 402));
              `Let ((406, ([Bool], "", `Local )), ([], `Return `Variable 401))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 406;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Constant `Bool true),
                    ([`Let ((407, (Bool, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 406])));
                      `Let ((408, ([Bool], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 406])));
                      `Let ((405, ([Bool], "xs", `Local )),
                             ([], `Return `Variable 408));
                      `Let ((404, (Bool, "x", `Local )),
                             ([], `Return `Variable 407))],
                      `If (`Variable 404,
                            ([], `Apply (`Variable 403, [`Variable 405])),
                            ([], `Return `Constant `Bool false)))))), 
          None, `Unknown )];
  `Rec [((413, (((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool, "any", `Global )),
          ([(1025, (`Any , `Any ), `Type ...);
            (1032, (`Unl , `Any ), `Row ...)],
            [(411, ((_::Any) ~> Bool, "", `Local ));
             (412, ([_::Any], "", `Local ))],
            ([`Let ((409, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 412));
              `Let ((410, ((_::Any) ~> Bool, "p", `Local )),
                     ([], `Return `Variable 411));
              `Let ((416, ([_::Any], "", `Local )),
                     ([], `Return `Variable 409))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 416;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Constant `Bool false),
                    ([`Let ((417, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 416])));
                      `Let ((418, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 416])));
                      `Let ((415, ([_::Any], "xs", `Local )),
                             ([], `Return `Variable 418));
                      `Let ((414, (_::Any, "x", `Local )),
                             ([], `Return `Variable 417));
                      `Let ((419, (Bool, "", `Local )),
                             ([], `Apply (`Variable 410, [`Variable 414])))],
                      `If (`Variable 419, ([], `Return `Constant `Bool true),
                            ([],
                              `Apply (`Variable 413,
                                       [`Variable 410; `Variable 415]))))))),
          None, `Unknown )];
  `Fun ((422, (((2:a::Any|_)) -> a::Any, "second", `Global )),
         ([(1038, (`Any , `Any ), `Type ...);
           (1039, (`Unl , `Any ), `Row ...);
           (1036, (`Any , `Any ), `Row ...)],
           [(421, ((2:_::Any|_), "", `Local ))],
           ([`Let ((420, ((2:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 421))],
             `Return `Project ("2", `Variable 420))), None, `Unknown );
  `Rec [((429,
           (((a::Any, b::Any) ~c~> b::Any, b::Any, [a::Any]) ~c~> b::Any,
             "fold_right", `Global )),
          ([(1053, (`Any , `Any ), `Type ...);
            (1044, (`Any , `Any ), `Type ...);
            (1055, (`Any , `Any ), `Row ...)],
            [(426, ((_::Any, b::Any) ~> b::Any, "", `Local ));
             (427, (_::Any, "", `Local )); (428, ([_::Any], "", `Local ))],
            ([`Let ((423, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 428));
              `Let ((424, (_::Any, "u", `Local )),
                     ([], `Return `Variable 427));
              `Let ((425, ((_::Any, b::Any) ~> b::Any, "f", `Local )),
                     ([], `Return `Variable 426));
              `Let ((432, ([_::Any], "", `Local )),
                     ([], `Return `Variable 423))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 432;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Variable 424),
                    ([`Let ((433, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 432])));
                      `Let ((434, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 432])));
                      `Let ((431, ([_::Any], "xs", `Local )),
                             ([], `Return `Variable 434));
                      `Let ((430, (_::Any, "x", `Local )),
                             ([], `Return `Variable 433));
                      `Let ((435, (_::Any, "", `Local )),
                             ([],
                               `Apply (`Variable 429,
                                        [`Variable 425; `Variable 424;
                                         `Variable 431])))],
                      `Apply (`Variable 425, [`Variable 430; `Variable 435]))))),
          None, `Unknown )];
  `Fun ((442, (((a, a) ~b~> a, [a]) ~b~> a, "fold_right1", `Global )),
         ([(1077, (`Unl , `Any ), `Type ...);
           (1080, (`Unl , `Any ), `Row ...)],
           [(440, ((a, a) ~> a, "", `Local )); (441, ([_], "", `Local ))],
           ([`Let ((436, ([_], "l", `Local )), ([], `Return `Variable 441));
             `Let ((437, ((a, a) ~> a, "f", `Local )),
                    ([], `Return `Variable 440));
             `Let ((438, (_, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1067, (`Unl , `Any ), `Type ...);
                                             (1068, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 57,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 436])));
             `Let ((439, ([_], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1072, (`Unl , `Any ), `Type ...);
                                             (1073, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 58,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 436])))],
             `Apply (`TApp (`TAbs ([(1064, (`Any , `Any ), `Type ...);
                                    (1065, (`Any , `Any ), `Type ...);
                                    (1066, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 429,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Variable 437; `Variable 438; `Variable 439]))), 
         None, `Unknown );
  `Rec [((449, (([a], Int, a) ~> [a], "substAt", `Global )),
          ([(389, (`Unl , `Any ), `Type ...);
            (390, (`Unl , `Any ), `Row ...)],
            [(446, ([_], "", `Local )); (447, (Int, "", `Local ));
             (448, (_, "", `Local ))],
            ([`Let ((443, (_, "y", `Local )), ([], `Return `Variable 448));
              `Let ((444, (Int, "i", `Local )), ([], `Return `Variable 447));
              `Let ((445, ([_], "xs", `Local )), ([], `Return `Variable 446));
              `Let ((452, ([_], "", `Local )), ([], `Return `Variable 445))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 452;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((453, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 452])));
                      `Let ((454, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 452])));
                      `Let ((451, ([_], "xs", `Local )),
                             ([], `Return `Variable 454));
                      `Let ((450, (_, "x", `Local )),
                             ([], `Return `Variable 453))],
                      `If (`ApplyPure (`TApp (`Variable 17,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 444; `Constant `Int 0]),
                            ([],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 443;
                                                    `Variable 451])),
                            ([`Let ((455, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1107,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1108,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 449,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 451;
                                                 `ApplyPure (`TApp (`Variable 2,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Variable 444;
                                                               `Constant 
                                                               `Int 1]);
                                                 `Variable 443])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 450;
                                                    `Variable 455]))))))),
          None, `Unknown )];
  `Fun ((466, (([a], a, a) -> [a], "swap", `Global )),
         ([(1135, (`Unl , `Any ), `Type ...);
           (1138, (`Any , `Any ), `Row ...)],
           [(463, ([_], "", `Local )); (464, (_, "", `Local ));
            (465, (_, "", `Local ))],
           ([`Let ((456, (_, "x2", `Local )), ([], `Return `Variable 465));
             `Let ((457, (_, "x1", `Local )), ([], `Return `Variable 464));
             `Let ((458, ([_], "xs", `Local )), ([], `Return `Variable 463));
             `Fun ((462, ((a) -> [a], "_fun__g26", `Local )),
                    ([], [(461, (_, "", `Local ))],
                      ([`Let ((459, ([_], "_for__g1", `Local )),
                               ([], `Return `Variable 461));
                        `Let ((460, (_, "x", `Local )),
                               ([], `Return `Variable 461))],
                        `If (`ApplyPure (`TApp (`Variable 13,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 460; `Variable 457]),
                              ([],
                                `Return `ApplyPure (`TApp (`Variable 55,
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 456;
                                                      `TApp (`Variable 54,
                                                              [`Type 
                                                               `MetaTypeVar ...])])),
                              ([],
                                `If (`ApplyPure (`TApp (`Variable 13,
                                                         [`Type `MetaTypeVar ...;
                                                          `Row ({}, ...,
                                                                 false)]),
                                                  [`Variable 460;
                                                   `Variable 456]),
                                      ([],
                                        `Return `ApplyPure (`TApp (`Variable 55,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 457;
                                                              `TApp (
                                                              `Variable 54,
                                                               [`Type 
                                                                `MetaTypeVar ...])])),
                                      ([],
                                        `Return `ApplyPure (`TApp (`Variable 55,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 460;
                                                              `TApp (
                                                              `Variable 54,
                                                               [`Type 
                                                                `MetaTypeVar ...])]))))))),
                    None, `Unknown )],
             `Apply (`TApp (`Variable 257,
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Variable 462; `Variable 458]))), None, `Unknown );
  `Rec [((473,
           (((a::Any, b::Any) ~c~> a::Any, a::Any, [b::Any]) ~c~> a::Any,
             "fold_left", `Global )),
          ([(1143, (`Any , `Any ), `Type ...);
            (1152, (`Any , `Any ), `Type ...);
            (1155, (`Any , `Any ), `Row ...)],
            [(470, ((a::Any, _::Any) ~> a::Any, "", `Local ));
             (471, (_::Any, "", `Local )); (472, ([_::Any], "", `Local ))],
            ([`Let ((467, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 472));
              `Let ((468, (_::Any, "u", `Local )),
                     ([], `Return `Variable 471));
              `Let ((469, ((a::Any, _::Any) ~> a::Any, "p", `Local )),
                     ([], `Return `Variable 470));
              `Let ((476, ([_::Any], "", `Local )),
                     ([], `Return `Variable 467))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 476;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Variable 468),
                    ([`Let ((477, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 476])));
                      `Let ((478, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 476])));
                      `Let ((475, ([_::Any], "xs", `Local )),
                             ([], `Return `Variable 478));
                      `Let ((474, (_::Any, "x", `Local )),
                             ([], `Return `Variable 477));
                      `Let ((479, (_::Any, "", `Local )),
                             ([],
                               `Apply (`Variable 469,
                                        [`Variable 468; `Variable 474])))],
                      `Apply (`Variable 473,
                               [`Variable 469; `Variable 479; `Variable 475]))))),
          None, `Unknown )];
  `Fun ((484, (([a], Int) ~> a, "!!", `Global )),
         ([(1165, (`Unl , `Any ), `Type ...);
           (1167, (`Unl , `Any ), `Row ...)],
           [(482, ([_], "", `Local )); (483, (Int, "", `Local ))],
           ([`Let ((480, (Int, "n", `Local )), ([], `Return `Variable 483));
             `Let ((481, ([_], "xs", `Local )), ([], `Return `Variable 482))],
             `Apply (`TApp (`TAbs ([(1163, (`Unl , `Any ), `Type ...);
                                    (1164, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 237,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 481; `Variable 480]))), None, `Unknown );
  `Fun ((487, (((4:a::Any|_)) -> a::Any, "fourth", `Global )),
         ([(1173, (`Any , `Any ), `Type ...);
           (1174, (`Unl , `Any ), `Row ...);
           (1171, (`Any , `Any ), `Row ...)],
           [(486, ((4:_::Any|_), "", `Local ))],
           ([`Let ((485, ((4:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 486))],
             `Return `Project ("4", `Variable 485))), None, `Unknown );
  `Fun ((490, (([Int]) ~> Int, "product", `Global )),
         ([(1189, (`Unl , `Any ), `Row ...)], [(489, ([Int], "", `Local ))],
           ([`Let ((488, ([Int], "ns", `Local )), ([], `Return `Variable 489))],
             `Apply (`TApp (`TAbs ([(1181, (`Any , `Any ), `Type ...);
                                    (1182, (`Any , `Any ), `Type ...);
                                    (1183, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 473,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`TApp (`Variable 3, [`Row ({}, ..., false)]);
                       `Constant `Int 1; `Variable 488]))), None, `Unknown );
  `Fun ((493, (((9:a::Any|_)) -> a::Any, "ninth", `Global )),
         ([(1194, (`Any , `Any ), `Type ...);
           (1195, (`Unl , `Any ), `Row ...);
           (1192, (`Any , `Any ), `Row ...)],
           [(492, ((9:_::Any|_), "", `Local ))],
           ([`Let ((491, ((9:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 492))],
             `Return `Project ("9", `Variable 491))), None, `Unknown );
  `Fun ((510, (((a::Any, Int) ~b~> c, [a::Any]) ~b~> [c], "mapi", `Global )),
         ([(1212, (`Any , `Any ), `Type ...);
           (1225, (`Unl , `Any ), `Row ...);
           (1223, (`Unl , `Any ), `Type ...)],
           [(508, ((_::Any, Int) ~> _, "", `Local ));
            (509, ([_::Any], "", `Local ))],
           ([`Let ((494, ([_::Any], "xs", `Local )),
                    ([], `Return `Variable 509));
             `Let ((495, ((_::Any, Int) ~> _, "f", `Local )),
                    ([], `Return `Variable 508));
             `Rec [((500, ((Int, [_::Any]) ~> [_], "mi", `Local )),
                     ([],
                       [(498, (Int, "", `Local ));
                        (499, ([_::Any], "", `Local ))],
                       ([`Let ((496, ([_::Any], "xs", `Local )),
                                ([], `Return `Variable 499));
                         `Let ((497, (Int, "i", `Local )),
                                ([], `Return `Variable 498));
                         `Let ((503, ([_::Any], "", `Local )),
                                ([], `Return `Variable 496))],
                         `If (`ApplyPure (`TApp (`Variable 13,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 503;
                                            `TApp (`Variable 54,
                                                    [`Type `MetaTypeVar ...])]),
                               ([],
                                 `Return `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])),
                               ([`Let ((504, (_::Any, "", `Local )),
                                        ([],
                                          `Apply (`TApp (`Variable 57,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 503])));
                                 `Let ((505, ([_::Any], "", `Local )),
                                        ([],
                                          `Apply (`TApp (`Variable 58,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 503])));
                                 `Let ((502, ([_::Any], "xs", `Local )),
                                        ([], `Return `Variable 505));
                                 `Let ((501, (_::Any, "x", `Local )),
                                        ([], `Return `Variable 504));
                                 `Let ((507, (_, "", `Local )),
                                        ([],
                                          `Apply (`Variable 495,
                                                   [`Variable 501;
                                                    `Variable 497])));
                                 `Let ((506, ([_], "", `Local )),
                                        ([],
                                          `Apply (`Variable 500,
                                                   [`ApplyPure (`TApp (
                                                                `Variable 1,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 497;
                                                                  `Constant 
                                                                  `Int 1]);
                                                    `Variable 502])))],
                                 `Return `ApplyPure (`TApp (`Variable 55,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)]),
                                                      [`Variable 507;
                                                       `Variable 506]))))),
                     None, `Unknown )]],
             `Apply (`Variable 500, [`Constant `Int 0; `Variable 494]))),
         None, `Unknown );
  `Rec [((513, (([Bool]) ~> Bool, "or", `Global )),
          ([(1243, (`Unl , `Any ), `Row ...)],
            [(512, ([Bool], "", `Local ))],
            ([`Let ((511, ([Bool], "l", `Local )),
                     ([], `Return `Variable 512));
              `Let ((516, ([Bool], "", `Local )), ([], `Return `Variable 511))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 516;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Constant `Bool false),
                    ([`Let ((517, (Bool, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 516])));
                      `Let ((518, ([Bool], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 516])));
                      `Let ((515, ([Bool], "xs", `Local )),
                             ([], `Return `Variable 518));
                      `Let ((514, (Bool, "x", `Local )),
                             ([], `Return `Variable 517))],
                      `If (`Variable 514, ([], `Return `Constant `Bool true),
                            ([], `Apply (`Variable 513, [`Variable 515]))))))),
          None, `Unknown )];
  `Rec [((523, ((a, [a]) ~> Bool, "elem", `Global )),
          ([(1273, (`Unl , `Any ), `Type ...);
            (1281, (`Unl , `Any ), `Row ...)],
            [(521, (_, "", `Local )); (522, ([_], "", `Local ))],
            ([`Let ((519, ([_], "l", `Local )), ([], `Return `Variable 522));
              `Let ((520, (_, "x", `Local )), ([], `Return `Variable 521))],
              `If (`ApplyPure (`TApp (`TAbs ([(1252, (`Unl , `Any ), `Row ...)],
                                              `TApp (`Variable 100,
                                                      [`Row ({}, ..., false)])),
                                       [`Row ({}, ..., false)]),
                                [`ApplyPure (`TApp (`Variable 13,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)]),
                                              [`Variable 519;
                                               `TApp (`Variable 54,
                                                       [`Type `MetaTypeVar ...])])]),
                    ([`Let ((525, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(1264, (`Unl , `Any ),
                                                        `Type ...);
                                                      (1265, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 57,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 519])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 520; `Variable 525]),
                            ([], `Return `Constant `Bool true),
                            ([`Let ((524, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1271,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1272,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 58,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 519])))],
                              `Apply (`TApp (`Variable 523,
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 520; `Variable 524])))),
                    ([], `Return `Constant `Bool false)))), None, `Unknown )];
  `Rec [((528, (([a]) ~> a, "last", `Global )),
          ([(391, (`Unl , `Any ), `Type ...);
            (392, (`Unl , `Any ), `Row ...)], [(527, ([_], "", `Local ))],
            ([`Let ((526, ([_], "list", `Local )),
                     ([], `Return `Variable 527));
              `Let ((532, ([_], "", `Local )), ([], `Return `Variable 526))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 532;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Special `Wrong _),
                    ([`Let ((533, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 532])));
                      `Let ((534, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 532])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 534;
                                         `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])]),
                            ([`Let ((529, (_, "x", `Local )),
                                     ([], `Return `Variable 533))],
                              `Return `Variable 529),
                            ([`Let ((531, ([_], "t", `Local )),
                                     ([], `Return `Variable 534));
                              `Let ((530, (_, "h", `Local )),
                                     ([], `Return `Variable 533))],
                              `Apply (`TApp (`TAbs ([(1296, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1297, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 528,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 531]))))))), None,
          `Unknown )];
  `Fun ((540, ((Bool, String) ~> (), "assert", `Global )),
         ([(1319, (`Unl , `Any ), `Row ...)],
           [(538, (Bool, "", `Local )); (539, (String, "", `Local ))],
           ([`Let ((535, (String, "msg", `Local )),
                    ([], `Return `Variable 539));
             `Let ((536, (Bool, "ok", `Local )), ([], `Return `Variable 538));
             `Let ((537, ((), "", `Local )),
                    ([],
                      `If (`ApplyPure (`TApp (`TAbs ([(1311, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 100,
                                                              [`Row (
                                                               {}, ..., false)])),
                                               [`Row ({}, ..., false)]),
                                        [`Variable 536]),
                            ([],
                              `Apply (`TApp (`TAbs ([(1314, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 68,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`ApplyPure (`TApp (`Variable 12,
                                                            [`Row ({}, ...,
                                                                    false)]),
                                                     [`Constant `String "assertion failed: ";
                                                      `Variable 535])])),
                            ([], `Return `Extend ({}, None)))))],
             `Return `Extend ({}, None))), None, `Unknown );
  `Fun ((543, ((Int) -> Int, "abs", `Global )),
         ([(393, (`Unl , `Any ), `Row ...)], [(542, (Int, "", `Local ))],
           ([`Let ((541, (Int, "i", `Local )), ([], `Return `Variable 542))],
             `If (`ApplyPure (`TApp (`Variable 15,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 541; `Constant `Int 0]),
                   ([],
                     `Return `ApplyPure (`TApp (`Variable 75,
                                                 [`Row ({}, ..., false)]),
                                          [`Variable 541])),
                   ([], `Return `Variable 541)))), None, `Unknown );
  `Fun ((545, ((_) -> (), "ignore", `Global )),
         ([(394, (`Unl , `Any ), `Type ...); (395, (`Unl , `Any ), `Row ...)],
           [(544, (_, "", `Local ))], ([], `Return `Extend ({}, None))),
         None, `Unknown );
  `Fun ((548, (([a]) ~> [a], "curtail", `Global )),
         ([(1341, (`Unl , `Any ), `Type ...);
           (1343, (`Unl , `Any ), `Row ...)], [(547, ([_], "", `Local ))],
           ([`Let ((546, ([_], "list", `Local )), ([], `Return `Variable 547))],
             `Apply (`TApp (`TAbs ([(1339, (`Unl , `Any ), `Type ...);
                                    (1340, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 317,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 546]))), None, `Unknown );
  `Fun ((555, (((a, a) ~b~> a, [a]) ~b~> a, "fold_left1", `Global )),
         ([(1364, (`Unl , `Any ), `Type ...);
           (1366, (`Unl , `Any ), `Row ...)],
           [(553, ((a, a) ~> a, "", `Local )); (554, ([_], "", `Local ))],
           ([`Let ((549, ([_], "l", `Local )), ([], `Return `Variable 554));
             `Let ((550, ((a, a) ~> a, "p", `Local )),
                    ([], `Return `Variable 553));
             `Let ((551, (_, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1353, (`Unl , `Any ), `Type ...);
                                             (1354, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 57,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 549])));
             `Let ((552, ([_], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1358, (`Unl , `Any ), `Type ...);
                                             (1359, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 58,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 549])))],
             `Apply (`TApp (`TAbs ([(1350, (`Any , `Any ), `Type ...);
                                    (1351, (`Any , `Any ), `Type ...);
                                    (1352, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 473,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Variable 550; `Variable 551; `Variable 552]))), 
         None, `Unknown );
  `Rec [((560, (([a], [b]) ~> [(a, b)], "zip", `Global )),
          ([(396, (`Unl , `Any ), `Type ...);
            (397, (`Unl , `Any ), `Type ...);
            (398, (`Unl , `Any ), `Row ...)],
            [(558, ([_], "", `Local )); (559, ([_], "", `Local ))],
            ([`Let ((556, ([_], "r", `Local )), ([], `Return `Variable 559));
              `Let ((557, ([_], "l", `Local )), ([], `Return `Variable 558));
              `Let ((565, (([_], [_]), "", `Local )),
                     ([],
                       `Return `Extend ({"1" => `Variable 557; "2" => 
                                                               `Variable 556; },
                                         None)));
              `Let ((567, ([_], "", `Local )),
                     ([], `Return `Project ("1", `Variable 565)));
              `Let ((568, ([_], "", `Local )),
                     ([], `Return `Project ("2", `Variable 565)))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 567;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 568;
                                         `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])]),
                            ([],
                              `Return `TApp (`Variable 54,
                                              [`Type `Record ({"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               "2" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false)])),
                            ([],
                              `Return `TApp (`Variable 54,
                                              [`Type `Record ({"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               "2" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false)])))),
                    ([`Let ((569, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 567])));
                      `Let ((570, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 567])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 568;
                                         `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])]),
                            ([],
                              `Return `TApp (`Variable 54,
                                              [`Type `Record ({"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               "2" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false)])),
                            ([`Let ((571, (_, "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 57,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 568])));
                              `Let ((572, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 58,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 568])));
                              `Let ((562, ([_], "rt", `Local )),
                                     ([], `Return `Variable 572));
                              `Let ((561, (_, "rh", `Local )),
                                     ([], `Return `Variable 571));
                              `Let ((564, ([_], "lt", `Local )),
                                     ([], `Return `Variable 570));
                              `Let ((563, (_, "lh", `Local )),
                                     ([], `Return `Variable 569));
                              `Let ((573, ([(_, _)], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1391,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1392,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1393,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 560,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 564;
                                                 `Variable 562])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Extend ({"1" => 
                                                              `Variable 563; 
                                                             "2" => `Variable 561;
                                                             }, None);
                                                    `Variable 573]))))))),
          None, `Unknown )];
  `Rec [((578, (((a::Any) ~b~> Bool, [a::Any]) ~b~> Bool, "all", `Global )),
          ([(1419, (`Any , `Any ), `Type ...);
            (1426, (`Unl , `Any ), `Row ...)],
            [(576, ((_::Any) ~> Bool, "", `Local ));
             (577, ([_::Any], "", `Local ))],
            ([`Let ((574, ([_::Any], "l", `Local )),
                     ([], `Return `Variable 577));
              `Let ((575, ((_::Any) ~> Bool, "p", `Local )),
                     ([], `Return `Variable 576));
              `Let ((581, ([_::Any], "", `Local )),
                     ([], `Return `Variable 574))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 581;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([], `Return `Constant `Bool true),
                    ([`Let ((582, (_::Any, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 581])));
                      `Let ((583, ([_::Any], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 581])));
                      `Let ((580, ([_::Any], "xs", `Local )),
                             ([], `Return `Variable 583));
                      `Let ((579, (_::Any, "x", `Local )),
                             ([], `Return `Variable 582));
                      `Let ((584, (Bool, "", `Local )),
                             ([], `Apply (`Variable 575, [`Variable 579])))],
                      `If (`Variable 584,
                            ([],
                              `Apply (`Variable 578,
                                       [`Variable 575; `Variable 580])),
                            ([], `Return `Constant `Bool false)))))), 
          None, `Unknown )];
  `Fun ((592, (([a]) ~> a, "the", `Global )),
         ([(1454, (`Unl , `Any ), `Type ...);
           (1455, (`Unl , `Any ), `Row ...)], [(591, ([_], "", `Local ))],
           ([`Let ((585, ([_], "l", `Local )), ([], `Return `Variable 591));
             `Let ((586, (_, "x", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1432, (`Unl , `Any ), `Type ...);
                                             (1433, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 57,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 585])));
             `Fun ((589, ((_) -> Bool, "_fun__g27", `Local )),
                    ([], [(588, (_, "", `Local ))],
                      ([`Let ((587, (_, "y", `Local )),
                               ([], `Return `Variable 588))],
                        `Return `ApplyPure (`TApp (`Variable 13,
                                                    [`Type `MetaTypeVar ...;
                                                     `Row ({}, ..., false)]),
                                             [`Variable 586; `Variable 587]))),
                    None, `Unknown );
             `Let ((590, (Bool, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1438, (`Any , `Any ), `Type ...);
                                             (1439, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 578,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TAbs ([(1445, (`Any , `Any ), `Row ...)],
                                        `Variable 589); `Variable 585])))],
             `If (`Variable 590, ([], `Return `Variable 586),
                   ([],
                     `Apply (`TApp (`TAbs ([(1451, (`Unl , `Any ), `Row ...);
                                            (1452, (`Unl , `Any ), `Type ...)],
                                            `TApp (`Variable 77,
                                                    [`Row ({}, ..., false);
                                                     `Type `MetaTypeVar ...])),
                                     [`Row ({}, ..., false);
                                      `Type `MetaTypeVar ...]),
                              [`Constant `String "list argument to 'the' had varying values."]))))),
         None, `Unknown );
  `Fun ((595, (([Int]) ~> Int, "sum", `Global )),
         ([(1469, (`Unl , `Any ), `Row ...)], [(594, ([Int], "", `Local ))],
           ([`Let ((593, ([Int], "ns", `Local )), ([], `Return `Variable 594))],
             `Apply (`TApp (`TAbs ([(1461, (`Any , `Any ), `Type ...);
                                    (1462, (`Any , `Any ), `Type ...);
                                    (1463, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 473,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`TApp (`Variable 1, [`Row ({}, ..., false)]);
                       `Constant `Int 0; `Variable 593]))), None, `Unknown );
  `Fun ((599, ((Int) -> Bool, "odd", `Global )),
         ([(1480, (`Unl , `Any ), `Row ...)], [(598, (Int, "", `Local ))],
           ([`Let ((596, (Int, "i", `Local )), ([], `Return `Variable 598));
             `Let ((597, (Int, "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 6, [`Row ({}, ..., false)]),
                               [`Variable 596; `Constant `Int 2])))],
             `Return `ApplyPure (`TApp (`Variable 13,
                                         [`Type `MetaTypeVar ...;
                                          `Row ({}, ..., false)]),
                                  [`Variable 597; `Constant `Int 1]))), 
         None, `Unknown );
  `Fun ((602, (((7:a::Any|_)) -> a::Any, "seventh", `Global )),
         ([(1485, (`Any , `Any ), `Type ...);
           (1486, (`Unl , `Any ), `Row ...);
           (1483, (`Any , `Any ), `Row ...)],
           [(601, ((7:_::Any|_), "", `Local ))],
           ([`Let ((600, ((7:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 601))],
             `Return `Project ("7", `Variable 600))), None, `Unknown );
  `Fun ((605, (((10:a::Any|_)) -> a::Any, "tenth", `Global )),
         ([(1493, (`Any , `Any ), `Type ...);
           (1494, (`Unl , `Any ), `Row ...);
           (1491, (`Any , `Any ), `Row ...)],
           [(604, ((10:_::Any|_), "", `Local ))],
           ([`Let ((603, ((10:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 604))],
             `Return `Project ("10", `Variable 603))), None, `Unknown );
  `Rec [((608, (([(a, b)]) ~> ([a], [b]), "unzip", `Global )),
          ([(1520, (`Unl , `Any ), `Type ...);
            (1521, (`Unl , `Any ), `Type ...);
            (1519, (`Unl , `Any ), `Row ...)],
            [(607, ([(_, _)], "", `Local ))],
            ([`Let ((606, ([(_, _)], "l", `Local )),
                     ([], `Return `Variable 607));
              `Let ((612, ([(_, _)], "", `Local )),
                     ([], `Return `Variable 606))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 612;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `MetaTypeVar ...;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([],
                      `Return `Extend ({"1" => `TApp (`Variable 54,
                                                       [`Type `MetaTypeVar ...]);
                                        "2" => `TApp (`Variable 54,
                                                       [`Type `MetaTypeVar ...]);
                                        }, None)),
                    ([`Let ((613, ((_, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 612])));
                      `Let ((614, ([(_, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 612])));
                      `Let ((616, (_, "", `Local )),
                             ([], `Return `Project ("1", `Variable 613)));
                      `Let ((617, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 613)));
                      `Let ((611, ([(_, _)], "xs", `Local )),
                             ([], `Return `Variable 614));
                      `Let ((609, (_, "b", `Local )),
                             ([], `Return `Variable 617));
                      `Let ((610, (_, "a", `Local )),
                             ([], `Return `Variable 616));
                      `Let ((620, (([_], [_]), "", `Local )),
                             ([], `Apply (`Variable 608, [`Variable 611])));
                      `Let ((618, ([_], "d", `Local )),
                             ([], `Return `Project ("2", `Variable 620)));
                      `Let ((619, ([_], "c", `Local )),
                             ([], `Return `Project ("1", `Variable 620)))],
                      `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 55,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 610;
                                                             `Variable 619]);
                                        "2" => `ApplyPure (`TApp (`Variable 55,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 609;
                                                             `Variable 618]);
                                        }, None))))), None, `Unknown )];
  `Rec [((625, (([a], [[a]]) ~> [a], "join", `Global )),
          ([(1546, (`Unl , `Any ), `Type ...);
            (1545, (`Unl , `Any ), `Row ...)],
            [(623, ([_], "", `Local )); (624, ([[_]], "", `Local ))],
            ([`Let ((621, ([[_]], "list", `Local )),
                     ([], `Return `Variable 624));
              `Let ((622, ([_], "glue", `Local )),
                     ([], `Return `Variable 623));
              `Let ((629, ([[_]], "", `Local )), ([], `Return `Variable 621))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 629;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((630, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 629])));
                      `Let ((631, ([[_]], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 629])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 631;
                                         `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])]),
                            ([`Let ((626, ([_], "x", `Local )),
                                     ([], `Return `Variable 630))],
                              `Return `Variable 626),
                            ([`Let ((628, ([[_]], "xs", `Local )),
                                     ([], `Return `Variable 631));
                              `Let ((627, ([_], "x", `Local )),
                                     ([], `Return `Variable 630));
                              `Let ((632, ([_], "", `Local )),
                                     ([],
                                       `Apply (`Variable 625,
                                                [`Variable 622;
                                                 `Variable 628])))],
                              `Return `ApplyPure (`TApp (`Variable 56,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 627;
                                                    `ApplyPure (`TApp (
                                                                `Variable 56,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 622;
                                                                  `Variable 632])]))))))),
          None, `Unknown )];
  `Fun ((635, (((5:a::Any|_)) -> a::Any, "fifth", `Global )),
         ([(1552, (`Any , `Any ), `Type ...);
           (1553, (`Unl , `Any ), `Row ...);
           (1550, (`Any , `Any ), `Row ...)],
           [(634, ((5:_::Any|_), "", `Local ))],
           ([`Let ((633, ((5:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 634))],
             `Return `Project ("5", `Variable 633))), None, `Unknown );
  `Fun ((638, (((8:a::Any|_)) -> a::Any, "eighth", `Global )),
         ([(1560, (`Any , `Any ), `Type ...);
           (1561, (`Unl , `Any ), `Row ...);
           (1558, (`Any , `Any ), `Row ...)],
           [(637, ((8:_::Any|_), "", `Local ))],
           ([`Let ((636, ((8:_::Any|_), "p", `Local )),
                    ([], `Return `Variable 637))],
             `Return `Project ("8", `Variable 636))), None, `Unknown );
  `Fun ((650, ((Int, Int) ~> [Int], "intRange", `Global )),
         ([(1592, (`Unl , `Any ), `Row ...)],
           [(648, (Int, "", `Local )); (649, (Int, "", `Local ))],
           ([`Let ((639, (Int, "n", `Local )), ([], `Return `Variable 649));
             `Let ((640, (Int, "m", `Local )), ([], `Return `Variable 648));
             `Rec [((647,
                      ((Int, Int, [Int]) ~> [Int], "intRangeAux", `Local )),
                     ([(1587, (`Unl , `Any ), `Row ...)],
                       [(644, (Int, "", `Local )); (645, (Int, "", `Local ));
                        (646, ([Int], "", `Local ))],
                       ([`Let ((641, ([Int], "result", `Local )),
                                ([], `Return `Variable 646));
                         `Let ((642, (Int, "n", `Local )),
                                ([], `Return `Variable 645));
                         `Let ((643, (Int, "m", `Local )),
                                ([], `Return `Variable 644))],
                         `If (`ApplyPure (`TApp (`Variable 16,
                                                  [`Type `MetaTypeVar ...;
                                                   `Row ({}, ..., false)]),
                                           [`Variable 643; `Variable 642]),
                               ([], `Return `Variable 641),
                               ([],
                                 `Apply (`Variable 647,
                                          [`Variable 643;
                                           `ApplyPure (`TApp (`Variable 2,
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 642;
                                                         `Constant `Int 1]);
                                           `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 642;
                                                         `Variable 641])]))))),
                     None, `Unknown )]],
             `Apply (`TApp (`TAbs ([(1589, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 647,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`Variable 640; `Variable 639;
                       `TApp (`Variable 54, [`Type `Primitive `Int ])]))),
         None, `Unknown );
  `Rec [((655, (((a) ~b~> Bool, [a]) ~b~> [a], "takeWhile", `Global )),
          ([(399, (`Unl , `Any ), `Type ...);
            (400, (`Unl , `Any ), `Row ...)],
            [(653, ((_) ~> Bool, "", `Local )); (654, ([_], "", `Local ))],
            ([`Let ((651, ([_], "list", `Local )),
                     ([], `Return `Variable 654));
              `Let ((652, ((_) ~> Bool, "pred", `Local )),
                     ([], `Return `Variable 653));
              `Let ((658, ([_], "", `Local )), ([], `Return `Variable 651))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 658;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((659, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 658])));
                      `Let ((660, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 658])));
                      `Let ((657, ([_], "t", `Local )),
                             ([], `Return `Variable 660));
                      `Let ((656, (_, "h", `Local )),
                             ([], `Return `Variable 659));
                      `Let ((661, (Bool, "", `Local )),
                             ([], `Apply (`Variable 652, [`Variable 656])));
                      `Let ((662, (Bool, "", `Local )),
                             ([], `Return `Variable 661))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `Primitive `Bool ;
                                                `Row ({}, ..., false)]),
                                        [`Variable 662; `Constant `Bool true]),
                            ([`Let ((663, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1614,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1615,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 655,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 652;
                                                 `Variable 657])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 656;
                                                    `Variable 663])),
                            ([],
                              `If (`ApplyPure (`TApp (`Variable 13,
                                                       [`Type `Primitive `Bool ;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 662;
                                                 `Constant `Bool false]),
                                    ([],
                                      `Return `TApp (`Variable 54,
                                                      [`Type `MetaTypeVar ...])),
                                    ([], `Special `Wrong [_])))))))), 
          None, `Unknown )];
  `Rec [((668, ((a, [(a, b)]) ~> [(a, b)], "removeAssoc", `Global )),
          ([(402, (`Unl , `Any ), `Type ...);
            (403, (`Unl , `Any ), `Type ...);
            (404, (`Unl , `Any ), `Row ...)],
            [(666, (_, "", `Local )); (667, ([(_, _)], "", `Local ))],
            ([`Let ((664, ([(_, _)], "l", `Local )),
                     ([], `Return `Variable 667));
              `Let ((665, (_, "x", `Local )), ([], `Return `Variable 666));
              `Let ((672, ([(_, _)], "", `Local )),
                     ([], `Return `Variable 664))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 672;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `MetaTypeVar ...;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([],
                      `Return `TApp (`Variable 54,
                                      [`Type `Record ({"1" => `Present 
                                                              `MetaTypeVar ...;
                                                       "2" => `Present 
                                                              `MetaTypeVar ...;
                                                       }, ..., false)])),
                    ([`Let ((673, ((_, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 672])));
                      `Let ((674, ([(_, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 672])));
                      `Let ((676, (_, "", `Local )),
                             ([], `Return `Project ("1", `Variable 673)));
                      `Let ((677, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 673)));
                      `Let ((671, ([(_, _)], "xs", `Local )),
                             ([], `Return `Variable 674));
                      `Let ((669, (_, "v", `Local )),
                             ([], `Return `Variable 677));
                      `Let ((670, (_, "k", `Local )),
                             ([], `Return `Variable 676))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 670; `Variable 665]),
                            ([], `Return `Variable 671),
                            ([`Let ((678, ([(_, _)], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1649,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1650,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1651,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 668,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 665;
                                                 `Variable 671])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Extend ({"1" => 
                                                              `Variable 670; 
                                                             "2" => `Variable 669;
                                                             }, None);
                                                    `Variable 678]))))))),
          None, `Unknown )];
  `Fun ((685, ((Maybe (a)) -> Bool, "isJust", `Global )),
         ([(405, (`Unl , `Any ), `Type ...); (406, (`Unl , `Any ), `Row ...)],
           [(684, (Maybe (a), "", `Local ))],
           ([`Let ((679, (Maybe (a), "x", `Local )),
                    ([], `Return `Variable 684));
             `Let ((681, (Maybe (a), "", `Local )),
                    ([], `Return `Variable 679))],
             `Case (`Variable 681,
                     {"Just" => ((682, (_, "", `Local )),
                                  ([`Let ((680, (_, "x", `Local )),
                                           ([], `Return `Variable 682))],
                                    `Return `Constant `Bool true));
                      "Nothing" => ((683, ((), "", `Local )),
                                     ([], `Return `Constant `Bool false));
                      }, None))), None, `Unknown );
  `Fun ((694, ((Maybe (a), a) -> a, "fromMaybe", `Global )),
         ([(407, (`Unl , `Any ), `Type ...); (408, (`Unl , `Any ), `Row ...)],
           [(692, (Maybe (a), "", `Local )); (693, (_, "", `Local ))],
           ([`Let ((686, (_, "y", `Local )), ([], `Return `Variable 693));
             `Let ((687, (Maybe (a), "x", `Local )),
                    ([], `Return `Variable 692));
             `Let ((689, (Maybe (a), "", `Local )),
                    ([], `Return `Variable 687))],
             `Case (`Variable 689,
                     {"Just" => ((690, (_, "", `Local )),
                                  ([`Let ((688, (_, "x", `Local )),
                                           ([], `Return `Variable 690))],
                                    `Return `Variable 688));
                      "Nothing" => ((691, ((), "", `Local )),
                                     ([], `Return `Variable 686));
                      }, None))), None, `Unknown );
  `Fun ((698, (([_]) -> Bool, "empty", `Global )),
         ([(409, (`Unl , `Any ), `Type ...); (410, (`Unl , `Any ), `Row ...)],
           [(697, ([_], "", `Local ))],
           ([`Let ((695, ([_], "l", `Local )), ([], `Return `Variable 697));
             `Let ((696, ([_], "", `Local )), ([], `Return `Variable 695))],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 696;
                                `TApp (`Variable 54, [`Type `MetaTypeVar ...])]),
                   ([], `Return `Constant `Bool true),
                   ([], `Return `Constant `Bool false)))), None, `Unknown );
  `Rec [((703, (((a) ~b~> Bool, [a]) ~b~> a, "find", `Global )),
          ([(411, (`Unl , `Any ), `Type ...);
            (412, (`Unl , `Any ), `Row ...)],
            [(701, ((_) ~> Bool, "", `Local )); (702, ([_], "", `Local ))],
            ([`Let ((699, ([_], "l", `Local )), ([], `Return `Variable 702));
              `Let ((700, ((_) ~> Bool, "p", `Local )),
                     ([], `Return `Variable 701));
              `Let ((706, ([_], "", `Local )), ([], `Return `Variable 699))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 706;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([`Let ((710, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(1724, (`Unl , `Any ),
                                                        `Row ...);
                                                      (1725, (`Unl , `Any ),
                                                        `Type ...)],
                                                      `TApp (`Variable 77,
                                                              [`Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `MetaTypeVar ...])),
                                               [`Row ({}, ..., false);
                                                `Type `MetaTypeVar ...]),
                                        [`Constant `String "Not_found"])))],
                      `Return `TAbs ([(1729, (`Unl , `Any ), `Type ...)],
                                      `Variable 710)),
                    ([`Let ((707, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 706])));
                      `Let ((708, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 706])));
                      `Let ((705, ([_], "xs", `Local )),
                             ([], `Return `Variable 708));
                      `Let ((704, (_, "x", `Local )),
                             ([], `Return `Variable 707));
                      `Let ((709, (Bool, "", `Local )),
                             ([], `Apply (`Variable 700, [`Variable 704])))],
                      `If (`Variable 709, ([], `Return `Variable 704),
                            ([],
                              `Apply (`TApp (`TAbs ([(1719, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1720, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 703,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 700; `Variable 705]))))))),
          None, `Unknown )];
  `Fun ((713, ((String) -> Bool, "isInt", `Global )),
         ([(413, (`Unl , `Any ), `Row ...)], [(712, (String, "", `Local ))],
           ([`Let ((711, (String, "x", `Local )), ([], `Return `Variable 712))],
             `Return `ApplyPure (`TApp (`Variable 159,
                                         [`Row ({}, ..., false)]),
                                  [`Variable 711;
                                   `Inject ("Seq",
                                             `ApplyPure (`TApp (`Variable 55,
                                                                 [`Type 
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                          [`Inject ("Repeat",
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Inject (
                                                                    "Question",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    Regex); 
                                                                    "2" => 
                                                                    `Inject (
                                                                    "Simply",
                                                                    `Constant 
                                                                    `String "-",
                                                                    Regex); },
                                                                    None),
                                                                    Regex);
                                                           `ApplyPure (
                                                           `TApp (`Variable 55,
                                                                   [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Inject (
                                                             "Repeat",
                                                              `Extend (
                                                              {"1" => 
                                                               `Inject (
                                                               "Plus",
                                                                `Extend (
                                                                {}, None),
                                                                Regex);
                                                               "2" => 
                                                               `Inject (
                                                               "Range",
                                                                `Extend (
                                                                {"1" => 
                                                                 `Constant 
                                                                 `Char '0'; 
                                                                "2" => 
                                                                `Constant 
                                                                `Char '9'; },
                                                                 None), Regex);
                                                               }, None),
                                                              Regex);
                                                             `ApplyPure (
                                                             `TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Inject (
                                                               "EndAnchor",
                                                                `Extend (
                                                                {}, None),
                                                                Regex);
                                                               `TApp (
                                                               `Variable 54,
                                                                [`Type 
                                                                 `Application (
                                                                 {id = "List"; name = "List"; arity = 
                                                                 [(`Type ,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ))]},
                                                                  [`Type 
                                                                   `Alias (
                                                                   ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))])])])])]),
                                             Regex)]))), None, `Unknown );
  `Rec [((718, (((a) ~b~> Bool, [a]) ~b~> Maybe (a), "search", `Global )),
          ([(414, (`Unl , `Any ), `Type ...);
            (415, (`Unl , `Any ), `Row ...)],
            [(716, ((_) ~> Bool, "", `Local )); (717, ([_], "", `Local ))],
            ([`Let ((714, ([_], "l", `Local )), ([], `Return `Variable 717));
              `Let ((715, ((_) ~> Bool, "p", `Local )),
                     ([], `Return `Variable 716));
              `Let ((721, ([_], "", `Local )), ([], `Return `Variable 714))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 721;
                                 `TApp (`Variable 54,
                                         [`Type `MetaTypeVar ...])]),
                    ([],
                      `Return `Inject ("Nothing", `Extend ({}, None),
                                        [|Just:_|Nothing|])),
                    ([`Let ((722, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 721])));
                      `Let ((723, ([_], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 721])));
                      `Let ((720, ([_], "xs", `Local )),
                             ([], `Return `Variable 723));
                      `Let ((719, (_, "x", `Local )),
                             ([], `Return `Variable 722));
                      `Let ((724, (Bool, "", `Local )),
                             ([], `Apply (`Variable 715, [`Variable 719])))],
                      `If (`Variable 724,
                            ([],
                              `Return `Inject ("Just", `Variable 719,
                                                [|Just:_|Nothing|])),
                            ([],
                              `Apply (`TApp (`TAbs ([(1779, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1780, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 718,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 715; `Variable 720]))))))),
          None, `Unknown )];
  `Rec [((729, ((String, [(String, a)]) ~> a, "assoc", `Global )),
          ([(416, (`Unl , `Any ), `Type ...);
            (417, (`Unl , `Any ), `Row ...)],
            [(727, (String, "", `Local ));
             (728, ([(String, _)], "", `Local ))],
            ([`Let ((725, ([(String, _)], "l", `Local )),
                     ([], `Return `Variable 728));
              `Let ((726, (String, "x", `Local )),
                     ([], `Return `Variable 727));
              `Let ((733, ([(String, _)], "", `Local )),
                     ([], `Return `Variable 725))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 733;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `Primitive `String ;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([`Let ((739, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(1814, (`Unl , `Any ),
                                                        `Row ...);
                                                      (1815, (`Unl , `Any ),
                                                        `Type ...)],
                                                      `TApp (`Variable 77,
                                                              [`Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `MetaTypeVar ...])),
                                               [`Row ({}, ..., false);
                                                `Type `MetaTypeVar ...]),
                                        [`ApplyPure (`TApp (`Variable 12,
                                                             [`Row ({}, ...,
                                                                    false)]),
                                                      [`Constant `String "Not found ";
                                                       `Variable 726])])))],
                      `Return `TAbs ([(1822, (`Unl , `Any ), `Type ...)],
                                      `Variable 739)),
                    ([`Let ((734, ((String, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 733])));
                      `Let ((735, ([(String, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 733])));
                      `Let ((737, (String, "", `Local )),
                             ([], `Return `Project ("1", `Variable 734)));
                      `Let ((738, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 734)));
                      `Let ((732, ([(String, _)], "xs", `Local )),
                             ([], `Return `Variable 735));
                      `Let ((730, (_, "v", `Local )),
                             ([], `Return `Variable 738));
                      `Let ((731, (String, "k", `Local )),
                             ([], `Return `Variable 737))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 731; `Variable 726]),
                            ([], `Return `Variable 730),
                            ([],
                              `Apply (`TApp (`TAbs ([(1809, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1810, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 729,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 726; `Variable 732]))))))),
          None, `Unknown )];
  `Fun ((742, ((String) -> Bool, "isFloat", `Global )),
         ([(418, (`Unl , `Any ), `Row ...)], [(741, (String, "", `Local ))],
           ([`Let ((740, (String, "x", `Local )), ([], `Return `Variable 741))],
             `Return `ApplyPure (`TApp (`Variable 159,
                                         [`Row ({}, ..., false)]),
                                  [`Variable 740;
                                   `Inject ("Seq",
                                             `ApplyPure (`TApp (`Variable 55,
                                                                 [`Type 
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                          [`Inject ("Repeat",
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Inject (
                                                                    "Question",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    Regex); 
                                                                    "2" => 
                                                                    `Inject (
                                                                    "Simply",
                                                                    `Constant 
                                                                    `String "-",
                                                                    Regex); },
                                                                    None),
                                                                    Regex);
                                                           `ApplyPure (
                                                           `TApp (`Variable 55,
                                                                   [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Inject (
                                                             "Repeat",
                                                              `Extend (
                                                              {"1" => 
                                                               `Inject (
                                                               "Plus",
                                                                `Extend (
                                                                {}, None),
                                                                Regex);
                                                               "2" => 
                                                               `Inject (
                                                               "Range",
                                                                `Extend (
                                                                {"1" => 
                                                                 `Constant 
                                                                 `Char '0'; 
                                                                "2" => 
                                                                `Constant 
                                                                `Char '9'; },
                                                                 None), Regex);
                                                               }, None),
                                                              Regex);
                                                             `ApplyPure (
                                                             `TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Inject (
                                                               "Repeat",
                                                                `Extend (
                                                                {"1" => 
                                                                 `Inject (
                                                                 "Question",
                                                                  `Extend (
                                                                  {}, 
                                                                   None),
                                                                  Regex);
                                                                 "2" => 
                                                                 `Inject (
                                                                 "Group",
                                                                  `Inject (
                                                                  "Seq",
                                                                   `ApplyPure (
                                                                   `TApp (
                                                                   `Variable 55,
                                                                    [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Inject (
                                                                    "Quote",
                                                                    `Inject (
                                                                    "Simply",
                                                                    `Constant 
                                                                    `String ".",
                                                                    Regex),
                                                                    Regex);
                                                                    `ApplyPure (
                                                                    `TApp (
                                                                    `Variable 55,
                                                                    [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Inject (
                                                                    "Repeat",
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Inject (
                                                                    "Plus",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    Regex); 
                                                                    "2" => 
                                                                    `Inject (
                                                                    "Range",
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Constant 
                                                                    `Char '0';
                                                                    "2" => 
                                                                    `Constant 
                                                                    `Char '9';
                                                                    }, 
                                                                    None),
                                                                    Regex); },
                                                                    None),
                                                                    Regex);
                                                                    `TApp (
                                                                    `Variable 54,
                                                                    [`Type 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))])])])]),
                                                                   Regex),
                                                                  Regex);
                                                                 }, None),
                                                                Regex);
                                                               `ApplyPure (
                                                               `TApp (
                                                               `Variable 55,
                                                                [`Type 
                                                                 `Application (
                                                                 {id = "List"; name = "List"; arity = 
                                                                 [(`Type ,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ))]},
                                                                  [`Type 
                                                                   `Alias (
                                                                   ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Inject (
                                                                 "EndAnchor",
                                                                  `Extend (
                                                                  {}, 
                                                                   None),
                                                                  Regex);
                                                                 `TApp (
                                                                 `Variable 54,
                                                                  [`Type 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Regex",
                                                                    []),
                                                                    `Variant (
                                                                    {
                                                                    "Alternate" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Any" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "EndAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Group" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Quote" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Range" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Char ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Repeat" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "Plus" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Question" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); 
                                                                    "Star" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false); 
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); 
                                                                    "Replace" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "Seq" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "Simply" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "StartAnchor" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))])])])])])]),
                                             Regex)]))), None, `Unknown );
  `Rec [((747, ((String, [(String, a)]) ~> [a], "assocAll", `Global )),
          ([(419, (`Unl , `Any ), `Type ...);
            (420, (`Unl , `Any ), `Row ...)],
            [(745, (String, "", `Local ));
             (746, ([(String, _)], "", `Local ))],
            ([`Let ((743, ([(String, _)], "l", `Local )),
                     ([], `Return `Variable 746));
              `Let ((744, (String, "x", `Local )),
                     ([], `Return `Variable 745));
              `Let ((751, ([(String, _)], "", `Local )),
                     ([], `Return `Variable 743))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 751;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `Primitive `String ;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([],
                      `Return `TApp (`Variable 54, [`Type `MetaTypeVar ...])),
                    ([`Let ((752, ((String, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 751])));
                      `Let ((753, ([(String, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 751])));
                      `Let ((755, (String, "", `Local )),
                             ([], `Return `Project ("1", `Variable 752)));
                      `Let ((756, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 752)));
                      `Let ((750, ([(String, _)], "xs", `Local )),
                             ([], `Return `Variable 753));
                      `Let ((748, (_, "v", `Local )),
                             ([], `Return `Variable 756));
                      `Let ((749, (String, "k", `Local )),
                             ([], `Return `Variable 755))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 749; `Variable 744]),
                            ([`Let ((757, ([_], "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(1876,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (1877,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 747,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 744;
                                                 `Variable 750])))],
                              `Return `ApplyPure (`TApp (`Variable 55,
                                                          [`Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 748;
                                                    `Variable 757])),
                            ([],
                              `Apply (`TApp (`TAbs ([(1883, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1884, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 747,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 744; `Variable 750]))))))),
          None, `Unknown )];
  `Rec [((762, ((a, [(a, b)]) ~> Maybe (b), "lookup", `Global )),
          ([(421, (`Unl , `Any ), `Type ...);
            (422, (`Unl , `Any ), `Type ...);
            (423, (`Unl , `Any ), `Row ...)],
            [(760, (_, "", `Local )); (761, ([(_, _)], "", `Local ))],
            ([`Let ((758, ([(_, _)], "l", `Local )),
                     ([], `Return `Variable 761));
              `Let ((759, (_, "x", `Local )), ([], `Return `Variable 760));
              `Let ((766, ([(_, _)], "", `Local )),
                     ([], `Return `Variable 758))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 766;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `MetaTypeVar ...;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([],
                      `Return `Inject ("Nothing", `Extend ({}, None),
                                        [|Just:_|Nothing|])),
                    ([`Let ((767, ((_, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 766])));
                      `Let ((768, ([(_, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 766])));
                      `Let ((770, (_, "", `Local )),
                             ([], `Return `Project ("1", `Variable 767)));
                      `Let ((771, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 767)));
                      `Let ((765, ([(_, _)], "xs", `Local )),
                             ([], `Return `Variable 768));
                      `Let ((763, (_, "b", `Local )),
                             ([], `Return `Variable 771));
                      `Let ((764, (_, "a", `Local )),
                             ([], `Return `Variable 770))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 764; `Variable 759]),
                            ([],
                              `Return `Inject ("Just", `Variable 763,
                                                [|Just:_|Nothing|])),
                            ([],
                              `Apply (`TApp (`TAbs ([(1915, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1916, (`Unl , `Any ),
                                                       `Type ...);
                                                     (1917, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 762,
                                                             [`Type `MetaTypeVar ...;
                                                              `Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 759; `Variable 765]))))))),
          None, `Unknown )];
  `Fun ((788, ((String, [(String, String)], Xml) ~> Xml, "makeXml", `Global )),
         ([(424, (`Unl , `Any ), `Row ...)],
           [(785, (String, "", `Local ));
            (786, ([(String, String)], "", `Local ));
            (787, (Xml, "", `Local ))],
           ([`Let ((772, (Xml, "children", `Local )),
                    ([], `Return `Variable 787));
             `Let ((773, ([(String, String)], "attributes", `Local )),
                    ([], `Return `Variable 786));
             `Let ((774, (String, "name", `Local )),
                    ([], `Return `Variable 785));
             `Fun ((781,
                     ((String, (String, String)) -> String, "_fun__g28",
                       `Local )),
                    ([],
                      [(779, (String, "", `Local ));
                       (780, ((String, String), "", `Local ))],
                      ([`Let ((775, ((String, String), "curr", `Local )),
                               ([], `Return `Variable 780));
                        `Let ((776, (String, "prev", `Local )),
                               ([], `Return `Variable 779));
                        `Let ((777, (String, "value", `Local )),
                               ([], `Return `Project ("2", `Variable 775)));
                        `Let ((778, (String, "attr", `Local )),
                               ([], `Return `Project ("1", `Variable 775)))],
                        `Return `ApplyPure (`TApp (`Variable 12,
                                                    [`Row ({}, ..., false)]),
                                             [`Variable 776;
                                              `ApplyPure (`TApp (`Variable 12,
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Constant 
                                                            `String " ";
                                                            `ApplyPure (
                                                            `TApp (`Variable 12,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 778;
                                                              `ApplyPure (
                                                              `TApp (
                                                              `Variable 12,
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Constant 
                                                                `String "=\"";
                                                                `ApplyPure (
                                                                `TApp (
                                                                `Variable 12,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 777;
                                                                  `Constant 
                                                                  `String "\""])])])])]))),
                    None, `Unknown );
             `Let ((782, (String, "attributes", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(1937, (`Any , `Any ), `Type ...);
                                             (1938, (`Any , `Any ), `Type ...);
                                             (1939, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 473,
                                                     [`Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TAbs ([(1959, (`Unl , `Any ), `Row ...)],
                                        `Variable 781); `Constant `String "";
                                `Variable 773])));
             `Let ((783, (String, "startTag", `Local )),
                    ([],
                      `Return `ApplyPure (`TApp (`Variable 12,
                                                  [`Row ({}, ..., false)]),
                                           [`Constant `String "<";
                                            `ApplyPure (`TApp (`Variable 12,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                         [`Variable 774;
                                                          `ApplyPure (
                                                          `TApp (`Variable 12,
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 782;
                                                            `Constant 
                                                            `String ">"])])])));
             `Let ((784, (String, "endTag", `Local )),
                    ([],
                      `Return `ApplyPure (`TApp (`Variable 12,
                                                  [`Row ({}, ..., false)]),
                                           [`Constant `String "</";
                                            `ApplyPure (`TApp (`Variable 12,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                         [`Variable 774;
                                                          `Constant `String ">"])])))],
             `Apply (`TApp (`TAbs ([(1978, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 169,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`Variable 12,
                                           [`Row ({}, ..., false)]),
                                    [`Variable 783;
                                     `ApplyPure (`TApp (`Variable 12,
                                                         [`Row ({}, ...,
                                                                 false)]),
                                                  [`ApplyPure (`TApp (
                                                               `TAbs (
                                                               [(1981,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (1982,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 29,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 772]);
                                                   `Variable 784])])]))),
         None, `Unknown );
  `Rec [((793, ((a, [(a, _)]) ~> Bool, "memassoc", `Global )),
          ([(425, (`Unl , `Any ), `Type ...);
            (426, (`Unl , `Any ), `Type ...);
            (427, (`Unl , `Any ), `Row ...)],
            [(791, (_, "", `Local )); (792, ([(_, _)], "", `Local ))],
            ([`Let ((789, ([(_, _)], "l", `Local )),
                     ([], `Return `Variable 792));
              `Let ((790, (_, "x", `Local )), ([], `Return `Variable 791));
              `Let ((797, ([(_, _)], "", `Local )),
                     ([], `Return `Variable 789))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 797;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `MetaTypeVar ...;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([], `Return `Constant `Bool false),
                    ([`Let ((798, ((_, _), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 797])));
                      `Let ((799, ([(_, _)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 797])));
                      `Let ((801, (_, "", `Local )),
                             ([], `Return `Project ("1", `Variable 798)));
                      `Let ((802, (_, "", `Local )),
                             ([], `Return `Project ("2", `Variable 798)));
                      `Let ((796, ([(_, _)], "xs", `Local )),
                             ([], `Return `Variable 799));
                      `Let ((794, (_, "v", `Local )),
                             ([], `Return `Variable 802));
                      `Let ((795, (_, "k", `Local )),
                             ([], `Return `Variable 801))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 795; `Variable 790]),
                            ([], `Return `Constant `Bool true),
                            ([],
                              `Apply (`TApp (`TAbs ([(2010, (`Unl , `Any ),
                                                       `Type ...);
                                                     (2011, (`Unl , `Any ),
                                                       `Type ...);
                                                     (2012, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 793,
                                                             [`Type `MetaTypeVar ...;
                                                              `Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Type `MetaTypeVar ...;
                                               `Row ({}, ..., false)]),
                                       [`Variable 790; `Variable 796]))))))),
          None, `Unknown )];
  `Fun ((809, ((Maybe (a)) ~> a, "fromJust", `Global )),
         ([(428, (`Unl , `Any ), `Type ...); (429, (`Unl , `Any ), `Row ...)],
           [(808, (Maybe (a), "", `Local ))],
           ([`Let ((803, (Maybe (a), "x", `Local )),
                    ([], `Return `Variable 808));
             `Let ((805, (Maybe (a), "", `Local )),
                    ([], `Return `Variable 803))],
             `Case (`Variable 805,
                     {"Just" => ((806, (_, "", `Local )),
                                  ([`Let ((804, (_, "x", `Local )),
                                           ([], `Return `Variable 806))],
                                    `Return `Variable 804));
                      "Nothing" => ((807, ((), "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(2039,
                                                                (`Unl , `Any ),
                                                                `Row ...);
                                                              (2040,
                                                                (`Unl , `Any ),
                                                                `Type ...)],
                                                              `TApp (
                                                              `Variable 77,
                                                               [`Row (
                                                                {}, ...,
                                                                 false);
                                                                `Type 
                                                                `MetaTypeVar ...])),
                                                       [`Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...]),
                                                [`Constant `String "fromJust failed"])));
                      }, None))), None, `Unknown );
  `Fun ((817,
          ((TableHandle((|a::(Any,Base)),_::Any,_::Any)) -> [(|a::(Any,Base))],
            "asList", `Global )),
         ([(2053, (`Any , `Base ), `Row ...);
           (2050, (`Any , `Any ), `Type ...);
           (2049, (`Any , `Any ), `Type ...);
           (2046, (`Any , `Any ), `Row ...)],
           [(816, (TableHandle((|_::(Any,Base)),_::Any,_::Any), "", `Local ))],
           ([`Let ((810,
                     (TableHandle((|_::(Any,Base)),_::Any,_::Any), "t",
                       `Local )), ([], `Return `Variable 816))],
             `Special `Query (None,
                               ([`Fun ((814,
                                         (((|a::(Any,Base))) -> [(|a::(Any,Base))],
                                           "_fun__g29", `Local )),
                                        ([],
                                          [(813,
                                             ((|_::(Any,Base)), "", `Local ))],
                                          ([`Let ((811,
                                                    (TableHandle((|_::(Any,Base)),_::Any,_::Any),
                                                      "_for__g2", `Local )),
                                                   ([], `Return `Variable 813));
                                            `Let ((812,
                                                    ((|_::(Any,Base)), "x",
                                                      `Local )),
                                                   ([], `Return `Variable 813))],
                                            `Return `ApplyPure (`TApp (
                                                                `Variable 55,
                                                                 [`Type 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 812;
                                                                  `TApp (
                                                                  `Variable 54,
                                                                   [`Type 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false)])]))),
                                        None, `Unknown );
                                 `Let ((815,
                                         ([(|_::(Any,Base))], "", `Local )),
                                        ([],
                                          `Apply (`TApp (`Variable 136,
                                                          [`Type `MetaTypeVar ...;
                                                           `Type `MetaTypeVar ...;
                                                           `Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 810])))],
                                 `Apply (`TApp (`Variable 257,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false);
                                                  `Type `Record ({}, ...,
                                                                  false)]),
                                          [`Variable 814; `Variable 815])),
                               [(|_::(Any,Base))]))), None, `Server );
  `Let ((818, ([(String, String)], "multipart", `Global )),
         ([],
           `Return `ApplyPure (`TApp (`Variable 55,
                                       [`Type `Record ({"1" => `Present 
                                                               `Primitive `String ;
                                                        "2" => `Present 
                                                               `Primitive `String ;
                                                        }, ..., false);
                                        `Row ({"wild" => `Present `Record (
                                                                  {}, ...,
                                                                   false);
                                               }, ..., false)]),
                                [`Extend ({"1" => `Constant `String "enctype";
                                           "2" => `Constant `String "multipart/form-data";
                                           }, None);
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `Primitive `String ;
                                                          "2" => `Present 
                                                                 `Primitive `String ;
                                                          }, ..., false)])])));
  `Fun ((823, ((State (a,b), a) {}~> (b, a), "runState", `Global )),
         ([(435, (`Unl , `Any ), `Type ...);
           (436, (`Unl , `Any ), `Type ...)],
           [(821, (State (a,b), "", `Local )); (822, (_, "", `Local ))],
           ([`Let ((819, (_, "i", `Local )), ([], `Return `Variable 822));
             `Let ((820, (State (a,b), "s", `Local )),
                    ([], `Return `Variable 821))],
             `Apply (`Variable 820, [`Variable 819]))), None, `Unknown );
  `Fun ((835,
          ((State (a,b), (b) {}~> State (a,c)) -> State (a,c), ">>=",
            `Global )),
         ([(438, (`Unl , `Any ), `Type ...);
           (439, (`Unl , `Any ), `Type ...);
           (441, (`Unl , `Any ), `Type ...);
           (2071, (`Unl , `Any ), `Row ...)],
           [(833, (State (a,b), "", `Local ));
            (834, ((_) {}~> State (b,c), "", `Local ))],
           ([`Let ((824, ((_) {}~> State (b,c), "f", `Local )),
                    ([], `Return `Variable 834));
             `Let ((825, (State (a,b), "x", `Local )),
                    ([], `Return `Variable 833));
             `Fun ((832, ((a) {}~> (_, a), "_fun__g30", `Local )),
                    ([], [(831, (_, "", `Local ))],
                      ([`Let ((826, (_, "s1", `Local )),
                               ([], `Return `Variable 831));
                        `Let ((829, ((_, _), "", `Local )),
                               ([], `Apply (`Variable 825, [`Variable 826])));
                        `Let ((827, (_, "s2", `Local )),
                               ([], `Return `Project ("2", `Variable 829)));
                        `Let ((828, (_, "v", `Local )),
                               ([], `Return `Project ("1", `Variable 829)));
                        `Let ((830, (State (a,b), "", `Local )),
                               ([], `Apply (`Variable 824, [`Variable 828])))],
                        `Apply (`TApp (`TAbs ([(2077, (`Unl , `Any ),
                                                 `Type ...);
                                               (2078, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 823,
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...]),
                                 [`Variable 830; `Variable 827]))), None,
                    `Unknown )], `Return `Variable 832)), None, `Unknown );
  `Fun ((838, ((a) -> Maybe (a), "pureE", `Global )),
         ([(443, (`Unl , `Any ), `Type ...); (444, (`Unl , `Any ), `Row ...)],
           [(837, (_, "", `Local ))],
           ([`Let ((836, (_, "x", `Local )), ([], `Return `Variable 837))],
             `Return `Inject ("Just", `Variable 836, [|Just:_|Nothing|]))),
         None, `Unknown );
  `Fun ((844, ((a) -> State (c,a), "return", `Global )),
         ([(445, (`Unl , `Any ), `Type ...); (446, (`Unl , `Any ), `Row ...);
           (447, (`Unl , `Any ), `Type ...)], [(843, (_, "", `Local ))],
           ([`Let ((839, (_, "a", `Local )), ([], `Return `Variable 843));
             `Fun ((842, ((a::Any) -> (_, a::Any), "_fun__g31", `Local )),
                    ([], [(841, (_::Any, "", `Local ))],
                      ([`Let ((840, (_::Any, "s", `Local )),
                               ([], `Return `Variable 841))],
                        `Return `Extend ({"1" => `Variable 839; "2" => 
                                                                `Variable 840;
                                                                }, None))),
                    None, `Unknown )],
             `Return `TAbs ([(2095, (`Any , `Any ), `Type ...);
                             (2096, (`Any , `Any ), `Row ...)], `Variable 842))),
         None, `Unknown );
  `Fun ((851, ((Xml) -> Formlet (()), "xml", `Global )),
         ([(448, (`Unl , `Any ), `Row ...)], [(850, (Xml, "", `Local ))],
           ([`Let ((845, (Xml, "x", `Local )), ([], `Return `Variable 850));
             `Fun ((849, ((_) -> (Xml, Maybe (())), "_fun__g32", `Local )),
                    ([], [(848, (_, "", `Local ))],
                      ([`Let ((846, (_, "e", `Local )),
                               ([], `Return `Variable 848));
                        `Let ((847, (Maybe (()), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2110,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2111,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 838,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Extend ({}, None)])))],
                        `Return `Extend ({"1" => `Variable 845; "2" => 
                                                                `Variable 847;
                                                                }, None))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(2105, (`Unl , `Any ), `Type ...);
                                    (2106, (`Unl , `Any ), `Row ...);
                                    (2107, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 844,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Extend ({"1" => `Variable 845; "2" => `TAbs (
                                                              [(2108,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Type ...);
                                                               (2114,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `Variable 849);
                                                       }, None)]))), 
         None, `Unknown );
  `Fun ((854, ((String) ~> Formlet (()), "text", `Global )),
         ([(449, (`Unl , `Any ), `Row ...)], [(853, (String, "", `Local ))],
           ([`Let ((852, (String, "s", `Local )), ([], `Return `Variable 853))],
             `Apply (`TApp (`TAbs ([(2124, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 851,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`TAbs ([(2125, (`Unl , `Any ),
                                                    `Row ...)],
                                                  `TApp (`Variable 25,
                                                          [`Row ({}, ...,
                                                                  false)])),
                                           [`Row ({}, ..., false)]),
                                    [`Variable 852])]))), None, `Unknown );
  `Fun ((871, ((XmlContext, Formlet (a)) -> Formlet (a), "plug", `Global )),
         ([(450, (`Unl , `Any ), `Type ...);
           (2158, (`Unl , `Any ), `Row ...)],
           [(869, (XmlContext, "", `Local ));
            (870, (Formlet (a), "", `Local ))],
           ([`Let ((855, (Formlet (a), "m", `Local )),
                    ([], `Return `Variable 870));
             `Let ((856, (XmlContext, "f", `Local )),
                    ([], `Return `Variable 869));
             `Fun ((868,
                     (((Xml, (a::Any) {}~> (Xml, b::Any))) {}~> State (c,(Xml, (a::Any) {}~> (Xml, b::Any))),
                       "_fun__g34", `Local )),
                    ([],
                      [(867,
                         ((Xml, (_::Any) {}~> (Xml, _::Any)), "", `Local ))],
                      ([`Let ((857,
                                ((_::Any) {}~> (Xml, _::Any), "collector",
                                  `Local )),
                               ([], `Return `Project ("2", `Variable 867)));
                        `Let ((858, (Xml, "x", `Local )),
                               ([], `Return `Project ("1", `Variable 867)));
                        `Let ((866, (Xml, "", `Local )),
                               ([], `Apply (`Variable 856, [`Variable 858])));
                        `Fun ((865,
                                ((_::Any) {}~> (Xml, _::Any), "_fun__g33",
                                  `Local )),
                               ([], [(864, (_::Any, "", `Local ))],
                                 ([`Let ((859, (_::Any, "env", `Local )),
                                          ([], `Return `Variable 864));
                                   `Let ((862, ((Xml, _::Any), "", `Local )),
                                          ([],
                                            `Apply (`Variable 857,
                                                     [`Variable 859])));
                                   `Let ((860, (_::Any, "c", `Local )),
                                          ([],
                                            `Return `Project ("2",
                                                               `Variable 862)));
                                   `Let ((861, (Xml, "xml", `Local )),
                                          ([],
                                            `Return `Project ("1",
                                                               `Variable 862)));
                                   `Let ((863, (Xml, "", `Local )),
                                          ([],
                                            `Apply (`Variable 856,
                                                     [`Variable 861])))],
                                   `Return `Extend ({"1" => `Variable 863; 
                                                    "2" => `Variable 860; },
                                                     None))), None, `Unknown )],
                        `Apply (`TApp (`TAbs ([(2141, (`Unl , `Any ),
                                                 `Type ...);
                                               (2142, (`Unl , `Any ),
                                                 `Row ...);
                                               (2143, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 844,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Extend ({"1" => `Variable 866; "2" => 
                                                                  `Variable 865;
                                                                  }, 
                                            None)]))), None, `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 855;
                       `TAbs ([(2145, (`Any , `Any ), `Type ...);
                               (2149, (`Any , `Any ), `Type ...);
                               (2153, (`Unl , `Any ), `Type ...)],
                               `Variable 868)]))), None, `Unknown );
  `Fun ((887,
          ((Maybe ((a) -b-> c), Maybe (a)) -b-> Maybe (c), "applyE", `Global )),
         ([(452, (`Unl , `Any ), `Type ...);
           (2180, (`Unl , `Any ), `Row ...);
           (454, (`Unl , `Any ), `Type ...)],
           [(885, (Maybe ((a) -b-> c), "", `Local ));
            (886, (Maybe (a), "", `Local ))],
           ([`Let ((872, (Maybe (a), "x", `Local )),
                    ([], `Return `Variable 886));
             `Let ((873, (Maybe ((a) -b-> c), "f", `Local )),
                    ([], `Return `Variable 885));
             `Let ((876, ((Maybe ((a) -b-> c), Maybe (a)), "", `Local )),
                    ([],
                      `Return `Extend ({"1" => `Variable 873; "2" => 
                                                              `Variable 872; },
                                        None)));
             `Let ((878, (Maybe ((a) -b-> c), "", `Local )),
                    ([], `Return `Project ("1", `Variable 876)));
             `Let ((879, (Maybe (a), "", `Local )),
                    ([], `Return `Project ("2", `Variable 876)))],
             `Case (`Variable 878,
                     {"Just" => ((880, ((_) -> _, "", `Local )),
                                  ([],
                                    `Case (`Variable 879,
                                            {"Just" => ((881,
                                                          (_, "", `Local )),
                                                         ([`Let ((874,
                                                                   (_, "x",
                                                                    `Local )),
                                                                  ([],
                                                                    `Return 
                                                                    `Variable 881));
                                                           `Let ((875,
                                                                   ((_) -> _,
                                                                    "f",
                                                                    `Local )),
                                                                  ([],
                                                                    `Return 
                                                                    `Variable 880));
                                                           `Let ((882,
                                                                   (_, "",
                                                                    `Local )),
                                                                  ([],
                                                                    `Apply (
                                                                    `Variable 875,
                                                                    [`Variable 874])))],
                                                           `Return `Inject (
                                                                   "Just",
                                                                    `Variable 882,
                                                                    [|Just:_|Nothing|])));
                                             },
                                            Some
                                              (((883,
                                                  ([|Nothing|], "", `Local )),
                                                 ([],
                                                   `Return `Inject ("Nothing",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    [|Just:_|Nothing|])))))));
                      },
                     Some
                       (((884, ([|Nothing|], "", `Local )),
                          ([],
                            `Return `Inject ("Nothing", `Extend ({}, None),
                                              [|Just:_|Nothing|]))))))),
         None, `Unknown );
  `Fun ((893, (((a) {}~> b, State (c,a)) -> State (c,b), "fmap", `Global )),
         ([(456, (`Unl , `Any ), `Type ...);
           (458, (`Unl , `Any ), `Type ...);
           (459, (`Unl , `Any ), `Type ...);
           (2206, (`Unl , `Any ), `Row ...)],
           [(891, ((_) {}~> _, "", `Local ));
            (892, (State (a,b), "", `Local ))],
           ([`Let ((888, (State (a,b), "x", `Local )),
                    ([], `Return `Variable 892));
             `Let ((889, ((_) {}~> _, "f", `Local )),
                    ([], `Return `Variable 891));
             `Let ((890, ((_) {}~> State (b,c), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 246,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TApp (`Variable 844,
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]);
                                `Variable 889])))],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 888; `Variable 890]))), None, `Unknown );
  `Fun ((916,
          ((Formlet (a), Formlet ((a) {}~> b)) -> Formlet (b), "@@@",
            `Global )),
         ([(461, (`Unl , `Any ), `Type ...);
           (463, (`Unl , `Any ), `Type ...);
           (2265, (`Unl , `Any ), `Row ...)],
           [(914, (Formlet (a), "", `Local ));
            (915, (Formlet ((a) {}~> b), "", `Local ))],
           ([`Let ((894, (Formlet ((a) {}~> b), "k", `Local )),
                    ([], `Return `Variable 915));
             `Let ((895, (Formlet (a), "m", `Local )),
                    ([], `Return `Variable 914));
             `Fun ((913,
                     ((([XmlItem], (Env) {}~> ([XmlItem], Maybe (a)))) -> State (Gen,([XmlItem], (Env) {}~> ([XmlItem], Maybe (c)))),
                       "_fun__g37", `Local )),
                    ([],
                      [(912,
                         (([XmlItem], (Env) {}~> ([XmlItem], Maybe (a))), "",
                           `Local ))],
                      ([`Let ((896,
                                ((Env) {}~> ([XmlItem], Maybe (a)), "c",
                                  `Local )),
                               ([], `Return `Project ("2", `Variable 912)));
                        `Let ((897, ([XmlItem], "x", `Local )),
                               ([], `Return `Project ("1", `Variable 912)));
                        `Fun ((911,
                                ((([XmlItem], (Env) {}~> ([XmlItem], Maybe ((a) {}~> b)))) -> State (d,([XmlItem], (Env) {}~> ([XmlItem], Maybe (b)))),
                                  "_fun__g36", `Local )),
                               ([],
                                 [(910,
                                    (([XmlItem], (Env) {}~> ([XmlItem], Maybe ((a) {}~> b))),
                                      "", `Local ))],
                                 ([`Let ((898,
                                           ((Env) {}~> ([XmlItem], Maybe ((a) {}~> b)),
                                             "f", `Local )),
                                          ([],
                                            `Return `Project ("2",
                                                               `Variable 910)));
                                   `Let ((899, ([XmlItem], "y", `Local )),
                                          ([],
                                            `Return `Project ("1",
                                                               `Variable 910)));
                                   `Fun ((909,
                                           ((Env) {}~> ([XmlItem], Maybe (a)),
                                             "_fun__g35", `Local )),
                                          ([], [(908, (Env, "", `Local ))],
                                            ([`Let ((900, (Env, "e", `Local )),
                                                     ([],
                                                       `Return `Variable 908));
                                              `Let ((903,
                                                      (([XmlItem], Maybe ((a) {}~> b)),
                                                        "", `Local )),
                                                     ([],
                                                       `Apply (`Variable 898,
                                                                [`Variable 900])));
                                              `Let ((901,
                                                      (Maybe ((a) {}~> b),
                                                        "f", `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "2",
                                                                `Variable 903)));
                                              `Let ((902,
                                                      ([XmlItem], "fx",
                                                        `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "1",
                                                                `Variable 903)));
                                              `Let ((906,
                                                      (([XmlItem], Maybe (a)),
                                                        "", `Local )),
                                                     ([],
                                                       `Apply (`Variable 896,
                                                                [`Variable 900])));
                                              `Let ((904,
                                                      (Maybe (a), "c",
                                                        `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "2",
                                                                `Variable 906)));
                                              `Let ((905,
                                                      ([XmlItem], "cx",
                                                        `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "1",
                                                                `Variable 906)));
                                              `Let ((907,
                                                      (Maybe (a), "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `Variable 887,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...]),
                                                                [`Variable 901;
                                                                 `Variable 904])))],
                                              `Return `Extend ({"1" => 
                                                                `ApplyPure (
                                                                `TApp (
                                                                `Variable 56,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 905;
                                                                  `Variable 902]);
                                                                "2" => 
                                                                `Variable 907;
                                                                }, None))),
                                          None, `Unknown )],
                                   `Apply (`TApp (`TAbs ([(2230,
                                                            (`Unl , `Any ),
                                                            `Type ...);
                                                          (2231,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (2232,
                                                            (`Unl , `Any ),
                                                            `Type ...)],
                                                          `TApp (`Variable 844,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false);
                                                                   `Type 
                                                                   `MetaTypeVar ...])),
                                                   [`Type `MetaTypeVar ...;
                                                    `Row ({}, ..., false);
                                                    `Type `MetaTypeVar ...]),
                                            [`Extend ({"1" => `ApplyPure (
                                                              `TApp (
                                                              `Variable 56,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Variable 897;
                                                                `Variable 899]);
                                                       "2" => `Variable 909; },
                                                       None)]))), None,
                               `Unknown )],
                        `Apply (`TApp (`Variable 835,
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Row ({}, ..., false)]),
                                 [`Variable 894;
                                  `TAbs ([(2251, (`Unl , `Any ), `Type ...);
                                          (2257, (`Unl , `Any ), `Row ...);
                                          (2256, (`Unl , `Any ), `Type ...)],
                                          `Variable 911)]))), None, `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 895;
                       `TAbs ([(2262, (`Unl , `Any ), `Row ...)],
                               `Variable 913)]))), None, `Unknown );
  `Fun ((921, ((a) -> Formlet (a), "pure", `Global )),
         ([(465, (`Unl , `Any ), `Type ...); (466, (`Unl , `Any ), `Row ...)],
           [(920, (_, "", `Local ))],
           ([`Let ((917, (_, "v", `Local )), ([], `Return `Variable 920));
             `Fun ((919,
                     ((_) -> ([_::Any], [|Just:_|_::Any|]), "_fun__g38",
                       `Local )),
                    ([], [(918, (_, "", `Local ))],
                      ([],
                        `Return `Extend ({"1" => `TApp (`Variable 54,
                                                         [`Type `MetaTypeVar ...]);
                                          "2" => `Inject ("Just",
                                                           `Variable 917,
                                                           [|Just:_|_::Any|]);
                                          }, None))), None, `Unknown )],
             `Apply (`TApp (`TAbs ([(2272, (`Unl , `Any ), `Type ...);
                                    (2273, (`Unl , `Any ), `Row ...);
                                    (2274, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 844,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Extend ({"1" => `TApp (`Variable 54,
                                                [`Type `Primitive `XmlItem ]);
                                 "2" => `TAbs ([(2276, (`Unl , `Any ),
                                                  `Type ...);
                                                (2277, (`Any , `Any ),
                                                  `Row ...);
                                                (2278, (`Any , `Any ),
                                                  `Type ...);
                                                (2279, (`Any , `Any ),
                                                  `Row ...)], `Variable 919);
                                 }, None)]))), None, `Unknown );
  `Fun ((927, ((Formlet (a), (a) {}~> b) -> Formlet (b), "@@=>", `Global )),
         ([(467, (`Unl , `Any ), `Type ...);
           (469, (`Unl , `Any ), `Type ...);
           (2303, (`Unl , `Any ), `Row ...)],
           [(925, (Formlet (a), "", `Local ));
            (926, ((_) {}~> _, "", `Local ))],
           ([`Let ((922, ((_) {}~> _, "f", `Local )),
                    ([], `Return `Variable 926));
             `Let ((923, (Formlet (a), "m", `Local )),
                    ([], `Return `Variable 925));
             `Let ((924, (Formlet ((a) {}~> b), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2297, (`Unl , `Any ), `Type ...);
                                             (2298, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 921,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 922])))],
             `Apply (`TApp (`Variable 916,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Variable 923; `Variable 924]))), None, `Unknown );
  `Fun ((932, (((a) -b-> c, a) -b-> c, "$", `Global )),
         ([(471, (`Unl , `Any ), `Type ...); (472, (`Unl , `Any ), `Row ...);
           (473, (`Unl , `Any ), `Type ...)],
           [(930, ((_) -> _, "", `Local )); (931, (_, "", `Local ))],
           ([`Let ((928, (_, "x", `Local )), ([], `Return `Variable 931));
             `Let ((929, ((_) -> _, "f", `Local )),
                    ([], `Return `Variable 930))],
             `Apply (`Variable 929, [`Variable 928]))), None, `Unknown );
  `Fun ((935, ((Int) -> String, "makeName", `Global )),
         ([(474, (`Unl , `Any ), `Row ...)], [(934, (Int, "", `Local ))],
           ([`Let ((933, (Int, "i", `Local )), ([], `Return `Variable 934))],
             `Return `ApplyPure (`TApp (`Variable 12, [`Row ({}, ..., false)]),
                                  [`Constant `String "input_";
                                   `ApplyPure (`TApp (`TAbs ([(2319,
                                                                (`Any , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 19,
                                                               [`Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Row ({}, ..., false)]),
                                                [`Variable 933])]))), 
         None, `Unknown );
  `Fun ((939, ((Int) -> (String, Int), "_fun__g39", `Local )),
         ([], [(938, (Int, "", `Local ))],
           ([`Let ((936, (Int, "i", `Local )), ([], `Return `Variable 938));
             `Let ((937, (String, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2325, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 935,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Variable 936])))],
             `Return `Extend ({"1" => `Variable 937; "2" => `ApplyPure (
                                                            `TApp (`Variable 1,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 936;
                                                              `Constant 
                                                              `Int 1]);
                                                     }, None))), None,
         `Unknown );
  `Let ((940, (State (Int,String), "nextName", `Global )),
         ([],
           `Return `TAbs ([(2330, (`Unl , `Any ), `Row ...)], `Variable 939)));
  `Rec [((943, (([State (a,b)]) ~> State (a,[b]), "sequence", `Global )),
          ([(475, (`Unl , `Any ), `Type ...);
            (476, (`Unl , `Any ), `Type ...);
            (477, (`Unl , `Any ), `Row ...)],
            [(942, ([State (a,b)], "", `Local ))],
            ([`Let ((941, ([State (a,b)], "xs", `Local )),
                     ([], `Return `Variable 942));
              `Let ((946, ([State (a,b)], "", `Local )),
                     ([], `Return `Variable 941))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 946;
                                 `TApp (`Variable 54,
                                         [`Type `Alias (("State",
                                                          [`Type `MetaTypeVar ...;
                                                           `Type `MetaTypeVar ...]),
                                                         `Function (`Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false)))])]),
                    ([`Let ((956, (State (a,[b]), "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(2383, (`Unl , `Any ),
                                                        `Type ...);
                                                      (2384, (`Unl , `Any ),
                                                        `Row ...);
                                                      (2385, (`Unl , `Any ),
                                                        `Type ...)],
                                                      `TApp (`Variable 844,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `MetaTypeVar ...])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Type `MetaTypeVar ...]),
                                        [`TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...])])))],
                      `Return `TAbs ([(2391, (`Unl , `Any ), `Type ...)],
                                      `Variable 956)),
                    ([`Let ((947, (State (a,b), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Alias (("State",
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...]),
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 }, ...,
                                                                 false)));
                                                `Row ({}, ..., false)]),
                                        [`Variable 946])));
                      `Let ((948, ([State (a,b)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Alias (("State",
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...]),
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 }, ...,
                                                                 false)));
                                                `Row ({}, ..., false)]),
                                        [`Variable 946])));
                      `Let ((945, ([State (a,b)], "xs", `Local )),
                             ([], `Return `Variable 948));
                      `Let ((944, (State (a,b), "x", `Local )),
                             ([], `Return `Variable 947));
                      `Fun ((955,
                              ((a) ~> State (c,[a]), "_fun__g41", `Local )),
                             ([], [(954, (_, "", `Local ))],
                               ([`Let ((949, (_, "x", `Local )),
                                        ([], `Return `Variable 954));
                                 `Let ((953, (State (a,[b]), "", `Local )),
                                        ([],
                                          `Apply (`TApp (`TAbs ([(2356,
                                                                   (`Unl ,
                                                                    `Any ),
                                                                   `Type ...);
                                                                 (2357,
                                                                   (`Unl ,
                                                                    `Any ),
                                                                   `Type ...);
                                                                 (2358,
                                                                   (`Unl ,
                                                                    `Any ),
                                                                   `Row ...)],
                                                                 `TApp (
                                                                 `Variable 943,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)])),
                                                          [`Type `MetaTypeVar ...;
                                                           `Type `MetaTypeVar ...;
                                                           `Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 945])));
                                 `Fun ((952,
                                         (([a]) -> State (c,[a]),
                                           "_fun__g40", `Local )),
                                        ([], [(951, ([_], "", `Local ))],
                                          ([`Let ((950, ([_], "xs", `Local )),
                                                   ([], `Return `Variable 951))],
                                            `Apply (`TApp (`TAbs ([(2365,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (2366,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                   (2367,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...)],
                                                                   `TApp (
                                                                   `Variable 844,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false);
                                                                    `Type 
                                                                    `MetaTypeVar ...])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false);
                                                             `Type `MetaTypeVar ...]),
                                                     [`ApplyPure (`TApp (
                                                                  `Variable 55,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Variable 949;
                                                                    `Variable 950])]))),
                                        None, `Unknown )],
                                 `Apply (`TApp (`Variable 835,
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 953;
                                           `TAbs ([(2375, (`Unl , `Any ),
                                                     `Row ...);
                                                   (2374, (`Unl , `Any ),
                                                     `Type ...)],
                                                   `Variable 952)]))), 
                             None, `Unknown )],
                      `Apply (`TApp (`Variable 835,
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 944;
                                `TAbs ([(2379, (`Unl , `Any ), `Row ...)],
                                        `Variable 955)]))))), None, `Unknown )];
  `Rec [((959, (([Formlet (a)]) ~> Formlet ([a]), "formlets", `Global )),
          ([(478, (`Unl , `Any ), `Type ...);
            (479, (`Unl , `Any ), `Row ...)],
            [(958, ([Formlet (a)], "", `Local ))],
            ([`Let ((957, ([Formlet (a)], "fs", `Local )),
                     ([], `Return `Variable 958));
              `Let ((963, ([Formlet (a)], "", `Local )),
                     ([], `Return `Variable 957))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 963;
                                 `TApp (`Variable 54,
                                         [`Type `Alias (("Formlet",
                                                          [`Type `MetaTypeVar ...]),
                                                         `Alias (("State",
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("Gen",
                                                                    []),
                                                                    `Primitive `Int );
                                                                    `Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                    }, ...,
                                                                    false)]),
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Gen", []),
                                                                    `Primitive `Int );
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                    }, ...,
                                                                    false); 
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Gen", []),
                                                                    `Primitive `Int );
                                                                   }, ...,
                                                                    false))))])]),
                    ([`Let ((996, (Formlet (()), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 851,
                                               [`Row ({"wild" => `Present 
                                                                 `Record (
                                                                 {}, ...,
                                                                  false);
                                                       }, ..., false)]),
                                        [`TApp (`Variable 54,
                                                 [`Type `Primitive `XmlItem ])])));
                      `Fun ((998, (((1)) {}-> [_], "_fun__g42", `Local )),
                             ([], [(997, ((1), "", `Local ))],
                               ([],
                                 `Return `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...]))),
                             None, `Unknown );
                      `Let ((999, (Formlet (((1)) {}-> [a]), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 921,
                                               [`Type `Function (`Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                  ({}, ...,
                                                                    false),
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `MetaTypeVar ...]));
                                                `Row ({"wild" => `Present 
                                                                 `Record (
                                                                 {}, ...,
                                                                  false);
                                                       }, ..., false)]),
                                        [`Variable 998])))],
                      `Apply (`TApp (`Variable 916,
                                      [`Type `Record ({"1" => `Present 
                                                              `Record (
                                                              {}, ..., false);
                                                       }, ..., false);
                                       `Type `Application ({id = "List"; name = "List"; arity = 
                                                           [(`Type ,
                                                              (`Unl , `Any ))]},
                                                            [`Type `MetaTypeVar ...]);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 996; `Variable 999])),
                    ([`Let ((964, (Formlet (a), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Alias (("Formlet",
                                                                [`Type 
                                                                 `MetaTypeVar ...]),
                                                               `Alias (
                                                               ("State",
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("Gen", []),
                                                                   `Primitive `Int );
                                                                  `Type 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Xml", []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                   }, ...,
                                                                   false)]),
                                                                `Function (
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `Alias (
                                                                 ("Gen", []),
                                                                  `Primitive `Int );
                                                                 }, ...,
                                                                 false),
                                                                 ({"wild" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false),
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Xml", []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                   }, ...,
                                                                   false);
                                                                  "2" => 
                                                                  `Present 
                                                                  `Alias (
                                                                  ("Gen", []),
                                                                   `Primitive `Int );
                                                                  }, ...,
                                                                  false))));
                                                `Row ({}, ..., false)]),
                                        [`Variable 963])));
                      `Let ((965, ([Formlet (a)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Alias (("Formlet",
                                                                [`Type 
                                                                 `MetaTypeVar ...]),
                                                               `Alias (
                                                               ("State",
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("Gen", []),
                                                                   `Primitive `Int );
                                                                  `Type 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Xml", []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                   }, ...,
                                                                   false)]),
                                                                `Function (
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `Alias (
                                                                 ("Gen", []),
                                                                  `Primitive `Int );
                                                                 }, ...,
                                                                 false),
                                                                 ({"wild" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false),
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Xml", []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                   }, ...,
                                                                   false);
                                                                  "2" => 
                                                                  `Present 
                                                                  `Alias (
                                                                  ("Gen", []),
                                                                   `Primitive `Int );
                                                                  }, ...,
                                                                  false))));
                                                `Row ({}, ..., false)]),
                                        [`Variable 963])))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 965;
                                         `TApp (`Variable 54,
                                                 [`Type `Alias (("Formlet",
                                                                  [`Type 
                                                                   `MetaTypeVar ...]),
                                                                 `Alias (
                                                                 ("State",
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("Gen",
                                                                    []),
                                                                    `Primitive `Int );
                                                                    `Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                    }, ...,
                                                                    false)]),
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Gen", []),
                                                                    `Primitive `Int );
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("CheckedCollector",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Alias (
                                                                    ("Collector",
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false)]),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Env",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]));
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Maybe",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "Just" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "Nothing" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)); },
                                                                    ...,
                                                                    false))));
                                                                    }, ...,
                                                                    false); 
                                                                   "2" => 
                                                                   `Present 
                                                                   `Alias (
                                                                   ("Gen", []),
                                                                    `Primitive `Int );
                                                                   }, ...,
                                                                    false))))])]),
                            ([`Let ((960, (Formlet (a), "x", `Local )),
                                     ([], `Return `Variable 964));
                              `Fun ((988, ((a) {}-> a, "_fun__g43", `Local )),
                                     ([], [(987, (_, "", `Local ))],
                                       ([`Let ((985,
                                                 (_, "_formlet__g11", `Local )),
                                                ([], `Return `Variable 987));
                                         `Let ((986, (_, "f", `Local )),
                                                ([], `Return `Variable 987))],
                                         `Return `Variable 985)), None,
                                     `Unknown );
                              `Let ((989, (Formlet ((a) {}-> a), "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 921,
                                                       [`Type `Function (
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false),
                                                               ({}, ...,
                                                                 false),
                                                               `MetaTypeVar ...);
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 988])));
                              `Let ((990, (Formlet (a), "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 916,
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `MetaTypeVar ...;
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 960;
                                                 `Variable 989])));
                              `Fun ((994,
                                      (((1:a)) {}-> [a], "_fun__g44", `Local )),
                                     ([], [(993, ((1:_), "", `Local ))],
                                       ([`Let ((991,
                                                 (_, "_formlet__g10", `Local )),
                                                ([], `Return `Variable 993));
                                         `Let ((992, (_, "f", `Local )),
                                                ([], `Return `Variable 993))],
                                         `Return `ApplyPure (`TApp (`Variable 55,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Variable 992;
                                                               `TApp (
                                                               `Variable 54,
                                                                [`Type 
                                                                 `MetaTypeVar ...])]))),
                                     None, `Unknown );
                              `Let ((995,
                                      (Formlet (((1:a)) {}-> [a]), "",
                                        `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 921,
                                                       [`Type `Function (
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                               }, ..., false),
                                                               ({}, ...,
                                                                 false),
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]));
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 994])))],
                              `Apply (`TApp (`Variable 916,
                                              [`Type `Record ({"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false);
                                               `Type `Application ({id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                               `Row ({"wild" => `Present 
                                                                `Record (
                                                                {}, ...,
                                                                 false);
                                                      }, ..., false)]),
                                       [`Variable 990; `Variable 995])),
                            ([`Let ((962, ([Formlet (a)], "xs", `Local )),
                                     ([], `Return `Variable 965));
                              `Let ((961, (Formlet (a), "x", `Local )),
                                     ([], `Return `Variable 964));
                              `Let ((966, (Formlet ([a]), "", `Local )),
                                     ([],
                                       `Apply (`TApp (`TAbs ([(2415,
                                                                (`Unl , `Any ),
                                                                `Type ...);
                                                              (2416,
                                                                (`Unl , `Any ),
                                                                `Row ...)],
                                                              `TApp (
                                                              `Variable 959,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)])),
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)]),
                                                [`Variable 962])));
                              `Fun ((974,
                                      (([a]) {}-> (a) {}-> (a, [a]),
                                        "_fun__g45", `Local )),
                                     ([], [(973, ([_], "", `Local ))],
                                       ([`Let ((967,
                                                 ([_], "_formlet__g15",
                                                   `Local )),
                                                ([], `Return `Variable 973));
                                         `Let ((968, ([_], "fs", `Local )),
                                                ([], `Return `Variable 973));
                                         `Fun ((972,
                                                 ((a) {}-> (a, [a]),
                                                   "_fun__g46", `Local )),
                                                ([],
                                                  [(971, (_, "", `Local ))],
                                                  ([`Let ((969,
                                                            (_,
                                                              "_formlet__g14",
                                                              `Local )),
                                                           ([],
                                                             `Return 
                                                             `Variable 971));
                                                    `Let ((970,
                                                            (_, "f", `Local )),
                                                           ([],
                                                             `Return 
                                                             `Variable 971))],
                                                    `Return `Extend (
                                                            {"1" => `Variable 969;
                                                             "2" => `Variable 967;
                                                             }, None))),
                                                None, `Unknown )],
                                         `Return `Variable 972)), None,
                                     `Unknown );
                              `Let ((975,
                                      (Formlet ((a) {}-> ([a]) {}-> (a, [a])),
                                        "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 921,
                                                       [`Type `Function (
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false),
                                                               ({}, ...,
                                                                 false),
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false),
                                                                ({}, ...,
                                                                  false),
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 }, ...,
                                                                 false)));
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 974])));
                              `Let ((976,
                                      (Formlet (([a]) {}-> (a, [a])), "",
                                        `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 916,
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `Function (
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false),
                                                               ({}, ...,
                                                                 false),
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false));
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 966;
                                                 `Variable 975])));
                              `Let ((977, (Formlet ((a, [a])), "", `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 916,
                                                       [`Type `MetaTypeVar ...;
                                                        `Type `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               "2" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false);
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 961;
                                                 `Variable 976])));
                              `Fun ((983,
                                      (((a, [a])) {}-> [a], "_fun__g47",
                                        `Local )),
                                     ([], [(982, ((a, [a]), "", `Local ))],
                                       ([`Let ((978,
                                                 ([_], "_formlet__g13",
                                                   `Local )),
                                                ([],
                                                  `Return `Project ("2",
                                                                    `Variable 982)));
                                         `Let ((979, ([_], "fs", `Local )),
                                                ([],
                                                  `Return `Project ("2",
                                                                    `Variable 982)));
                                         `Let ((980,
                                                 (_, "_formlet__g12", `Local )),
                                                ([],
                                                  `Return `Project ("1",
                                                                    `Variable 982)));
                                         `Let ((981, (_, "f", `Local )),
                                                ([],
                                                  `Return `Project ("1",
                                                                    `Variable 982)))],
                                         `Return `ApplyPure (`TApp (`Variable 55,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Variable 981;
                                                               `Variable 979]))),
                                     None, `Unknown );
                              `Let ((984,
                                      (Formlet (((a, [a])) {}-> [a]), "",
                                        `Local )),
                                     ([],
                                       `Apply (`TApp (`Variable 921,
                                                       [`Type `Function (
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                               }, ..., false),
                                                               ({}, ...,
                                                                 false),
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]));
                                                        `Row ({"wild" => 
                                                               `Present 
                                                               `Record (
                                                               {}, ..., false);
                                                               }, ..., false)]),
                                                [`Variable 983])))],
                              `Apply (`TApp (`Variable 916,
                                              [`Type `Record ({"1" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               "2" => 
                                                               `Present 
                                                               `MetaTypeVar ...;
                                                               }, ..., false);
                                               `Type `Application ({id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                               `Row ({"wild" => `Present 
                                                                `Record (
                                                                {}, ...,
                                                                 false);
                                                      }, ..., false)]),
                                       [`Variable 977; `Variable 984]))))))),
          None, `Unknown )];
  `Fun ((1004, (([_::Any]) -> Xml, "_fun__g48", `Local )),
         ([], [(1003, ([_::Any], "", `Local ))],
           ([],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `Application ({id = "List"; name = "List"; arity = 
                                                           [(`Type ,
                                                              (`Unl , `Any ))]},
                                                            [`Type `MetaTypeVar ...]);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1003;
                                `TApp (`Variable 54, [`Type `MetaTypeVar ...])]),
                   ([],
                     `Return `TApp (`Variable 54,
                                     [`Type `Primitive `XmlItem ])),
                   ([], `Special `Wrong [XmlItem])))), None, `Unknown );
  `Fun ((1002, ((a::Any) -> ([_::Any], a::Any), "_fun__g49", `Local )),
         ([], [(1001, (_::Any, "", `Local ))],
           ([`Let ((1000, (_::Any, "gen", `Local )),
                    ([], `Return `Variable 1001))],
             `Return `Extend ({"1" => `TApp (`Variable 54,
                                              [`Type `MetaTypeVar ...]);
                               "2" => `Variable 1000; }, None))), None,
         `Unknown );
  `Let ((1005, (Page, "unitP", `Global )),
         ([],
           `Return `Extend ({"1" => `Constant `Int 0; "2" => `TAbs ([(
                                                                    2435,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (2436,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `Variable 1004);
                                                      "3" => `TAbs ([(
                                                                    2439,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (2440,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                    (2441,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...)],
                                                                    `Variable 1002);
                                                      }, None)));
  `Fun ((1013, ((Xml) -> Page, "bodyP", `Global )),
         ([(486, (`Unl , `Any ), `Row ...)], [(1012, (Xml, "", `Local ))],
           ([`Let ((1006, (Xml, "xml", `Local )),
                    ([], `Return `Variable 1012));
             `Fun ((1011, (([_::Any]) -> Xml, "_fun__g50", `Local )),
                    ([], [(1010, ([_::Any], "", `Local ))],
                      ([],
                        `If (`ApplyPure (`TApp (`Variable 13,
                                                 [`Type `Application (
                                                        {id = "List"; name = "List"; arity = 
                                                        [(`Type ,
                                                           (`Unl , `Any ))]},
                                                         [`Type `MetaTypeVar ...]);
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1010;
                                           `TApp (`Variable 54,
                                                   [`Type `MetaTypeVar ...])]),
                              ([], `Return `Variable 1006),
                              ([], `Special `Wrong Xml)))), None, `Unknown );
             `Fun ((1009,
                     ((a::Any) -> ([_::Any], a::Any), "_fun__g51", `Local )),
                    ([], [(1008, (_::Any, "", `Local ))],
                      ([`Let ((1007, (_::Any, "gen", `Local )),
                               ([], `Return `Variable 1008))],
                        `Return `Extend ({"1" => `TApp (`Variable 54,
                                                         [`Type `MetaTypeVar ...]);
                                          "2" => `Variable 1007; }, None))),
                    None, `Unknown )],
             `Return `Extend ({"1" => `Constant `Int 0; "2" => `TAbs (
                                                               [(2449,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2450,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1011);
                                                        "3" => `TAbs (
                                                               [(2453,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2454,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Row ...);
                                                                (2455,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Type ...)],
                                                                `Variable 1009);
                                                        }, None))), None,
         `Unknown );
  `Fun ((1017, ((() -> Page) ~> String, "pickleCont", `Global )),
         ([(488, (`Unl , `Any ), `Row ...); (489, (`Unl , `Any ), `Row ...)],
           [(1016, (() -> Page, "", `Local ))],
           ([`Let ((1014, (() -> Page, "cont", `Local )),
                    ([], `Return `Variable 1016));
             `Fun ((1015, (() -> Page, "_fun__g52", `Local )),
                    ([], [], ([], `Apply (`Variable 1014, []))), None,
                    `Unknown )],
             `Apply (`TApp (`TAbs ([(2464, (`Unl , `Any ), `Row ...);
                                    (2465, (`Unl , `Any ), `Type ...);
                                    (2466, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 167,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]), [`Variable 1015]))),
         None, `Unknown );
  `Fun ((1027, (((Env) ~> Page, Xml, Attributes) ~> Xml, "mkForm", `Global )),
         ([(491, (`Unl , `Any ), `Row ...); (492, (`Unl , `Any ), `Row ...)],
           [(1024, ((Env) ~> Page, "", `Local )); (1025, (Xml, "", `Local ));
            (1026, (Attributes, "", `Local ))],
           ([`Let ((1018, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1026));
             `Let ((1019, (Xml, "contents", `Local )),
                    ([], `Return `Variable 1025));
             `Let ((1020, ((Env) ~> Page, "cont", `Local )),
                    ([], `Return `Variable 1024));
             `Fun ((1022, (() ~> Page, "_fun__g53", `Local )),
                    ([], [],
                      ([`Let ((1021, ([(String, String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2484,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 158,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Row ({}, ..., false)]), 
                                          [])))],
                        `Apply (`Variable 1020, [`Variable 1021]))), 
                    None, `Unknown );
             `Let ((1023, (String, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2480, (`Unl , `Any ), `Row ...);
                                             (2481, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1017,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 1022])))],
             `Return `ApplyPure (`TApp (`Variable 31, [`Row ({}, ..., false)]),
                                  [`XmlNode ("form",
                                              {"action" => `Constant 
                                                           `String "#";
                                               "enctype" => `Constant 
                                                            `String "application/x-www-form-urlencoded";
                                               "method" => `Constant 
                                                           `String "POST";
                                               },
                                              [`ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n    "]);
                                               `XmlNode ("input",
                                                          {"name" => 
                                                           `Constant 
                                                           `String "_k"; 
                                                          "type" => `Constant 
                                                                    `String "hidden";
                                                          "value" => 
                                                          `Variable 1023; },
                                                          []);
                                               `ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n    "]);
                                               `Variable 1019;
                                               `ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n  "])]);
                                   `Variable 1018]))), None, `Unknown );
  `Rec [((1040,
           ((CheckedCollector (a), Handler (a), MultiXmlContext, RecForms, Int, Attributes) -> (Env) {}~> Page,
             "validate", `Global )),
          ([(494, (`Unl , `Any ), `Type ...);
            (495, (`Unl , `Any ), `Row ...)],
            [(1034, (CheckedCollector (a), "", `Local ));
             (1035, (Handler (a), "", `Local ));
             (1036, (MultiXmlContext, "", `Local ));
             (1037, (RecForms, "", `Local )); (1038, (Int, "", `Local ));
             (1039, (Attributes, "", `Local ))],
            ([`Let ((1028, (Attributes, "attributes", `Local )),
                     ([], `Return `Variable 1039));
              `Let ((1029, (Int, "i", `Local )), ([], `Return `Variable 1038));
              `Let ((1030, (RecForms, "zs", `Local )),
                     ([], `Return `Variable 1037));
              `Let ((1031, (MultiXmlContext, "k", `Local )),
                     ([], `Return `Variable 1036));
              `Let ((1032, (Handler (a), "h", `Local )),
                     ([], `Return `Variable 1035));
              `Let ((1033, (CheckedCollector (a), "c", `Local )),
                     ([], `Return `Variable 1034));
              `Fun ((1060, ((Env) {}~> Page, "_fun__g55", `Local )),
                     ([], [(1059, (Env, "", `Local ))],
                       ([`Let ((1041, (Env, "env", `Local )),
                                ([], `Return `Variable 1059));
                         `Let ((1044, ((Xml, Maybe (a)), "", `Local )),
                                ([],
                                  `Apply (`Variable 1033, [`Variable 1041])));
                         `Let ((1042, (Maybe (a), "v", `Local )),
                                ([], `Return `Project ("2", `Variable 1044)));
                         `Let ((1043, (Xml, "xml", `Local )),
                                ([], `Return `Project ("1", `Variable 1044)));
                         `Let ((1046, (Maybe (a), "", `Local )),
                                ([], `Return `Variable 1042))],
                         `Case (`Variable 1046,
                                 {"Just" => ((1047, (_, "", `Local )),
                                              ([`Let ((1045,
                                                        (_, "v", `Local )),
                                                       ([],
                                                         `Return `Variable 1047))],
                                                `Apply (`Variable 1032,
                                                         [`Variable 1045])));
                                  "Nothing" => ((1048, ((), "", `Local )),
                                                 ([`Fun ((1052,
                                                           ((RecForms) ~> Xml,
                                                             "z", `Local )),
                                                          ([(2542,
                                                              (`Unl , `Any ),
                                                              `Row ...)],
                                                            [(1051,
                                                               (RecForms, "",
                                                                 `Local ))],
                                                            ([`Let ((1049,
                                                                    (RecForms,
                                                                    "zs",
                                                                    `Local )),
                                                                    ([],
                                                                    `Return 
                                                                    `Variable 1051));
                                                              `Let ((1050,
                                                                    ((Env) {}~> Page,
                                                                    "",
                                                                    `Local )),
                                                                    ([],
                                                                    `Apply (
                                                                    `TApp (
                                                                    `TAbs (
                                                                    [(
                                                                    2528,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (2529,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `TApp (
                                                                    `Variable 1040,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Variable 1033;
                                                                    `Variable 1032;
                                                                    `Variable 1031;
                                                                    `Variable 1049;
                                                                    `Variable 1029;
                                                                    `Variable 1028])))],
                                                              `Apply (
                                                              `TApp (
                                                              `TAbs (
                                                              [(2525,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...);
                                                               (2526,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `TApp (
                                                               `Variable 1027,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                               [`Row (
                                                                {}, ...,
                                                                 false);
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Variable 1050;
                                                                `Variable 1043;
                                                                `Variable 1028]))),
                                                          None, `Unknown );
                                                   `Let ((1053,
                                                           ([mu a . ([a]) {}~> Xml],
                                                             "zs", `Local )),
                                                          ([],
                                                            `Apply (`TApp (
                                                                    `TAbs (
                                                                    [(
                                                                    2545,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (2546,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `TApp (
                                                                    `Variable 449,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Variable 1030;
                                                                    `Variable 1029;
                                                                    `TApp (
                                                                    `Variable 1052,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])])));
                                                   `Fun ((1056,
                                                           ((([mu a . ([a]) {}~> Xml]) -b-> c::Any) -b-> c::Any,
                                                             "_fun__g54",
                                                             `Local )),
                                                          ([],
                                                            [(1055,
                                                               (([mu a . ([a]) {}~> Xml]) -> _::Any,
                                                                 "", `Local ))],
                                                            ([`Let ((1054,
                                                                    (([mu a . ([a]) {}~> Xml]) -> _::Any,
                                                                    "z",
                                                                    `Local )),
                                                                    ([],
                                                                    `Return 
                                                                    `Variable 1055))],
                                                              `Apply (
                                                              `Variable 1054,
                                                               [`Variable 1053]))),
                                                          None, `Unknown );
                                                   `Let ((1057,
                                                           ([Xml], "",
                                                             `Local )),
                                                          ([],
                                                            `Apply (`TApp (
                                                                    `TAbs (
                                                                    [(
                                                                    2554,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (2555,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                    (2556,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...)],
                                                                    `TApp (
                                                                    `Variable 307,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false);
                                                                    `Type 
                                                                    `MetaTypeVar ...])),
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false);
                                                                    `Type 
                                                                    `MetaTypeVar ...]),
                                                                    [`TAbs (
                                                                    [(
                                                                    2558,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                    (2559,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...)],
                                                                    `Variable 1056);
                                                                    `Variable 1053])));
                                                   `Let ((1058,
                                                           (Xml, "", `Local )),
                                                          ([],
                                                            `Apply (`Variable 1031,
                                                                    [`Variable 1057])))],
                                                   `Apply (`TApp (`TAbs (
                                                                  [(2552,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 1013,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 1058])));
                                  }, None))), None, `Unknown )],
              `Return `Variable 1060)), None, `Unknown )];
  `Fun ((1083, ((Page, Page) -> Page, "joinP", `Global )),
         ([(499, (`Unl , `Any ), `Row ...)],
           [(1081, (Page, "", `Local )); (1082, (Page, "", `Local ))],
           ([`Let ((1061,
                     ((Gen) {}~> ([CheckedFormBuilder], Gen), "fs2", `Local )),
                    ([], `Return `Project ("3", `Variable 1082)));
             `Let ((1062, (MultiXmlContext, "k2", `Local )),
                    ([], `Return `Project ("2", `Variable 1082)));
             `Let ((1063, (Int, "i2", `Local )),
                    ([], `Return `Project ("1", `Variable 1082)));
             `Let ((1064,
                     ((Gen) {}~> ([CheckedFormBuilder], Gen), "fs1", `Local )),
                    ([], `Return `Project ("3", `Variable 1081)));
             `Let ((1065, (MultiXmlContext, "k1", `Local )),
                    ([], `Return `Project ("2", `Variable 1081)));
             `Let ((1066, (Int, "i1", `Local )),
                    ([], `Return `Project ("1", `Variable 1081)));
             `Fun ((1080, (([Xml]) {}~> Xml, "_fun__g56", `Local )),
                    ([], [(1079, ([Xml], "", `Local ))],
                      ([`Let ((1076, ([Xml], "xs", `Local )),
                               ([], `Return `Variable 1079));
                        `Let ((1077, (Xml, "", `Local )),
                               ([],
                                 `Apply (`Variable 1065,
                                          [`ApplyPure (`TApp (`TAbs (
                                                              [(2599,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Type ...);
                                                               (2600,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `TApp (
                                                               `Variable 60,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 1066;
                                                         `Variable 1076])])));
                        `Let ((1078, (Xml, "", `Local )),
                               ([],
                                 `Apply (`Variable 1062,
                                          [`ApplyPure (`TApp (`TAbs (
                                                              [(2605,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Type ...);
                                                               (2606,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `TApp (
                                                               `Variable 61,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 1066;
                                                         `Variable 1076])])))],
                        `Return `ApplyPure (`TApp (`Variable 56,
                                                    [`Type `Primitive `XmlItem ;
                                                     `Row ({}, ..., false)]),
                                             [`Variable 1077; `Variable 1078]))),
                    None, `Unknown );
             `Fun ((1075,
                     ((Gen) {}~> ([CheckedFormBuilder], Gen), "_fun__g57",
                       `Local )),
                    ([], [(1074, (Gen, "", `Local ))],
                      ([`Let ((1067, (Gen, "gen", `Local )),
                               ([], `Return `Variable 1074));
                        `Let ((1070,
                                (([CheckedFormBuilder], Gen), "", `Local )),
                               ([], `Apply (`Variable 1064, [`Variable 1067])));
                        `Let ((1068, (Gen, "gen", `Local )),
                               ([], `Return `Project ("2", `Variable 1070)));
                        `Let ((1069, ([CheckedFormBuilder], "ms1", `Local )),
                               ([], `Return `Project ("1", `Variable 1070)));
                        `Let ((1073,
                                (([CheckedFormBuilder], Gen), "", `Local )),
                               ([], `Apply (`Variable 1061, [`Variable 1068])));
                        `Let ((1071, (Gen, "gen", `Local )),
                               ([], `Return `Project ("2", `Variable 1073)));
                        `Let ((1072, ([CheckedFormBuilder], "ms2", `Local )),
                               ([], `Return `Project ("1", `Variable 1073)))],
                        `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 56,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Variable 1069;
                                                               `Variable 1072]);
                                          "2" => `Variable 1071; }, None))),
                    None, `Unknown )],
             `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 1,
                                                          [`Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 1066;
                                                    `Variable 1063]);
                               "2" => `Variable 1080; "3" => `Variable 1075; },
                               None))), None, `Unknown );
  `Fun ((1086, (([Page]) ~> Page, "joinManyP", `Global )),
         ([(503, (`Unl , `Any ), `Row ...)], [(1085, ([Page], "", `Local ))],
           ([`Let ((1084, ([Page], "gs", `Local )),
                    ([], `Return `Variable 1085))],
             `Apply (`TApp (`TAbs ([(2628, (`Any , `Any ), `Type ...);
                                    (2629, (`Any , `Any ), `Type ...);
                                    (2630, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 473,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`TApp (`Variable 1083, [`Row ({}, ..., false)]);
                       `Variable 1005; `Variable 1084]))), None, `Unknown );
  `Fun ((1106, ((Page) {}~> Xml, "renderPagePure", `Global )),
         ([], [(1105, (Page, "", `Local ))],
           ([`Let ((1087,
                     ((Gen) {}~> ([CheckedFormBuilder], Gen), "fs", `Local )),
                    ([], `Return `Project ("3", `Variable 1105)));
             `Let ((1088, (MultiXmlContext, "k", `Local )),
                    ([], `Return `Project ("2", `Variable 1105)));
             `Let ((1089, (Int, "n", `Local )),
                    ([], `Return `Project ("1", `Variable 1105)));
             `Let ((1091, (([CheckedFormBuilder], Gen), "", `Local )),
                    ([], `Apply (`Variable 1087, [`Constant `Int 0])));
             `Let ((1090, ([CheckedFormBuilder], "ms", `Local )),
                    ([], `Return `Project ("1", `Variable 1091)));
             `Fun ((1099,
                     (((MultiXmlContext, a::Any, b::Any) -c-> d::Any, b::Any) -> (a::Any) -c-> d::Any,
                       "_fun__g58", `Local )),
                    ([],
                      [(1097,
                         ((MultiXmlContext, _::Any, _::Any) -> _::Any, "",
                           `Local )); (1098, (_::Any, "", `Local ))],
                      ([`Let ((1092, (_::Any, "i", `Local )),
                               ([], `Return `Variable 1098));
                        `Let ((1093,
                                ((MultiXmlContext, _::Any, _::Any) -> _::Any,
                                  "m", `Local )),
                               ([], `Return `Variable 1097));
                        `Fun ((1096,
                                ((_::Any) -> _::Any, "_fun__g59", `Local )),
                               ([], [(1095, (_::Any, "", `Local ))],
                                 ([`Let ((1094, (_::Any, "zs", `Local )),
                                          ([], `Return `Variable 1095))],
                                   `Apply (`Variable 1093,
                                            [`Variable 1088; `Variable 1094;
                                             `Variable 1092]))), None,
                               `Unknown )], `Return `Variable 1096)), 
                    None, `Unknown );
             `Let ((1100, ([(RecForms) {}~> Xml], "zs", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2650, (`Any , `Any ), `Type ...);
                                             (2651, (`Unl , `Any ), `Row ...);
                                             (2652, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 510,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`TAbs ([(2655, (`Any , `Any ), `Type ...);
                                        (2654, (`Any , `Any ), `Type ...);
                                        (2656, (`Any , `Any ), `Row ...);
                                        (2657, (`Any , `Any ), `Type ...);
                                        (2658, (`Any , `Any ), `Row ...)],
                                        `Variable 1099); `Variable 1090])));
             `Fun ((1103,
                     ((([(RecForms) {}~> Xml]) -b-> c::Any) -b-> c::Any,
                       "_fun__g60", `Local )),
                    ([],
                      [(1102,
                         (([(RecForms) {}~> Xml]) -> _::Any, "", `Local ))],
                      ([`Let ((1101,
                                (([(RecForms) {}~> Xml]) -> _::Any, "z",
                                  `Local )), ([], `Return `Variable 1102))],
                        `Apply (`Variable 1101, [`Variable 1100]))), 
                    None, `Unknown );
             `Let ((1104, ([Xml], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2669, (`Any , `Any ), `Type ...);
                                             (2670, (`Unl , `Any ), `Row ...);
                                             (2671, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 307,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`TAbs ([(2673, (`Any , `Any ), `Row ...);
                                        (2674, (`Any , `Any ), `Type ...)],
                                        `Variable 1103); `Variable 1100])))],
             `Apply (`Variable 1088, [`Variable 1104]))), None, `Unknown );
  `Fun ((1117, ((XmlContext, Page) -> Page, "plugP", `Global )),
         ([(507, (`Unl , `Any ), `Row ...)],
           [(1115, (XmlContext, "", `Local )); (1116, (Page, "", `Local ))],
           ([`Let ((1107,
                     ((Gen) {}~> ([CheckedFormBuilder], Gen), "fs", `Local )),
                    ([], `Return `Project ("3", `Variable 1116)));
             `Let ((1108, (MultiXmlContext, "k", `Local )),
                    ([], `Return `Project ("2", `Variable 1116)));
             `Let ((1109, (Int, "i", `Local )),
                    ([], `Return `Project ("1", `Variable 1116)));
             `Let ((1110, (XmlContext, "context", `Local )),
                    ([], `Return `Variable 1115));
             `Fun ((1114, (([Xml]) {}~> Xml, "_fun__g61", `Local )),
                    ([], [(1113, ([Xml], "", `Local ))],
                      ([`Let ((1111, ([Xml], "xs", `Local )),
                               ([], `Return `Variable 1113));
                        `Let ((1112, (Xml, "", `Local )),
                               ([], `Apply (`Variable 1108, [`Variable 1111])))],
                        `Apply (`Variable 1110, [`Variable 1112]))), 
                    None, `Unknown )],
             `Return `Extend ({"1" => `Variable 1109; "2" => `Variable 1114; 
                              "3" => `Variable 1107; }, None))), None,
         `Unknown );
  `Fun ((1120, ((Page) ~> Xml, "renderPage", `Global )),
         ([(511, (`Unl , `Any ), `Row ...)], [(1119, (Page, "", `Local ))],
           ([`Let ((1118, (Page, "p", `Local )), ([], `Return `Variable 1119))],
             `Apply (`Coerce (`Variable 1106, (Page) ~> Xml),
                      [`Variable 1118]))), None, `Unknown );
  `Fun ((1137,
          ((Xml, CheckedCollector (a), Handler (a), Attributes) -> (MultiXmlContext, RecForms, Int) ~> Xml,
            "mkCheckedFormBuilder", `Global )),
         ([(515, (`Unl , `Any ), `Type ...); (516, (`Unl , `Any ), `Row ...);
           (517, (`Unl , `Any ), `Row ...)],
           [(1133, (Xml, "", `Local ));
            (1134, (CheckedCollector (a), "", `Local ));
            (1135, (Handler (a), "", `Local ));
            (1136, (Attributes, "", `Local ))],
           ([`Let ((1121, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1136));
             `Let ((1122, (Handler (a), "h", `Local )),
                    ([], `Return `Variable 1135));
             `Let ((1123, (CheckedCollector (a), "c", `Local )),
                    ([], `Return `Variable 1134));
             `Let ((1124, (Xml, "x", `Local )), ([], `Return `Variable 1133));
             `Fun ((1132,
                     ((MultiXmlContext, RecForms, Int) ~> Xml, "_fun__g62",
                       `Local )),
                    ([],
                      [(1129, (MultiXmlContext, "", `Local ));
                       (1130, (RecForms, "", `Local ));
                       (1131, (Int, "", `Local ))],
                      ([`Let ((1125, (Int, "i", `Local )),
                               ([], `Return `Variable 1131));
                        `Let ((1126, (RecForms, "zs", `Local )),
                               ([], `Return `Variable 1130));
                        `Let ((1127, (MultiXmlContext, "k", `Local )),
                               ([], `Return `Variable 1129));
                        `Let ((1128, ((Env) {}~> Page, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2715,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2716,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 1040,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1123; `Variable 1122;
                                           `Variable 1127; `Variable 1126;
                                           `Variable 1125; `Variable 1121])))],
                        `Apply (`TApp (`TAbs ([(2712, (`Unl , `Any ),
                                                 `Row ...);
                                               (2713, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 1027,
                                                       [`Row ({}, ..., false);
                                                        `Row ({}, ..., false)])),
                                        [`Row ({}, ..., false);
                                         `Row ({}, ..., false)]),
                                 [`Variable 1128; `Variable 1124;
                                  `Variable 1121]))), None, `Unknown )],
             `Return `Variable 1132)), None, `Unknown );
  `Fun ((1157,
          ((Formlet (a), Handler (a), Attributes) -> Page, "formP", `Global )),
         ([(520, (`Unl , `Any ), `Type ...); (521, (`Unl , `Any ), `Row ...)],
           [(1154, (Formlet (a), "", `Local ));
            (1155, (Handler (a), "", `Local ));
            (1156, (Attributes, "", `Local ))],
           ([`Let ((1138, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1156));
             `Let ((1139, (Handler (a), "h", `Local )),
                    ([], `Return `Variable 1155));
             `Let ((1140, (Formlet (a), "f", `Local )),
                    ([], `Return `Variable 1154));
             `Fun ((1153, (([a::Any]) -> a::Any, "_fun__g63", `Local )),
                    ([], [(1150, ([_::Any], "", `Local ))],
                      ([`Let ((1151, (_::Any, "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 57,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1150])));
                        `Let ((1152, ([_::Any], "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 58,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1150])));
                        `Let ((1149, (_::Any, "x", `Local )),
                               ([], `Return `Variable 1151))],
                        `If (`ApplyPure (`TApp (`Variable 13,
                                                 [`Type `Application (
                                                        {id = "List"; name = "List"; arity = 
                                                        [(`Type ,
                                                           (`Unl , `Any ))]},
                                                         [`Type `MetaTypeVar ...]);
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1152;
                                           `TApp (`Variable 54,
                                                   [`Type `MetaTypeVar ...])]),
                              ([], `Return `Variable 1149),
                              ([], `Special `Wrong _::Any)))), None,
                    `Unknown );
             `Fun ((1148,
                     ((Gen) {}~> ([(MultiXmlContext, RecForms, Int) ~> Xml], Gen),
                       "_fun__g64", `Local )),
                    ([], [(1147, (Gen, "", `Local ))],
                      ([`Let ((1141, (Gen, "gen", `Local )),
                               ([], `Return `Variable 1147));
                        `Let ((1145,
                                (((Xml, CheckedCollector (a)), Gen), "",
                                  `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2744,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2745,
                                                          (`Unl , `Any ),
                                                          `Type ...)],
                                                        `TApp (`Variable 823,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1140; `Variable 1141])));
                        `Let ((1142, (Gen, "gen", `Local )),
                               ([], `Return `Project ("2", `Variable 1145)));
                        `Let ((1143, (CheckedCollector (a), "c", `Local )),
                               ([],
                                 `Return `Project ("2",
                                                    `Project ("1",
                                                               `Variable 1145))));
                        `Let ((1144, (Xml, "x", `Local )),
                               ([],
                                 `Return `Project ("1",
                                                    `Project ("1",
                                                               `Variable 1145))));
                        `Let ((1146,
                                ((MultiXmlContext, RecForms, Int) ~> Xml, "",
                                  `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2751,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2752,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (2753,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 1137,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false);
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1144; `Variable 1143;
                                           `Variable 1139; `Variable 1138])))],
                        `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("MultiXmlContext",
                                                                    []),
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]))]);
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]))));
                                                                    "2" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("RecForms",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]));
                                                                    "3" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ])));
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Variable 1146;
                                                               `TApp (
                                                               `Variable 54,
                                                                [`Type 
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Alias (
                                                                  ("MultiXmlContext",
                                                                    []),
                                                                   `Function (
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]))]);
                                                                    }, ...,
                                                                    false),
                                                                    (
                                                                    {
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]))));
                                                                  "2" => 
                                                                  `Present 
                                                                  `Alias (
                                                                  ("RecForms",
                                                                    []),
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]));
                                                                  "3" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Alias (
                                                                  ("Xml", []),
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ])))])]);
                                          "2" => `Variable 1142; }, None))),
                    None, `Unknown )],
             `Return `Extend ({"1" => `Constant `Int 1; "2" => `TAbs (
                                                               [(2738,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2739,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1153);
                                                        "3" => `TAbs (
                                                               [(2758,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1148);
                                                        }, None))), None,
         `Unknown );
  `Fun ((1172,
          (((String) {}~> a, (String, b) ~c~> d::Any) -> State (Int,(a, ([(String, b)]) ~c~> (d::Any, Maybe (b)))),
            "mkInput", `Global )),
         ([(2780, (`Unl , `Any ), `Type ...);
           (2792, (`Unl , `Any ), `Type ...);
           (2794, (`Unl , `Any ), `Row ...);
           (2789, (`Any , `Any ), `Type ...);
           (2801, (`Unl , `Any ), `Row ...)],
           [(1170, ((String) {}~> _, "", `Local ));
            (1171, ((String, _) ~> _::Any, "", `Local ))],
           ([`Let ((1158, ((String, _) ~> _::Any, "mkFilledXml", `Local )),
                    ([], `Return `Variable 1171));
             `Let ((1159, ((String) {}~> _, "mkXml", `Local )),
                    ([], `Return `Variable 1170));
             `Fun ((1169,
                     ((String) {}~> State (a,(b, ([(String, c)]) ~d~> (e::Any, Maybe (c)))),
                       "_fun__g66", `Local )),
                    ([], [(1168, (String, "", `Local ))],
                      ([`Let ((1160, (String, "name", `Local )),
                               ([], `Return `Variable 1168));
                        `Let ((1167, (_, "", `Local )),
                               ([], `Apply (`Variable 1159, [`Variable 1160])));
                        `Fun ((1166,
                                (([(String, a)]) ~> (_::Any, Maybe (a)),
                                  "_fun__g65", `Local )),
                               ([], [(1165, ([(String, _)], "", `Local ))],
                                 ([`Let ((1161,
                                           ([(String, _)], "env", `Local )),
                                          ([], `Return `Variable 1165));
                                   `Let ((1162, (_, "v", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(2783,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (2784,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 729,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1160;
                                                      `Variable 1161])));
                                   `Let ((1164, (_::Any, "", `Local )),
                                          ([],
                                            `Apply (`Variable 1158,
                                                     [`Variable 1160;
                                                      `Variable 1162])));
                                   `Let ((1163, (Maybe (a), "", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(2790,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (2791,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 838,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1162])))],
                                   `Return `Extend ({"1" => `Variable 1164; 
                                                    "2" => `Variable 1163; },
                                                     None))), None, `Unknown )],
                        `Apply (`TApp (`TAbs ([(2777, (`Unl , `Any ),
                                                 `Type ...);
                                               (2778, (`Unl , `Any ),
                                                 `Row ...);
                                               (2779, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 844,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Extend ({"1" => `Variable 1167; "2" => 
                                                                   `Variable 1166;
                                                                   }, 
                                            None)]))), None, `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 940;
                       `TAbs ([(2797, (`Unl , `Any ), `Type ...)],
                               `Variable 1169)]))), None, `Unknown );
  `Fun ((1184,
          ((Int) {}~> ((Xml, ([(String, String)]) ~> (Xml, Maybe (String))), Int),
            "_fun__g69", `Local )),
         ([], [(1183, (Int, "", `Local ))],
           ([`Let ((1173, (Int, "gen", `Local )),
                    ([], `Return `Variable 1183));
             `Fun ((1176, ((String) -> Xml, "_fun__g67", `Local )),
                    ([], [(1175, (String, "", `Local ))],
                      ([`Let ((1174, (String, "name", `Local )),
                               ([], `Return `Variable 1175))],
                        `Return `XmlNode ("input",
                                           {"name" => `Variable 1174; }, 
                                           []))), None, `Unknown );
             `Fun ((1181, ((String, String) -> Xml, "_fun__g68", `Local )),
                    ([],
                      [(1179, (String, "", `Local ));
                       (1180, (String, "", `Local ))],
                      ([`Let ((1177, (String, "v", `Local )),
                               ([], `Return `Variable 1180));
                        `Let ((1178, (String, "name", `Local )),
                               ([], `Return `Variable 1179))],
                        `Return `XmlNode ("input",
                                           {"name" => `Variable 1178; 
                                           "value" => `Variable 1177; }, 
                                           []))), None, `Unknown );
             `Let ((1182,
                     (State (Int,(Xml, ([(String, String)]) ~a~> (Xml, Maybe (String)))),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2809, (`Unl , `Any ), `Type ...);
                                             (2810, (`Unl , `Any ), `Type ...);
                                             (2811, (`Unl , `Any ), `Row ...);
                                             (2812, (`Any , `Any ), `Type ...);
                                             (2813, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1172,
                                                     [`Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TAbs ([(2815, (`Any , `Any ), `Row ...)],
                                        `Variable 1176);
                                `TAbs ([(2819, (`Any , `Any ), `Row ...)],
                                        `Variable 1181)])))],
             `Apply (`Variable 1182, [`Variable 1173]))), None, `Unknown );
  `Let ((1185, (Formlet (String), "input", `Global )),
         ([],
           `Return `TAbs ([(2826, (`Unl , `Any ), `Row ...)], `Variable 1184)));
  `Fun ((1199, ((Attributes) ~> Formlet (String), "inputA", `Global )),
         ([(524, (`Unl , `Any ), `Row ...)],
           [(1198, (Attributes, "", `Local ))],
           ([`Let ((1186, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1198));
             `Fun ((1190, ((String) ~> Xml, "_fun__g70", `Local )),
                    ([], [(1189, (String, "", `Local ))],
                      ([`Let ((1187, (String, "name", `Local )),
                               ([], `Return `Variable 1189));
                        `Let ((1188, ([(String, String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2841,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2842,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2843,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 668,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Constant `String "name";
                                           `Variable 1186])))],
                        `Return `ApplyPure (`TApp (`Variable 31,
                                                    [`Row ({}, ..., false)]),
                                             [`XmlNode ("input",
                                                         {"name" => `Variable 1187;
                                                          }, []);
                                              `Variable 1188]))), None,
                    `Unknown );
             `Fun ((1197, ((String, String) ~> Xml, "_fun__g71", `Local )),
                    ([],
                      [(1195, (String, "", `Local ));
                       (1196, (String, "", `Local ))],
                      ([`Let ((1191, (String, "v", `Local )),
                               ([], `Return `Variable 1196));
                        `Let ((1192, (String, "name", `Local )),
                               ([], `Return `Variable 1195));
                        `Let ((1193, ([(String, String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2855,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2856,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2857,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 668,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Constant `String "value";
                                           `Variable 1186])));
                        `Let ((1194, ([(String, String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(2852,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2853,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (2854,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 668,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Constant `String "name";
                                           `Variable 1193])))],
                        `Return `ApplyPure (`TApp (`Variable 31,
                                                    [`Row ({}, ..., false)]),
                                             [`XmlNode ("input",
                                                         {"name" => `Variable 1192;
                                                          "value" => 
                                                          `Variable 1191; },
                                                         []); `Variable 1194]))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(2834, (`Unl , `Any ), `Type ...);
                                    (2835, (`Unl , `Any ), `Type ...);
                                    (2836, (`Unl , `Any ), `Row ...);
                                    (2837, (`Any , `Any ), `Type ...);
                                    (2838, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1172,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false); `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`TAbs ([(2847, (`Unl , `Any ), `Row ...)],
                               `Variable 1190);
                       `TAbs ([(2865, (`Unl , `Any ), `Row ...)],
                               `Variable 1197)]))), None, `Unknown );
  `Fun ((1203, ((Attributes) ~> Formlet (String), "inputFileA", `Global )),
         ([(525, (`Unl , `Any ), `Row ...)],
           [(1202, (Attributes, "", `Local ))],
           ([`Let ((1200, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1202));
             `Let ((1201, ([(String, String)], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2880, (`Unl , `Any ), `Type ...);
                                             (2881, (`Unl , `Any ), `Type ...);
                                             (2882, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 668,
                                                     [`Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Constant `String "type"; `Variable 1200])))],
             `Apply (`TApp (`TAbs ([(2877, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1199,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`Variable 55,
                                           [`Type `MetaTypeVar ...;
                                            `Row ({}, ..., false)]),
                                    [`Extend ({"1" => `Constant `String "type";
                                               "2" => `Constant `String "file";
                                               }, None); `Variable 1201])]))),
         None, `Unknown );
  `Fun ((1209,
          ((String, Attributes) ~> Formlet (String), "inputValueA", `Global )),
         ([(526, (`Unl , `Any ), `Row ...)],
           [(1207, (String, "", `Local )); (1208, (Attributes, "", `Local ))],
           ([`Let ((1204, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1208));
             `Let ((1205, (String, "v", `Local )),
                    ([], `Return `Variable 1207));
             `Let ((1206, ([(String, String)], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2896, (`Unl , `Any ), `Type ...);
                                             (2897, (`Unl , `Any ), `Type ...);
                                             (2898, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 668,
                                                     [`Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Constant `String "value"; `Variable 1204])))],
             `Apply (`TApp (`TAbs ([(2893, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1199,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`Variable 55,
                                           [`Type `MetaTypeVar ...;
                                            `Row ({}, ..., false)]),
                                    [`Extend ({"1" => `Constant `String "value";
                                               "2" => `Variable 1205; }, 
                                               None); `Variable 1206])]))),
         None, `Unknown );
  `Fun ((1213, ((Attributes) ~> Formlet (String), "inputPasswordA", `Global )),
         ([(527, (`Unl , `Any ), `Row ...)],
           [(1212, (Attributes, "", `Local ))],
           ([`Let ((1210, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1212));
             `Let ((1211, ([(String, String)], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2911, (`Unl , `Any ), `Type ...);
                                             (2912, (`Unl , `Any ), `Type ...);
                                             (2913, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 668,
                                                     [`Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Constant `String "type"; `Variable 1210])))],
             `Apply (`TApp (`TAbs ([(2908, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1199,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`Variable 55,
                                           [`Type `MetaTypeVar ...;
                                            `Row ({}, ..., false)]),
                                    [`Extend ({"1" => `Constant `String "type";
                                               "2" => `Constant `String "password";
                                               }, None); `Variable 1211])]))),
         None, `Unknown );
  `Fun ((1217,
          ((Gen) {}~> ((Xml, CheckedCollector (String)), Gen), "_fun__g72",
            `Local )),
         ([], [(1216, (Gen, "", `Local ))],
           ([`Let ((1214, (Gen, "gen", `Local )),
                    ([], `Return `Variable 1216));
             `Let ((1215, (Formlet (String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2922, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1213,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`TApp (`Variable 54,
                                        [`Type `Record ({"1" => `Present 
                                                                `Primitive `String ;
                                                         "2" => `Present 
                                                                `Primitive `String ;
                                                         }, ..., false)])])))],
             `Apply (`Variable 1215, [`Variable 1214]))), None, `Unknown );
  `Let ((1218, (Formlet (String), "inputPassword", `Global )),
         ([], `Return `Variable 1217));
  `Fun ((1221, ((String) ~> Formlet (String), "inputValue", `Global )),
         ([(528, (`Unl , `Any ), `Row ...)], [(1220, (String, "", `Local ))],
           ([`Let ((1219, (String, "v", `Local )),
                    ([], `Return `Variable 1220))],
             `Apply (`TApp (`TAbs ([(2931, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1209,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`Variable 1219;
                       `TApp (`Variable 54,
                               [`Type `Record ({"1" => `Present `Primitive `String ;
                                                "2" => `Present `Primitive `String ;
                                                }, ..., false)])]))), 
         None, `Unknown );
  `Fun ((1225,
          ((Gen) {}~> ((Xml, CheckedCollector (String)), Gen), "_fun__g73",
            `Local )),
         ([], [(1224, (Gen, "", `Local ))],
           ([`Let ((1222, (Gen, "gen", `Local )),
                    ([], `Return `Variable 1224));
             `Let ((1223, (Formlet (String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(2937, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1203,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`TApp (`Variable 54,
                                        [`Type `Record ({"1" => `Present 
                                                                `Primitive `String ;
                                                         "2" => `Present 
                                                                `Primitive `String ;
                                                         }, ..., false)])])))],
             `Apply (`Variable 1223, [`Variable 1222]))), None, `Unknown );
  `Let ((1226, (Formlet (String), "inputFile", `Global )),
         ([], `Return `Variable 1225));
  `Fun ((1229, ((String) ~> Xml, "submit", `Global )),
         ([(529, (`Unl , `Any ), `Row ...)], [(1228, (String, "", `Local ))],
           ([`Let ((1227, (String, "text", `Local )),
                    ([], `Return `Variable 1228))],
             `Return `XmlNode ("button",
                                {"type" => `Constant `String "submit"; },
                                [`ApplyPure (`TApp (`TAbs ([(2946,
                                                              (`Unl , `Any ),
                                                              `Row ...)],
                                                            `TApp (`Variable 25,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                     [`Row ({}, ..., false)]),
                                              [`Variable 1227])]))), 
         None, `Unknown );
  `Fun ((1247, ((Bool) ~> Formlet (Bool), "checkboxDefault", `Global )),
         ([(530, (`Unl , `Any ), `Row ...)], [(1246, (Bool, "", `Local ))],
           ([`Let ((1230, (Bool, "checked", `Local )),
                    ([], `Return `Variable 1246));
             `Fun ((1245,
                     ((Int) {}~> ((Xml, ([(String, _)]) ~> (Xml, Maybe (Bool))), Int),
                       "_fun__g76", `Local )),
                    ([], [(1244, (Int, "", `Local ))],
                      ([`Let ((1231, (Int, "gen", `Local )),
                               ([], `Return `Variable 1244));
                        `Fun ((1242,
                                ((String) -> State (b,(Xml, ([(String, c)]) ~d~> (Xml, Maybe (Bool)))),
                                  "_fun__g75", `Local )),
                               ([], [(1241, (String, "", `Local ))],
                                 ([`Let ((1232, (String, "name", `Local )),
                                          ([], `Return `Variable 1241));
                                   `Let ((1233, (Xml, "xml", `Local )),
                                          ([],
                                            `Return `XmlNode ("input",
                                                               {"name" => 
                                                                `Variable 1232;
                                                                "type" => 
                                                                `Constant 
                                                                `String "checkbox";
                                                                "value" => 
                                                                `Constant 
                                                                `String "yes";
                                                                }, [])));
                                   `Let ((1240,
                                           ([(String, String)], "", `Local )),
                                          ([],
                                            `If (`Variable 1230,
                                                  ([],
                                                    `Return `ApplyPure (
                                                            `TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Extend (
                                                              {"1" => 
                                                               `Constant 
                                                               `String "checked";
                                                               "2" => 
                                                               `Constant 
                                                               `String "Y"; },
                                                               None);
                                                              `TApp (
                                                              `Variable 54,
                                                               [`Type 
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 }, ...,
                                                                 false)])])),
                                                  ([],
                                                    `Return `TApp (`Variable 54,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)])))));
                                   `Fun ((1239,
                                           (([(String, _)]) ~> (Xml, Maybe (Bool)),
                                             "_fun__g74", `Local )),
                                          ([],
                                            [(1238,
                                               ([(String, _)], "", `Local ))],
                                            ([`Let ((1234,
                                                      ([(String, _)], "env",
                                                        `Local )),
                                                     ([],
                                                       `Return `Variable 1238));
                                              `Let ((1235,
                                                      (Bool, "checked",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(2970,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2971,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2972,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 793,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1232;
                                                                 `Variable 1234])));
                                              `Let ((1237,
                                                      ([(String, String)],
                                                        "", `Local )),
                                                     ([],
                                                       `If (`Variable 1235,
                                                             ([],
                                                               `Return 
                                                               `ApplyPure (
                                                               `TApp (
                                                               `Variable 55,
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Extend (
                                                                 {"1" => 
                                                                  `Constant 
                                                                  `String "checked";
                                                                  "2" => 
                                                                  `Constant 
                                                                  `String "Y";
                                                                  }, 
                                                                  None);
                                                                 `TApp (
                                                                 `Variable 54,
                                                                  [`Type 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)])])),
                                                             ([],
                                                               `Return 
                                                               `TApp (
                                                               `Variable 54,
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false)])))));
                                              `Let ((1236,
                                                      (Maybe (Bool), "",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(2982,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (2983,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 838,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1235])))],
                                              `Return `Extend ({"1" => 
                                                                `ApplyPure (
                                                                `TApp (
                                                                `TAbs (
                                                                [(2978,
                                                                   (`Unl ,
                                                                    `Any ),
                                                                   `Row ...)],
                                                                 `TApp (
                                                                 `Variable 31,
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)])),
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 1233;
                                                                  `Variable 1237]);
                                                                "2" => 
                                                                `Variable 1236;
                                                                }, None))),
                                          None, `Unknown )],
                                   `Apply (`TApp (`TAbs ([(2961,
                                                            (`Unl , `Any ),
                                                            `Type ...);
                                                          (2962,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (2963,
                                                            (`Unl , `Any ),
                                                            `Type ...)],
                                                          `TApp (`Variable 844,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false);
                                                                   `Type 
                                                                   `MetaTypeVar ...])),
                                                   [`Type `MetaTypeVar ...;
                                                    `Row ({}, ..., false);
                                                    `Type `MetaTypeVar ...]),
                                            [`Extend ({"1" => `ApplyPure (
                                                              `TApp (
                                                              `TAbs (
                                                              [(2964,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `TApp (
                                                               `Variable 31,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Variable 1233;
                                                                `Variable 1240]);
                                                       "2" => `TAbs (
                                                              [(2974,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Type ...);
                                                               (2986,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `Variable 1239);
                                                       }, None)]))), 
                               None, `Unknown );
                        `Let ((1243,
                                (State (Int,(Xml, ([(String, a)]) ~b~> (Xml, Maybe (Bool)))),
                                  "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 835,
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 940;
                                           `TAbs ([(2992, (`Unl , `Any ),
                                                     `Row ...);
                                                   (2991, (`Unl , `Any ),
                                                     `Type ...);
                                                   (2987, (`Unl , `Any ),
                                                     `Type ...);
                                                   (2988, (`Unl , `Any ),
                                                     `Row ...)],
                                                   `Variable 1242)])))],
                        `Apply (`Variable 1243, [`Variable 1231]))), 
                    None, `Unknown )],
             `Return `TAbs ([(2995, (`Unl , `Any ), `Type ...);
                             (2996, (`Unl , `Any ), `Row ...)],
                             `Variable 1245))), None, `Unknown );
  `Fun ((1266,
          ((String, [|Button|Reset|Submit|]) ~> Formlet (Bool), "button",
            `Global )),
         ([(531, (`Unl , `Any ), `Row ...)],
           [(1264, (String, "", `Local ));
            (1265, ([|Button|Reset|Submit|], "", `Local ))],
           ([`Let ((1248, ([|Button|Reset|Submit|], "behaviour", `Local )),
                    ([], `Return `Variable 1265));
             `Let ((1249, (String, "text", `Local )),
                    ([], `Return `Variable 1264));
             `Fun ((1263,
                     ((String) -> State (b,(Xml, ([(String, c)]) ~d~> (Xml, Maybe (Bool)))),
                       "_fun__g78", `Local )),
                    ([], [(1262, (String, "", `Local ))],
                      ([`Let ((1250, (String, "name", `Local )),
                               ([], `Return `Variable 1262));
                        `Let ((1251, ([|Button|Reset|Submit|], "", `Local )),
                               ([], `Return `Variable 1248));
                        `Let ((1255, (String, "behaviour", `Local )),
                               ([],
                                 `Case (`Variable 1251,
                                         {"Button" => ((1252,
                                                         ((), "", `Local )),
                                                        ([],
                                                          `Return `Constant 
                                                                  `String "button"));
                                          "Reset" => ((1253,
                                                        ((), "", `Local )),
                                                       ([],
                                                         `Return `Constant 
                                                                 `String "reset"));
                                          "Submit" => ((1254,
                                                         ((), "", `Local )),
                                                        ([],
                                                          `Return `Constant 
                                                                  `String "submit"));
                                          }, None)));
                        `Let ((1256, (Xml, "xml", `Local )),
                               ([],
                                 `Return `XmlNode ("button",
                                                    {"name" => `Variable 1250;
                                                     "type" => `Variable 1255;
                                                     "value" => `Constant 
                                                                `String "here";
                                                     },
                                                    [`ApplyPure (`TApp (
                                                                 `TAbs (
                                                                 [(3024,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                  `TApp (
                                                                  `Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)]),
                                                                  [`Variable 1249])])));
                        `Fun ((1261,
                                (([(String, _)]) ~> (Xml, Maybe (Bool)),
                                  "_fun__g77", `Local )),
                               ([], [(1260, ([(String, _)], "", `Local ))],
                                 ([`Let ((1257,
                                           ([(String, _)], "env", `Local )),
                                          ([], `Return `Variable 1260));
                                   `Let ((1258, (Bool, "", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3035,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3036,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3037,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 793,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1250;
                                                      `Variable 1257])));
                                   `Let ((1259, (Maybe (Bool), "", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3033,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3034,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 838,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1258])))],
                                   `Return `Extend ({"1" => `Variable 1256; 
                                                    "2" => `Variable 1259; },
                                                     None))), None, `Unknown )],
                        `Apply (`TApp (`TAbs ([(3028, (`Unl , `Any ),
                                                 `Type ...);
                                               (3029, (`Unl , `Any ),
                                                 `Row ...);
                                               (3030, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 844,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Extend ({"1" => `Variable 1256; "2" => 
                                                                   `TAbs (
                                                                   [(
                                                                    3039,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                    (
                                                                    3044,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `Variable 1261);
                                                                   }, 
                                            None)]))), None, `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 940;
                       `TAbs ([(3050, (`Unl , `Any ), `Row ...);
                               (3049, (`Unl , `Any ), `Type ...);
                               (3045, (`Unl , `Any ), `Type ...);
                               (3046, (`Unl , `Any ), `Row ...)],
                               `Variable 1263)]))), None, `Unknown );
  `Fun ((1269, ((String) ~> Formlet (Bool), "pushButton", `Global )),
         ([(532, (`Unl , `Any ), `Row ...)], [(1268, (String, "", `Local ))],
           ([`Let ((1267, (String, "text", `Local )),
                    ([], `Return `Variable 1268))],
             `Apply (`TApp (`TAbs ([(3060, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1266,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`Variable 1267;
                       `Inject ("Button", `Extend ({}, None),
                                 [|Button|Reset|Submit|])]))), None,
         `Unknown );
  `Fun ((1280, ((String) ~> Formlet (String), "textarea", `Global )),
         ([(533, (`Unl , `Any ), `Row ...)], [(1279, (String, "", `Local ))],
           ([`Let ((1270, (String, "value", `Local )),
                    ([], `Return `Variable 1279));
             `Fun ((1273, ((String) -> Xml, "_fun__g79", `Local )),
                    ([], [(1272, (String, "", `Local ))],
                      ([`Let ((1271, (String, "name", `Local )),
                               ([], `Return `Variable 1272))],
                        `Return `XmlNode ("textarea",
                                           {"name" => `Variable 1271; },
                                           [`ApplyPure (`TApp (`TAbs (
                                                               [(3074,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 25,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                         [`Variable 1270])]))),
                    None, `Unknown );
             `Fun ((1278, ((String, String) -> Xml, "_fun__g80", `Local )),
                    ([],
                      [(1276, (String, "", `Local ));
                       (1277, (String, "", `Local ))],
                      ([`Let ((1274, (String, "value", `Local )),
                               ([], `Return `Variable 1277));
                        `Let ((1275, (String, "name", `Local )),
                               ([], `Return `Variable 1276))],
                        `Return `XmlNode ("textarea",
                                           {"name" => `Variable 1275; },
                                           [`ApplyPure (`TApp (`TAbs (
                                                               [(3081,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 25,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                         [`Variable 1274])]))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(3067, (`Unl , `Any ), `Type ...);
                                    (3068, (`Unl , `Any ), `Type ...);
                                    (3069, (`Unl , `Any ), `Row ...);
                                    (3070, (`Any , `Any ), `Type ...);
                                    (3071, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1172,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false); `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`TAbs ([(3076, (`Unl , `Any ), `Row ...)],
                               `Variable 1273);
                       `TAbs ([(3083, (`Unl , `Any ), `Row ...)],
                               `Variable 1278)]))), None, `Unknown );
  `Fun ((1283, ((String) ~> Formlet (Bool), "resetButton", `Global )),
         ([(534, (`Unl , `Any ), `Row ...)], [(1282, (String, "", `Local ))],
           ([`Let ((1281, (String, "text", `Local )),
                    ([], `Return `Variable 1282))],
             `Apply (`TApp (`TAbs ([(3095, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1266,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`Variable 1281;
                       `Inject ("Reset", `Extend ({}, None),
                                 [|Button|Reset|Submit|])]))), None,
         `Unknown );
  `Fun ((1286, ((String) ~> Formlet (Bool), "submitButton", `Global )),
         ([(535, (`Unl , `Any ), `Row ...)], [(1285, (String, "", `Local ))],
           ([`Let ((1284, (String, "text", `Local )),
                    ([], `Return `Variable 1285))],
             `Apply (`TApp (`TAbs ([(3102, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1266,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]),
                      [`Variable 1284;
                       `Inject ("Submit", `Extend ({}, None),
                                 [|Button|Reset|Submit|])]))), None,
         `Unknown );
  `Fun ((1290,
          ((Gen) {}~> ((Xml, CheckedCollector (Bool)), Gen), "_fun__g81",
            `Local )),
         ([], [(1289, (Gen, "", `Local ))],
           ([`Let ((1287, (Gen, "gen", `Local )),
                    ([], `Return `Variable 1289));
             `Let ((1288, (Formlet (Bool), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3108, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1247,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `Bool false])))],
             `Apply (`Variable 1288, [`Variable 1287]))), None, `Unknown );
  `Let ((1291, (Formlet (Bool), "checkbox", `Global )),
         ([], `Return `Variable 1290));
  `Fun ((1313,
          ((String, (a, String), Bool) ~> (Xml, ((String) -c-> [a]) -> (String) -c-> [a]),
            "preludeOptionKeyed", `Global )),
         ([(536, (`Unl , `Any ), `Type ...); (537, (`Unl , `Any ), `Row ...);
           (538, (`Unl , `Any ), `Row ...); (539, (`Unl , `Any ), `Row ...)],
           [(1310, (String, "", `Local ));
            (1311, ((_, String), "", `Local )); (1312, (Bool, "", `Local ))],
           ([`Let ((1292, (Bool, "selected", `Local )),
                    ([], `Return `Variable 1312));
             `Let ((1293, (String, "text", `Local )),
                    ([], `Return `Project ("2", `Variable 1311)));
             `Let ((1294, (_, "data", `Local )),
                    ([], `Return `Project ("1", `Variable 1311)));
             `Let ((1295, (String, "key", `Local )),
                    ([], `Return `Variable 1310))],
             `If (`Variable 1292,
                   ([`Fun ((1309,
                             (((String) -a-> [b]) -> (String) -a-> [b],
                               "_fun__g82", `Local )),
                            ([], [(1308, ((String) -> [_], "", `Local ))],
                              ([`Let ((1303, ((String) -> [_], "k", `Local )),
                                       ([], `Return `Variable 1308));
                                `Fun ((1307,
                                        ((String) -> [_], "_fun__g83",
                                          `Local )),
                                       ([], [(1306, (String, "", `Local ))],
                                         ([`Let ((1304,
                                                   (String, "aKey", `Local )),
                                                  ([], `Return `Variable 1306))],
                                           `If (`ApplyPure (`TApp (`Variable 13,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 1304;
                                                              `Variable 1295]),
                                                 ([`Let ((1305,
                                                           ([_], "", `Local )),
                                                          ([],
                                                            `Apply (`Variable 1303,
                                                                    [`Variable 1304])))],
                                                   `Return `ApplyPure (
                                                           `TApp (`Variable 55,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 1294;
                                                             `Variable 1305])),
                                                 ([],
                                                   `Apply (`Variable 1303,
                                                            [`Variable 1304]))))),
                                       None, `Unknown )],
                                `Return `Variable 1307)), None, `Unknown )],
                     `Return `Extend ({"1" => `XmlNode ("option",
                                                         {"selected" => 
                                                          `Constant `String "SELECTED";
                                                          "value" => 
                                                          `Variable 1295; },
                                                         [`ApplyPure (
                                                          `TApp (`TAbs (
                                                                 [(3119,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                  `TApp (
                                                                  `Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 1293])]);
                                       "2" => `TAbs ([(3132, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3134, (`Any , `Any ),
                                                        `Row ...)],
                                                      `Variable 1309);
                                       }, None)),
                   ([`Fun ((1302,
                             (((String) -a-> [b]) -> (String) -a-> [b],
                               "_fun__g84", `Local )),
                            ([], [(1301, ((String) -> [_], "", `Local ))],
                              ([`Let ((1296, ((String) -> [_], "k", `Local )),
                                       ([], `Return `Variable 1301));
                                `Fun ((1300,
                                        ((String) -> [_], "_fun__g85",
                                          `Local )),
                                       ([], [(1299, (String, "", `Local ))],
                                         ([`Let ((1297,
                                                   (String, "aKey", `Local )),
                                                  ([], `Return `Variable 1299))],
                                           `If (`ApplyPure (`TApp (`Variable 13,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 1297;
                                                              `Variable 1295]),
                                                 ([`Let ((1298,
                                                           ([_], "", `Local )),
                                                          ([],
                                                            `Apply (`Variable 1296,
                                                                    [`Variable 1297])))],
                                                   `Return `ApplyPure (
                                                           `TApp (`Variable 55,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 1294;
                                                             `Variable 1298])),
                                                 ([],
                                                   `Apply (`Variable 1296,
                                                            [`Variable 1297]))))),
                                       None, `Unknown )],
                                `Return `Variable 1300)), None, `Unknown )],
                     `Return `Extend ({"1" => `XmlNode ("option",
                                                         {"value" => 
                                                          `Variable 1295; },
                                                         [`ApplyPure (
                                                          `TApp (`TAbs (
                                                                 [(3137,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                  `TApp (
                                                                  `Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                  [`Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 1293])]);
                                       "2" => `TAbs ([(3150, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3152, (`Any , `Any ),
                                                        `Row ...)],
                                                      `Variable 1302);
                                       }, None))))), None, `Unknown );
  `Rec [((1318,
           (([(String, (a, String))], a) ~> (Xml, (String) -> [a]),
             "preludeOptionsKeyed", `Global )),
          ([(540, (`Unl , `Any ), `Type ...);
            (541, (`Unl , `Any ), `Row ...); (542, (`Unl , `Any ), `Row ...)],
            [(1316, ([(String, (_, String))], "", `Local ));
             (1317, (_, "", `Local ))],
            ([`Let ((1314, (_, "def", `Local )), ([], `Return `Variable 1317));
              `Let ((1315, ([(String, (_, String))], "items", `Local )),
                     ([], `Return `Variable 1316));
              `Let ((1322, ([(String, (_, String))], "", `Local )),
                     ([], `Return `Variable 1315))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 1322;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `Primitive `String ;
                                                          "2" => `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false);
                                                          }, ..., false)])]),
                    ([`Fun ((1337, ((_) -> [_::Any], "_fun__g86", `Local )),
                             ([], [(1336, (_, "", `Local ))],
                               ([],
                                 `Return `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...]))),
                             None, `Unknown )],
                      `Return `Extend ({"1" => `TApp (`Variable 54,
                                                       [`Type `Primitive `XmlItem ]);
                                        "2" => `TAbs ([(3214, (`Unl , `Any ),
                                                         `Type ...);
                                                       (3215, (`Any , `Any ),
                                                         `Row ...);
                                                       (3216, (`Any , `Any ),
                                                         `Type ...)],
                                                       `Variable 1337);
                                        }, None)),
                    ([`Let ((1323, ((String, (_, String)), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 }, ...,
                                                                 false);
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1322])));
                      `Let ((1324, ([(String, (_, String))], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 }, ...,
                                                                 false);
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1322])));
                      `Let ((1326, (String, "", `Local )),
                             ([], `Return `Project ("1", `Variable 1323)));
                      `Let ((1327, ((_, String), "", `Local )),
                             ([], `Return `Project ("2", `Variable 1323)));
                      `Let ((1321, ([(String, (_))], "items", `Local )),
                             ([], `Return `Variable 1324));
                      `Let ((1319, ((_), "item", `Local )),
                             ([], `Return `Variable 1327));
                      `Let ((1320, (String, "itemKey", `Local )),
                             ([], `Return `Variable 1326));
                      `Let ((1330, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3182, (`Any , `Any ),
                                                        `Type ...);
                                                      (3183, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3184, (`Any , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 373,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1319])));
                      `Let ((1331,
                              ((Xml, ((String) -a-> [b]) ~> (String) -a-> [b]),
                                "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3176, (`Unl , `Any ),
                                                        `Type ...);
                                                      (3177, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3178, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3179, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 1313,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1320; `Variable 1319;
                                         `ApplyPure (`TApp (`Variable 13,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false)]),
                                                      [`Variable 1330;
                                                       `Variable 1314])])));
                      `Let ((1328,
                              (((String) -a-> [b]) ~> (String) -a-> [b],
                                "r1", `Local )),
                             ([],
                               `Return `Project ("2",
                                                  `TAbs ([(3223,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3222,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1331))));
                      `Let ((1329, (Xml, "xml", `Local )),
                             ([],
                               `Return `Project ("1",
                                                  `TAbs ([(3223,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3222,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1331))));
                      `Let ((1334, ((Xml, (String) -> [_]), "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3198, (`Unl , `Any ),
                                                        `Type ...);
                                                      (3199, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3200, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 1318,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1321; `Variable 1314])));
                      `Let ((1332, ((String) -> [_], "r2", `Local )),
                             ([],
                               `Return `Project ("2",
                                                  `TAbs ([(3223,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1334))));
                      `Let ((1333, (Xml, "morexml", `Local )),
                             ([],
                               `Return `Project ("1",
                                                  `TAbs ([(3223,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1334))));
                      `Let ((1335, ((String) -> [_], "", `Local )),
                             ([], `Apply (`Variable 1328, [`Variable 1332])))],
                      `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 56,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 1329;
                                                             `Variable 1333]);
                                        "2" => `Variable 1335; }, None))))),
          None, `Unknown )];
  `Fun ((1369, (([(a, String)], a) ~> Formlet (a), "choiceDefault", `Global )),
         ([(543, (`Unl , `Any ), `Type ...); (544, (`Unl , `Any ), `Row ...)],
           [(1367, ([(_, String)], "", `Local )); (1368, (_, "", `Local ))],
           ([`Let ((1338, (_, "selected", `Local )),
                    ([], `Return `Variable 1368));
             `Let ((1339, ([(_, String)], "items", `Local )),
                    ([], `Return `Variable 1367));
             `Fun ((1366,
                     ((String) ~> State (Int,(Xml, ([(String, String)]) ~b~> (Xml, Maybe (c)))),
                       "_fun__g90", `Local )),
                    ([], [(1365, (String, "", `Local ))],
                      ([`Let ((1340, (String, "fieldName", `Local )),
                               ([], `Return `Variable 1365));
                        `Fun ((1362,
                                (((_, String)) ~> [State (Int,String)],
                                  "_fun__g87", `Local )),
                               ([], [(1361, ((_, String), "", `Local ))],
                                 ([`Let ((1359,
                                           ([(_, String)], "_for__g3",
                                             `Local )),
                                          ([], `Return `Variable 1361));
                                   `Let ((1360, ((_, String), "x", `Local )),
                                          ([], `Return `Variable 1361))],
                                   `Return `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `Alias (
                                                                ("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)));
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 940;
                                                         `TApp (`Variable 54,
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("State",
                                                                    [`Type 
                                                                    `Primitive `Int ;
                                                                    `Type 
                                                                    `Primitive `String ]),
                                                                   `Function (
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    (
                                                                    {
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false)))])]))),
                               None, `Unknown );
                        `Let ((1363, ([State (Int,String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 257,
                                                 [`Type `Record ({"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false);
                                                  `Row ({"wild" => `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                         }, ..., false);
                                                  `Type `Alias (("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)))]),
                                          [`Variable 1362; `Variable 1339])));
                        `Let ((1364, (State (Int,[String]), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3244,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3245,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3246,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 943,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1363])));
                        `Fun ((1358,
                                (([String]) ~> State (b,(Xml, ([(String, String)]) ~c~> (Xml, Maybe (d)))),
                                  "_fun__g89", `Local )),
                               ([], [(1357, ([String], "", `Local ))],
                                 ([`Let ((1341,
                                           ([String], "optKeys", `Local )),
                                          ([], `Return `Variable 1357));
                                   `Let ((1342,
                                           ([(String, (_, String))],
                                             "keyedItems", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3256,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3257,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3258,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 560,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1341;
                                                      `Variable 1339])));
                                   `Let ((1356,
                                           ((Xml, (String) -> [_]), "",
                                             `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3267,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3268,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                   (3269,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 1318,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false);
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1342;
                                                      `Variable 1338])));
                                   `Let ((1355, (Xml, "optsXml", `Local )),
                                          ([],
                                            `Return `Project ("1",
                                                               `TAbs (
                                                               [(3272,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1356))));
                                   `Fun ((1354,
                                           (([(String, String)]) ~> (Xml, Maybe (b)),
                                             "_fun__g88", `Local )),
                                          ([],
                                            [(1353,
                                               ([(String, String)], "",
                                                 `Local ))],
                                            ([`Let ((1343,
                                                      ([(String, String)],
                                                        "env", `Local )),
                                                     ([],
                                                       `Return `Variable 1353));
                                              `Let ((1344,
                                                      (String, "selectedKey",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3278,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3279,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 729,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1340;
                                                                 `Variable 1343])));
                                              `Let ((1346,
                                                      ((_, String), "",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3284,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3285,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 729,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1344;
                                                                 `Variable 1342])));
                                              `Let ((1345,
                                                      (_, "selected", `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "1",
                                                                `Variable 1346)));
                                              `Let ((1349,
                                                      ((Xml, (String) ~> [_]),
                                                        "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3291,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3292,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...);
                                                                (3293,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 1318,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1342;
                                                                 `Variable 1345])));
                                              `Let ((1347,
                                                      ((String) ~> [_],
                                                        "retrieve", `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "2",
                                                                `Variable 1349)));
                                              `Let ((1348,
                                                      (Xml, "optsXml",
                                                        `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "1",
                                                                `Variable 1349)));
                                              `Let ((1350, ([_], "", `Local )),
                                                     ([],
                                                       `Apply (`Variable 1347,
                                                                [`Variable 1344])));
                                              `Let ((1351, (_, "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3302,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3303,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 57,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1350])));
                                              `Let ((1352,
                                                      (Maybe (a), "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3300,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3301,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 838,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1351])))],
                                              `Return `Extend ({"1" => 
                                                                `XmlNode (
                                                                "select",
                                                                 {"name" => 
                                                                  `Variable 1340;
                                                                  },
                                                                 [`Variable 1348]);
                                                                "2" => 
                                                                `Variable 1352;
                                                                }, None))),
                                          None, `Unknown )],
                                   `Apply (`TApp (`TAbs ([(3264,
                                                            (`Unl , `Any ),
                                                            `Type ...);
                                                          (3265,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3266,
                                                            (`Unl , `Any ),
                                                            `Type ...)],
                                                          `TApp (`Variable 844,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false);
                                                                   `Type 
                                                                   `MetaTypeVar ...])),
                                                   [`Type `MetaTypeVar ...;
                                                    `Row ({}, ..., false);
                                                    `Type `MetaTypeVar ...]),
                                            [`Extend ({"1" => `XmlNode (
                                                              "select",
                                                               {"name" => 
                                                                `Variable 1340;
                                                                },
                                                               [`Variable 1355]);
                                                       "2" => `TAbs (
                                                              [(3311,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `Variable 1354);
                                                       }, None)]))), 
                               None, `Unknown )],
                        `Apply (`TApp (`Variable 835,
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Row ({}, ..., false)]),
                                 [`Variable 1364;
                                  `TAbs ([(3316, (`Unl , `Any ), `Row ...);
                                          (3315, (`Unl , `Any ), `Type ...);
                                          (3312, (`Unl , `Any ), `Row ...)],
                                          `Variable 1358)]))), None,
                    `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 940;
                       `TAbs ([(3321, (`Unl , `Any ), `Row ...);
                               (3319, (`Unl , `Any ), `Row ...)],
                               `Variable 1366)]))), None, `Unknown );
  `Fun ((1408,
          (([a], a, ([(Xml, a)]) {}~> Xml) -> Formlet (a), "inputRadiogroup",
            `Global )),
         ([(545, (`Unl , `Any ), `Type ...);
           (3422, (`Unl , `Any ), `Row ...)],
           [(1405, ([_], "", `Local )); (1406, (_, "", `Local ));
            (1407, (([(Xml, _)]) {}~> Xml, "", `Local ))],
           ([`Let ((1370, (([(Xml, _)]) {}~> Xml, "layout", `Local )),
                    ([], `Return `Variable 1407));
             `Let ((1371, (_, "selected", `Local )),
                    ([], `Return `Variable 1406));
             `Let ((1372, ([_], "items", `Local )),
                    ([], `Return `Variable 1405));
             `Fun ((1404,
                     ((String) ~> State (Int,(Xml, ([(String, String)]) {}~> (Xml, Maybe (b)))),
                       "_fun__g95", `Local )),
                    ([], [(1403, (String, "", `Local ))],
                      ([`Let ((1373, (String, "name", `Local )),
                               ([], `Return `Variable 1403));
                        `Fun ((1400,
                                ((_) ~> [State (Int,String)], "_fun__g91",
                                  `Local )),
                               ([], [(1399, (_, "", `Local ))],
                                 ([`Let ((1397, ([_], "_for__g4", `Local )),
                                          ([], `Return `Variable 1399));
                                   `Let ((1398, (_, "x", `Local )),
                                          ([], `Return `Variable 1399))],
                                   `Return `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `Alias (
                                                                ("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)));
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 940;
                                                         `TApp (`Variable 54,
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("State",
                                                                    [`Type 
                                                                    `Primitive `Int ;
                                                                    `Type 
                                                                    `Primitive `String ]),
                                                                   `Function (
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    (
                                                                    {
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false)))])]))),
                               None, `Unknown );
                        `Let ((1401, ([State (Int,String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 257,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({"wild" => `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                         }, ..., false);
                                                  `Type `Alias (("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)))]),
                                          [`Variable 1400; `Variable 1372])));
                        `Let ((1402, (State (Int,[String]), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3343,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3344,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3345,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 943,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1401])));
                        `Fun ((1396,
                                (([String]) {}~> State (a,(Xml, ([(String, String)]) {}~> (Xml, Maybe (b)))),
                                  "_fun__g94", `Local )),
                               ([], [(1395, ([String], "", `Local ))],
                                 ([`Let ((1374, ([String], "keys", `Local )),
                                          ([], `Return `Variable 1395));
                                   `Let ((1375,
                                           ([(String, _)], "keyedItems",
                                             `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3355,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3356,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3357,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 560,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1374;
                                                      `Variable 1372])));
                                   `Fun ((1384,
                                           ((a) -> [(Xml, a)], "itemXml",
                                             `Local )),
                                          ([(3376, (`Unl , `Any ), `Row ...)],
                                            [(1383, (_, "", `Local ))],
                                            ([`Let ((1376,
                                                      (_, "selected", `Local )),
                                                     ([],
                                                       `Return `Variable 1383));
                                              `Fun ((1382,
                                                      (((String, a)) -> [(Xml, a)],
                                                        "_fun__g92", `Local )),
                                                     ([],
                                                       [(1381,
                                                          ((String, _), "",
                                                            `Local ))],
                                                       ([`Let ((1377,
                                                                 ([(String, _)],
                                                                   "_for__g5",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Variable 1381));
                                                         `Let ((1378,
                                                                 (_, "data",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "2",
                                                                   `Variable 1381)));
                                                         `Let ((1379,
                                                                 (String,
                                                                   "key",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "1",
                                                                   `Variable 1381)));
                                                         `Let ((1380,
                                                                 ([(String, String)],
                                                                   "",
                                                                   `Local )),
                                                                ([],
                                                                  `If (
                                                                  `ApplyPure (
                                                                  `TApp (
                                                                  `Variable 13,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Variable 1378;
                                                                    `Variable 1376]),
                                                                   ([],
                                                                    `Return 
                                                                    `ApplyPure (
                                                                    `TApp (
                                                                    `Variable 55,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Constant 
                                                                    `String "checked";
                                                                    "2" => 
                                                                    `Constant 
                                                                    `String "on";
                                                                    }, 
                                                                    None);
                                                                    `TApp (
                                                                    `Variable 54,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)])])),
                                                                   ([],
                                                                    `Return 
                                                                    `TApp (
                                                                    `Variable 54,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)])))))],
                                                         `Return `ApplyPure (
                                                                 `TApp (
                                                                 `Variable 55,
                                                                  [`Type 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false);
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                                  [`Extend (
                                                                   {"1" => 
                                                                    `ApplyPure (
                                                                    `TApp (
                                                                    `TAbs (
                                                                    [(
                                                                    3369,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `TApp (
                                                                    `Variable 31,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`XmlNode (
                                                                    "input",
                                                                    {
                                                                    "name" => 
                                                                    `Variable 1373;
                                                                    "type" => 
                                                                    `Constant 
                                                                    `String "radio";
                                                                    "value" => 
                                                                    `Variable 1379;
                                                                    }, 
                                                                    []);
                                                                    `Variable 1380]);
                                                                    "2" => 
                                                                    `Variable 1378;
                                                                    }, 
                                                                    None);
                                                                   `TApp (
                                                                   `Variable 54,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Alias (
                                                                    ("Xml",
                                                                    []),
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Primitive `XmlItem ]));
                                                                    "2" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false)])]))),
                                                     None, `Unknown )],
                                              `Apply (`TApp (`Variable 257,
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                               `Row (
                                                               {}, ..., false);
                                                               `Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Alias (
                                                                ("Xml", []),
                                                                 `Application (
                                                                 {id = "List"; name = "List"; arity = 
                                                                 [(`Type ,
                                                                    (
                                                                    `Unl ,
                                                                    `Any ))]},
                                                                  [`Type 
                                                                   `Primitive `XmlItem ]));
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false)]),
                                                       [`Variable 1382;
                                                        `Variable 1375]))),
                                          None, `Unknown );
                                   `Let ((1385, ([(Xml, _)], "", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3379,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 1384,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1371])));
                                   `Let ((1386, (Xml, "xml", `Local )),
                                          ([],
                                            `Apply (`Variable 1370,
                                                     [`Variable 1385])));
                                   `Fun ((1394,
                                           (([(String, String)]) {}~> (Xml, Maybe (a)),
                                             "_fun__g93", `Local )),
                                          ([],
                                            [(1393,
                                               ([(String, String)], "",
                                                 `Local ))],
                                            ([`Let ((1387,
                                                      ([(String, String)],
                                                        "env", `Local )),
                                                     ([],
                                                       `Return `Variable 1393));
                                              `Let ((1388,
                                                      (String,
                                                        "selectedValue",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3390,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3391,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 729,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1373;
                                                                 `Variable 1387])));
                                              `Let ((1389,
                                                      (_, "selectedData",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3396,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3397,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 729,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1388;
                                                                 `Variable 1375])));
                                              `Let ((1390,
                                                      ([(Xml, _)], "",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3402,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 1384,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1389])));
                                              `Let ((1391,
                                                      (Xml, "xml", `Local )),
                                                     ([],
                                                       `Apply (`Variable 1370,
                                                                [`Variable 1390])));
                                              `Let ((1392,
                                                      (Maybe (a), "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3408,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3409,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 838,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1389])))],
                                              `Return `Extend ({"1" => 
                                                                `Variable 1391;
                                                                "2" => 
                                                                `Variable 1392;
                                                                }, None))),
                                          None, `Unknown )],
                                   `Apply (`TApp (`TAbs ([(3385,
                                                            (`Unl , `Any ),
                                                            `Type ...);
                                                          (3386,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3387,
                                                            (`Unl , `Any ),
                                                            `Type ...)],
                                                          `TApp (`Variable 844,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false);
                                                                   `Type 
                                                                   `MetaTypeVar ...])),
                                                   [`Type `MetaTypeVar ...;
                                                    `Row ({}, ..., false);
                                                    `Type `MetaTypeVar ...]),
                                            [`Extend ({"1" => `Variable 1386; 
                                                      "2" => `Variable 1394; },
                                                       None)]))), None,
                               `Unknown )],
                        `Apply (`TApp (`Variable 835,
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Row ({}, ..., false)]),
                                 [`Variable 1402;
                                  `TAbs ([(3415, (`Unl , `Any ), `Type ...)],
                                          `Variable 1396)]))), None,
                    `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 940;
                       `TAbs ([(3419, (`Unl , `Any ), `Row ...)],
                               `Variable 1404)]))), None, `Unknown );
  `Rec [((1411,
           (([(String, (a, String, Bool))]) ~> (Xml, (String) -> [a]),
             "preludeMultiOptionsKeyed", `Global )),
          ([(548, (`Unl , `Any ), `Type ...);
            (549, (`Unl , `Any ), `Row ...); (550, (`Unl , `Any ), `Row ...)],
            [(1410, ([(String, (_, String, Bool))], "", `Local ))],
            ([`Let ((1409, ([(String, (_, String, Bool))], "items", `Local )),
                     ([], `Return `Variable 1410));
              `Let ((1415, ([(String, (_, String, Bool))], "", `Local )),
                     ([], `Return `Variable 1409))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 1415;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `Primitive `String ;
                                                          "2" => `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "3" => 
                                                                  `Present 
                                                                  `Primitive `Bool ;
                                                                  }, ...,
                                                                  false);
                                                          }, ..., false)])]),
                    ([`Fun ((1432, ((_) -> [_::Any], "_fun__g96", `Local )),
                             ([], [(1431, (_, "", `Local ))],
                               ([],
                                 `Return `TApp (`Variable 54,
                                                 [`Type `MetaTypeVar ...]))),
                             None, `Unknown )],
                      `Return `Extend ({"1" => `TApp (`Variable 54,
                                                       [`Type `Primitive `XmlItem ]);
                                        "2" => `TAbs ([(3489, (`Unl , `Any ),
                                                         `Type ...);
                                                       (3490, (`Any , `Any ),
                                                         `Row ...);
                                                       (3491, (`Any , `Any ),
                                                         `Type ...)],
                                                       `Variable 1432);
                                        }, None)),
                    ([`Let ((1416, ((String, (_, String, Bool)), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 "3" => 
                                                                 `Present 
                                                                 `Primitive `Bool ;
                                                                 }, ...,
                                                                 false);
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1415])));
                      `Let ((1417,
                              ([(String, (_, String, Bool))], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 "3" => 
                                                                 `Present 
                                                                 `Primitive `Bool ;
                                                                 }, ...,
                                                                 false);
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1415])));
                      `Let ((1419, (String, "", `Local )),
                             ([], `Return `Project ("1", `Variable 1416)));
                      `Let ((1420, ((_, String, Bool), "", `Local )),
                             ([], `Return `Project ("2", `Variable 1416)));
                      `Let ((1414, ([(String, (_))], "items", `Local )),
                             ([], `Return `Variable 1417));
                      `Let ((1412, ((_), "item", `Local )),
                             ([], `Return `Variable 1420));
                      `Let ((1413, (String, "itemKey", `Local )),
                             ([], `Return `Variable 1419));
                      `Let ((1424, (_, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3443, (`Any , `Any ),
                                                        `Type ...);
                                                      (3444, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3445, (`Any , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 373,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1412])));
                      `Let ((1423, (String, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3450, (`Any , `Any ),
                                                        `Type ...);
                                                      (3451, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3452, (`Any , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 422,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1412])));
                      `Let ((1425, (Bool, "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3458, (`Any , `Any ),
                                                        `Type ...);
                                                      (3459, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3460, (`Any , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 400,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1412])));
                      `Let ((1426,
                              ((Xml, ((String) -a-> [b]) ~> (String) -a-> [b]),
                                "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3439, (`Unl , `Any ),
                                                        `Type ...);
                                                      (3440, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3441, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3442, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 1313,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1413;
                                         `Extend ({"1" => `Variable 1424; 
                                                  "2" => `Variable 1423; },
                                                   None); `Variable 1425])));
                      `Let ((1421,
                              (((String) -a-> [b]) ~> (String) -a-> [b],
                                "r1", `Local )),
                             ([],
                               `Return `Project ("2",
                                                  `TAbs ([(3498,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3497,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1426))));
                      `Let ((1422, (Xml, "xml", `Local )),
                             ([],
                               `Return `Project ("1",
                                                  `TAbs ([(3498,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3497,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1426))));
                      `Let ((1429, ((Xml, (String) -> [_]), "", `Local )),
                             ([],
                               `Apply (`TApp (`TAbs ([(3473, (`Unl , `Any ),
                                                        `Type ...);
                                                      (3474, (`Unl , `Any ),
                                                        `Row ...);
                                                      (3475, (`Unl , `Any ),
                                                        `Row ...)],
                                                      `TApp (`Variable 1411,
                                                              [`Type 
                                                               `MetaTypeVar ...;
                                                               `Row (
                                                               {}, ..., false);
                                                               `Row (
                                                               {}, ..., false)])),
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 1414])));
                      `Let ((1427, ((String) -> [_], "r2", `Local )),
                             ([],
                               `Return `Project ("2",
                                                  `TAbs ([(3498,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1429))));
                      `Let ((1428, (Xml, "morexml", `Local )),
                             ([],
                               `Return `Project ("1",
                                                  `TAbs ([(3498,
                                                            (`Unl , `Any ),
                                                            `Row ...)],
                                                          `Variable 1429))));
                      `Let ((1430, ((String) -> [_], "", `Local )),
                             ([], `Apply (`Variable 1421, [`Variable 1427])))],
                      `Return `Extend ({"1" => `ApplyPure (`TApp (`Variable 56,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 1422;
                                                             `Variable 1428]);
                                        "2" => `Variable 1430; }, None))))),
          None, `Unknown )];
  `Fun ((1469, (([(a, String, Bool)]) ~> Formlet ([a]), "choices", `Global )),
         ([(551, (`Unl , `Any ), `Type ...); (552, (`Unl , `Any ), `Row ...)],
           [(1468, ([(_, String, Bool)], "", `Local ))],
           ([`Let ((1433, ([(_, String, Bool)], "items", `Local )),
                    ([], `Return `Variable 1468));
             `Fun ((1467,
                     ((String) ~> State (Int,(Xml, ([(String, String)]) ~b~> (Xml, Maybe ([c])))),
                       "_fun__g101", `Local )),
                    ([], [(1466, (String, "", `Local ))],
                      ([`Let ((1434, (String, "fieldName", `Local )),
                               ([], `Return `Variable 1466));
                        `Fun ((1463,
                                (((_, String, Bool)) ~> [State (Int,String)],
                                  "_fun__g97", `Local )),
                               ([],
                                 [(1462, ((_, String, Bool), "", `Local ))],
                                 ([`Let ((1460,
                                           ([(_, String, Bool)], "_for__g6",
                                             `Local )),
                                          ([], `Return `Variable 1462));
                                   `Let ((1461,
                                           ((_, String, Bool), "x", `Local )),
                                          ([], `Return `Variable 1462))],
                                   `Return `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `Alias (
                                                                ("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)));
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 940;
                                                         `TApp (`Variable 54,
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("State",
                                                                    [`Type 
                                                                    `Primitive `Int ;
                                                                    `Type 
                                                                    `Primitive `String ]),
                                                                   `Function (
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    (
                                                                    {
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false)))])]))),
                               None, `Unknown );
                        `Let ((1464, ([State (Int,String)], "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 257,
                                                 [`Type `Record ({"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "3" => 
                                                                  `Present 
                                                                  `Primitive `Bool ;
                                                                  }, ...,
                                                                  false);
                                                  `Row ({"wild" => `Present 
                                                                   `Record (
                                                                   {}, ...,
                                                                    false);
                                                         }, ..., false);
                                                  `Type `Alias (("State",
                                                                  [`Type 
                                                                   `Primitive `Int ;
                                                                   `Type 
                                                                   `Primitive `String ]),
                                                                 `Function (
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  }, ...,
                                                                  false),
                                                                  ({"wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false)))]),
                                          [`Variable 1463; `Variable 1433])));
                        `Let ((1465, (State (Int,[String]), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3518,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3519,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (3520,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 943,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1464])));
                        `Fun ((1459,
                                (([String]) ~> State (b,(Xml, ([(String, String)]) ~c~> (Xml, Maybe ([d])))),
                                  "_fun__g100", `Local )),
                               ([], [(1458, ([String], "", `Local ))],
                                 ([`Let ((1435,
                                           ([String], "optKeys", `Local )),
                                          ([], `Return `Variable 1458));
                                   `Let ((1436,
                                           ([(String, (_, String, Bool))],
                                             "keyedItems", `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3530,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3531,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3532,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 560,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1435;
                                                      `Variable 1433])));
                                   `Let ((1457,
                                           ((Xml, (String) -> [_]), "",
                                             `Local )),
                                          ([],
                                            `Apply (`TApp (`TAbs ([(3541,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (3542,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...);
                                                                   (3543,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 1411,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false);
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1436])));
                                   `Let ((1455,
                                           ((String) -> [_], "retrieve",
                                             `Local )),
                                          ([],
                                            `Return `Project ("2",
                                                               `TAbs (
                                                               [(3546,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1457))));
                                   `Let ((1456, (Xml, "xml", `Local )),
                                          ([],
                                            `Return `Project ("1",
                                                               `TAbs (
                                                               [(3546,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `Variable 1457))));
                                   `Fun ((1454,
                                           (([(String, String)]) ~> (Xml, Maybe ([b])),
                                             "_fun__g99", `Local )),
                                          ([],
                                            [(1453,
                                               ([(String, String)], "",
                                                 `Local ))],
                                            ([`Let ((1437,
                                                      ([(String, String)],
                                                        "env", `Local )),
                                                     ([],
                                                       `Return `Variable 1453));
                                              `Let ((1438,
                                                      ([String],
                                                        "selectedKeys",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3552,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3553,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 747,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1434;
                                                                 `Variable 1437])));
                                              `Fun ((1446,
                                                      (((String, (a, String, Bool))) ~> [(String, (a, String, Bool))],
                                                        "_fun__g98", `Local )),
                                                     ([],
                                                       [(1445,
                                                          ((String, (_, String, Bool)),
                                                            "", `Local ))],
                                                       ([`Let ((1439,
                                                                 ([(String, (_, String, Bool))],
                                                                   "_for__g7",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Variable 1445));
                                                         `Let ((1440,
                                                                 (Bool,
                                                                   "sel",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "3",
                                                                   `Project (
                                                                   "2",
                                                                    `Variable 1445))));
                                                         `Let ((1441,
                                                                 (String,
                                                                   "text",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "2",
                                                                   `Project (
                                                                   "2",
                                                                    `Variable 1445))));
                                                         `Let ((1442,
                                                                 (_, "data",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "1",
                                                                   `Project (
                                                                   "2",
                                                                    `Variable 1445))));
                                                         `Let ((1443,
                                                                 (String,
                                                                   "key",
                                                                   `Local )),
                                                                ([],
                                                                  `Return 
                                                                  `Project (
                                                                  "1",
                                                                   `Variable 1445)));
                                                         `Let ((1444,
                                                                 (Bool, "",
                                                                   `Local )),
                                                                ([],
                                                                  `Apply (
                                                                  `TApp (
                                                                  `Variable 523,
                                                                   [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Variable 1443;
                                                                    `Variable 1438])))],
                                                         `Return `ApplyPure (
                                                                 `TApp (
                                                                 `Variable 55,
                                                                  [`Type 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "3" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false);
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                                  [`Extend (
                                                                   {"1" => 
                                                                    `Variable 1443;
                                                                    "2" => 
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Variable 1442;
                                                                    "2" => 
                                                                    `Variable 1441;
                                                                    "3" => 
                                                                    `Variable 1444;
                                                                    }, 
                                                                    None); },
                                                                    None);
                                                                   `TApp (
                                                                   `Variable 54,
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "3" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)])]))),
                                                     None, `Unknown );
                                              `Let ((1447,
                                                      ([(String, (_, String, Bool))],
                                                        "keyedItems", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `Variable 257,
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  "2" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  }, ...,
                                                                  false);
                                                                 `Row (
                                                                 {"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false);
                                                                 `Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `MetaTypeVar ...;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "3" => 
                                                                   `Present 
                                                                   `MetaTypeVar ...;
                                                                   }, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false)]),
                                                                [`Variable 1446;
                                                                 `Variable 1436])));
                                              `Let ((1450,
                                                      ((Xml, (String) ~> [_]),
                                                        "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3569,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3570,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...);
                                                                (3571,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 1411,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1447])));
                                              `Let ((1448,
                                                      ((String) ~> [_],
                                                        "retrieve", `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "2",
                                                                `Variable 1450)));
                                              `Let ((1449,
                                                      (Xml, "xml", `Local )),
                                                     ([],
                                                       `Return `Project (
                                                               "1",
                                                                `Variable 1450)));
                                              `Let ((1451, ([_], "", `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3580,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3581,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...);
                                                                (3582,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...)],
                                                                `TApp (
                                                                `Variable 257,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false);
                                                                  `Type 
                                                                  `MetaTypeVar ...])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...]),
                                                                [`Variable 1448;
                                                                 `Variable 1438])));
                                              `Let ((1452,
                                                      (Maybe ([a]), "",
                                                        `Local )),
                                                     ([],
                                                       `Apply (`TApp (
                                                               `TAbs (
                                                               [(3578,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Type ...);
                                                                (3579,
                                                                  (`Unl ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 838,
                                                                 [`Type 
                                                                  `MetaTypeVar ...;
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1451])))],
                                              `Return `Extend ({"1" => 
                                                                `XmlNode (
                                                                "select",
                                                                 {"multiple" => 
                                                                  `Constant 
                                                                  `String "multiple";
                                                                  "name" => 
                                                                  `Variable 1434;
                                                                  },
                                                                 [`Variable 1449]);
                                                                "2" => 
                                                                `Variable 1452;
                                                                }, None))),
                                          None, `Unknown )],
                                   `Apply (`TApp (`TAbs ([(3538,
                                                            (`Unl , `Any ),
                                                            `Type ...);
                                                          (3539,
                                                            (`Unl , `Any ),
                                                            `Row ...);
                                                          (3540,
                                                            (`Unl , `Any ),
                                                            `Type ...)],
                                                          `TApp (`Variable 844,
                                                                  [`Type 
                                                                   `MetaTypeVar ...;
                                                                   `Row (
                                                                   {}, ...,
                                                                    false);
                                                                   `Type 
                                                                   `MetaTypeVar ...])),
                                                   [`Type `MetaTypeVar ...;
                                                    `Row ({}, ..., false);
                                                    `Type `MetaTypeVar ...]),
                                            [`Extend ({"1" => `XmlNode (
                                                              "select",
                                                               {"multiple" => 
                                                                `Constant 
                                                                `String "multiple";
                                                                "name" => 
                                                                `Variable 1434;
                                                                },
                                                               [`Variable 1456]);
                                                       "2" => `TAbs (
                                                              [(3590,
                                                                 (`Unl ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `Variable 1454);
                                                       }, None)]))), 
                               None, `Unknown )],
                        `Apply (`TApp (`Variable 835,
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...;
                                         `Row ({}, ..., false)]),
                                 [`Variable 1465;
                                  `TAbs ([(3595, (`Unl , `Any ), `Row ...);
                                          (3594, (`Unl , `Any ), `Type ...);
                                          (3591, (`Unl , `Any ), `Row ...)],
                                          `Variable 1459)]))), None,
                    `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 940;
                       `TAbs ([(3600, (`Unl , `Any ), `Row ...);
                               (3598, (`Unl , `Any ), `Row ...)],
                               `Variable 1467)]))), None, `Unknown );
  `Fun ((1477, (([(a, String)]) ~> Formlet ([a]), "choicesNone", `Global )),
         ([(553, (`Unl , `Any ), `Type ...); (554, (`Unl , `Any ), `Row ...)],
           [(1476, ([(_, String)], "", `Local ))],
           ([`Let ((1470, ([(_, String)], "items", `Local )),
                    ([], `Return `Variable 1476));
             `Fun ((1474,
                     (((a::Any, b::Any)) -> (a::Any, b::Any, Bool),
                       "_fun__g102", `Local )),
                    ([], [(1473, ((_::Any, _::Any), "", `Local ))],
                      ([`Let ((1471, (_::Any, "text", `Local )),
                               ([], `Return `Project ("2", `Variable 1473)));
                        `Let ((1472, (_::Any, "v", `Local )),
                               ([], `Return `Project ("1", `Variable 1473)))],
                        `Return `Extend ({"1" => `Variable 1472; "2" => 
                                                                 `Variable 1471;
                                                                 "3" => 
                                                                 `Constant 
                                                                 `Bool false; },
                                          None))), None, `Unknown );
             `Let ((1475, ([(_, String, Bool)], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3611, (`Any , `Any ), `Type ...);
                                             (3612, (`Unl , `Any ), `Row ...);
                                             (3613, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 307,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`TAbs ([(3614, (`Any , `Any ), `Type ...);
                                        (3615, (`Any , `Any ), `Type ...);
                                        (3616, (`Any , `Any ), `Row ...)],
                                        `Variable 1474); `Variable 1470])))],
             `Apply (`TApp (`TAbs ([(3609, (`Unl , `Any ), `Type ...);
                                    (3610, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1469,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 1475]))), None, `Unknown );
  `Fun ((1482, (([(a, String)]) ~> Formlet (a), "choice", `Global )),
         ([(555, (`Unl , `Any ), `Type ...); (556, (`Unl , `Any ), `Row ...)],
           [(1481, ([(_, String)], "", `Local ))],
           ([`Let ((1478, ([(_, String)], "items", `Local )),
                    ([], `Return `Variable 1481));
             `Let ((1480, ((_, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3631, (`Unl , `Any ), `Type ...);
                                             (3632, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 57,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1478])));
             `Let ((1479, (_, "selected", `Local )),
                    ([], `Return `Project ("1", `Variable 1480)))],
             `Apply (`TApp (`TAbs ([(3637, (`Unl , `Any ), `Type ...);
                                    (3638, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1369,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 1478; `Variable 1479]))), None, `Unknown );
  `Fun ((1494,
          (((a) ~b~> Bool, (a) ~b~> String) -> (a, Xml) ~b~> Either (Xml,Xml),
            "errorMsg", `Global )),
         ([(559, (`Unl , `Any ), `Type ...); (560, (`Unl , `Any ), `Row ...);
           (561, (`Unl , `Any ), `Row ...)],
           [(1492, ((_) ~> Bool, "", `Local ));
            (1493, ((_) ~> String, "", `Local ))],
           ([`Let ((1483, ((_) ~> String, "msg", `Local )),
                    ([], `Return `Variable 1493));
             `Let ((1484, ((_) ~> Bool, "f", `Local )),
                    ([], `Return `Variable 1492));
             `Fun ((1491,
                     ((_, Xml) ~> Either (Xml,Xml), "_fun__g103", `Local )),
                    ([],
                      [(1489, (_, "", `Local )); (1490, (Xml, "", `Local ))],
                      ([`Let ((1485, (Xml, "xml", `Local )),
                               ([], `Return `Variable 1490));
                        `Let ((1486, (_, "x", `Local )),
                               ([], `Return `Variable 1489));
                        `Let ((1488, (Bool, "", `Local )),
                               ([], `Apply (`Variable 1484, [`Variable 1486])))],
                        `If (`Variable 1488,
                              ([],
                                `Return `Inject ("Left", `Variable 1485,
                                                  [|Left:Xml|Right:[XmlItem]|])),
                              ([`Let ((1487, (String, "", `Local )),
                                       ([],
                                         `Apply (`Variable 1483,
                                                  [`Variable 1486])))],
                                `Return `Inject ("Right",
                                                  `ApplyPure (`TApp (
                                                              `Variable 56,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`XmlNode (
                                                                "span",
                                                                 {"class" => 
                                                                  `Constant 
                                                                  `String "errorinput";
                                                                  },
                                                                 [`Variable 1485;
                                                                  `ApplyPure (
                                                                  `TApp (
                                                                  `Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Constant 
                                                                    `String " "])]);
                                                                `XmlNode (
                                                                "span",
                                                                 {"class" => 
                                                                  `Constant 
                                                                  `String "error";
                                                                  },
                                                                 [`ApplyPure (
                                                                  `TApp (
                                                                  `Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Constant 
                                                                    `String " "]);
                                                                  `ApplyPure (
                                                                  `TApp (
                                                                  `TAbs (
                                                                  [(3654,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 25,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                   [`Variable 1487])])]),
                                                  [|Left:Xml|Right:[XmlItem]|]))))),
                    None, `Unknown )], `Return `Variable 1491)), None,
         `Unknown );
  `Fun ((1519,
          ((Formlet (a), (a, Xml) {}~> Either (Xml,Xml)) ~> Formlet (a),
            "satisfies", `Global )),
         ([(562, (`Unl , `Any ), `Type ...); (564, (`Unl , `Any ), `Row ...)],
           [(1517, (Formlet (a), "", `Local ));
            (1518, ((_, Xml) {}~> Either (Xml,Xml), "", `Local ))],
           ([`Let ((1495,
                     ((_, Xml) {}~> Either (Xml,Xml), "validate", `Local )),
                    ([], `Return `Variable 1518));
             `Let ((1496, (Formlet (a), "f", `Local )),
                    ([], `Return `Variable 1517));
             `Fun ((1516,
                     (((a, (b::Any) {}~> (Xml, [|Just:c|Nothing|]))) -> State (e,(a, (b::Any) {}~> (Xml, [|Just:c|Nothing|f::Any|]))),
                       "_fun__g105", `Local )),
                    ([],
                      [(1515,
                         ((_, (_::Any) {}~> (Xml, [|Just:_|Nothing|])), "",
                           `Local ))],
                      ([`Let ((1497,
                                ((_::Any) {}~> (Xml, [|Just:_|Nothing|]),
                                  "collector", `Local )),
                               ([], `Return `Project ("2", `Variable 1515)));
                        `Let ((1498, (_, "xml", `Local )),
                               ([], `Return `Project ("1", `Variable 1515)));
                        `Fun ((1514,
                                ((_::Any) {}~> (Xml, [|Just:_|Nothing|_::Any|]),
                                  "_fun__g104", `Local )),
                               ([], [(1513, (_::Any, "", `Local ))],
                                 ([`Let ((1499, (_::Any, "env", `Local )),
                                          ([], `Return `Variable 1513));
                                   `Let ((1502,
                                           ((Xml, [|Just:_|Nothing|]), "",
                                             `Local )),
                                          ([],
                                            `Apply (`Variable 1497,
                                                     [`Variable 1499])));
                                   `Let ((1500,
                                           ([|Just:_|Nothing|], "val",
                                             `Local )),
                                          ([],
                                            `Return `Project ("2",
                                                               `Variable 1502)));
                                   `Let ((1501, (Xml, "cxml", `Local )),
                                          ([],
                                            `Return `Project ("1",
                                                               `Variable 1502)));
                                   `Let ((1504,
                                           ([|Just:_|Nothing|], "", `Local )),
                                          ([], `Return `Variable 1500))],
                                   `Case (`Variable 1504,
                                           {"Just" => ((1505,
                                                         (_, "", `Local )),
                                                        ([`Let ((1503,
                                                                  (_, "v",
                                                                    `Local )),
                                                                 ([],
                                                                   `Return 
                                                                   `Variable 1505));
                                                          `Let ((1508,
                                                                  (Either (Xml,Xml),
                                                                    "",
                                                                    `Local )),
                                                                 ([],
                                                                   `Apply (
                                                                   `Variable 1495,
                                                                    [`Variable 1503;
                                                                    `Variable 1501])));
                                                          `Let ((1509,
                                                                  (Either (Xml,Xml),
                                                                    "",
                                                                    `Local )),
                                                                 ([],
                                                                   `Return 
                                                                   `Variable 1508))],
                                                          `Case (`Variable 1509,
                                                                  {"Left" => (
                                                                   (1510,
                                                                    (Xml, "",
                                                                    `Local )),
                                                                    (
                                                                    [`Let (
                                                                    (1507,
                                                                    (Xml,
                                                                    "xml",
                                                                    `Local )),
                                                                    ([],
                                                                    `Return 
                                                                    `Variable 1510))],
                                                                    `Return 
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Variable 1507;
                                                                    "2" => 
                                                                    `Inject (
                                                                    "Just",
                                                                    `Variable 1503,
                                                                    [|Just:_|Nothing|_::Any|]);
                                                                    }, 
                                                                    None)));
                                                                   "Right" => (
                                                                   (1511,
                                                                    (Xml, "",
                                                                    `Local )),
                                                                    (
                                                                    [`Let (
                                                                    (1506,
                                                                    (Xml,
                                                                    "xml",
                                                                    `Local )),
                                                                    ([],
                                                                    `Return 
                                                                    `Variable 1511))],
                                                                    `Return 
                                                                    `Extend (
                                                                    {
                                                                    "1" => 
                                                                    `Variable 1506;
                                                                    "2" => 
                                                                    `Inject (
                                                                    "Nothing",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    [|Just:_|Nothing|_::Any|]);
                                                                    }, 
                                                                    None)));
                                                                   }, 
                                                                  None)));
                                            "Nothing" => ((1512,
                                                            ((), "", `Local )),
                                                           ([],
                                                             `Return 
                                                             `Extend (
                                                             {"1" => 
                                                              `Variable 1501; 
                                                             "2" => `Inject (
                                                                    "Nothing",
                                                                    `Extend (
                                                                    {}, 
                                                                    None),
                                                                    [|Just:_|Nothing|_::Any|]);
                                                             }, None)));
                                            }, None))), None, `Unknown )],
                        `Apply (`TApp (`TAbs ([(3674, (`Unl , `Any ),
                                                 `Type ...);
                                               (3675, (`Unl , `Any ),
                                                 `Row ...);
                                               (3676, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 844,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Extend ({"1" => `Variable 1498; "2" => 
                                                                   `TAbs (
                                                                   [(
                                                                    3705,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `Variable 1514);
                                                                   }, 
                                            None)]))), None, `Unknown )],
             `Apply (`TApp (`Variable 835,
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 1496;
                       `TAbs ([(3671, (`Unl , `Any ), `Type ...);
                               (3677, (`Any , `Any ), `Type ...);
                               (3710, (`Unl , `Any ), `Row ...);
                               (3709, (`Unl , `Any ), `Type ...);
                               (3706, (`Any , `Any ), `Row ...)],
                               `Variable 1516)]))), None, `Unknown );
  `Fun ((1541,
          ((Formlet (a), (a) {}~> Bool, (a) {}~> String, (a) ~b~> c) ~b~> Formlet (c),
            "transform", `Global )),
         ([(565, (`Unl , `Any ), `Type ...); (568, (`Unl , `Any ), `Row ...);
           (569, (`Unl , `Any ), `Type ...)],
           [(1537, (Formlet (a), "", `Local ));
            (1538, ((_) {}~> Bool, "", `Local ));
            (1539, ((_) {}~> String, "", `Local ));
            (1540, ((_) ~> _, "", `Local ))],
           ([`Let ((1520, ((_) ~> _, "g", `Local )),
                    ([], `Return `Variable 1540));
             `Let ((1521, ((_) {}~> String, "error", `Local )),
                    ([], `Return `Variable 1539));
             `Let ((1522, ((_) {}~> Bool, "predicate", `Local )),
                    ([], `Return `Variable 1538));
             `Let ((1523, (Formlet (a), "f", `Local )),
                    ([], `Return `Variable 1537));
             `Let ((1524, ((_, Xml) {}~> Either (Xml,Xml), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 1494,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 1522; `Variable 1521])));
             `Let ((1525, (Formlet (a), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 1519,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1523; `Variable 1524])));
             `Fun ((1529, ((a) {}-> a, "_fun__g106", `Local )),
                    ([], [(1528, (_, "", `Local ))],
                      ([`Let ((1526, (_, "_formlet__g17", `Local )),
                               ([], `Return `Variable 1528));
                        `Let ((1527, (_, "v", `Local )),
                               ([], `Return `Variable 1528))],
                        `Return `Variable 1526)), None, `Unknown );
             `Let ((1530, (Formlet ((a) {}-> a), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 921,
                                      [`Type `Function (`Record ({"1" => 
                                                                  `Present 
                                                                  `MetaTypeVar ...;
                                                                  }, ...,
                                                                  false),
                                                         ({}, ..., false),
                                                         `MetaTypeVar ...);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1529])));
             `Let ((1531, (Formlet (a), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 916,
                                      [`Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...;
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1525; `Variable 1530])));
             `Fun ((1535, (((1:_)) {}-> _, "_fun__g107", `Local )),
                    ([], [(1534, ((1:_), "", `Local ))],
                      ([`Let ((1532, (_, "_formlet__g16", `Local )),
                               ([], `Return `Variable 1534));
                        `Let ((1533, (_, "v", `Local )),
                               ([], `Return `Variable 1534))],
                        `Apply (`Variable 1520, [`Variable 1533]))), 
                    None, `Unknown );
             `Let ((1536, (Formlet (((1:a)) {}-> b), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 921,
                                      [`Type `Function (`Record ({"1" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `MetaTypeVar ...;
                                                                   }, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                         ({}, ..., false),
                                                         `MetaTypeVar ...);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1535])))],
             `Apply (`TApp (`Variable 916,
                             [`Type `Record ({"1" => `Present `MetaTypeVar ...;
                                              }, ..., false);
                              `Type `MetaTypeVar ...;
                              `Row ({"wild" => `Present `Record ({}, ...,
                                                                  false);
                                     }, ..., false)]),
                      [`Variable 1531; `Variable 1536]))), None, `Unknown );
  `Fun ((1548,
          ((Gen) {}~> ((Xml, CheckedCollector (Int)), Gen), "_fun__g109",
            `Local )),
         ([], [(1547, (Gen, "", `Local ))],
           ([`Let ((1542, (Gen, "gen", `Local )),
                    ([], `Return `Variable 1547));
             `Fun ((1545, ((String) -> String, "_fun__g108", `Local )),
                    ([], [(1544, (String, "", `Local ))],
                      ([`Let ((1543, (String, "s", `Local )),
                               ([], `Return `Variable 1544))],
                        `Return `ApplyPure (`TApp (`Variable 12,
                                                    [`Row ({}, ..., false)]),
                                             [`Variable 1543;
                                              `Constant `String " is not an integer"]))),
                    None, `Unknown );
             `Let ((1546, (Formlet (Int), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3742, (`Unl , `Any ), `Type ...);
                                             (3743, (`Unl , `Any ), `Row ...);
                                             (3744, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 1541,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1185;
                                `TApp (`Variable 713, [`Row ({}, ..., false)]);
                                `TAbs ([(3750, (`Unl , `Any ), `Row ...)],
                                        `Variable 1545);
                                `TApp (`Variable 20, [`Row ({}, ..., false)])])))],
             `Apply (`Variable 1546, [`Variable 1542]))), None, `Unknown );
  `Let ((1549, (Formlet (Int), "inputInt", `Global )),
         ([], `Return `Variable 1548));
  `Fun ((1556, ((Int) ~> Formlet (Int), "inputIntValue", `Global )),
         ([(570, (`Unl , `Any ), `Row ...)], [(1555, (Int, "", `Local ))],
           ([`Let ((1550, (Int, "v", `Local )), ([], `Return `Variable 1555));
             `Let ((1551, (Formlet (String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3766, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1199,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Extend ({"1" => `Constant 
                                                               `String "value";
                                                        "2" => `ApplyPure (
                                                               `TApp (
                                                               `TAbs (
                                                               [(3767,
                                                                  (`Any ,
                                                                    `Any ),
                                                                  `Row ...)],
                                                                `TApp (
                                                                `Variable 19,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)])),
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1550]);
                                                        }, None);
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])])])));
             `Fun ((1554, ((String) -> String, "_fun__g110", `Local )),
                    ([], [(1553, (String, "", `Local ))],
                      ([`Let ((1552, (String, "s", `Local )),
                               ([], `Return `Variable 1553))],
                        `Return `ApplyPure (`TApp (`Variable 12,
                                                    [`Row ({}, ..., false)]),
                                             [`Variable 1552;
                                              `Constant `String "is not an integer"]))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(3763, (`Unl , `Any ), `Type ...);
                                    (3764, (`Unl , `Any ), `Row ...);
                                    (3765, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 1541,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Variable 1551;
                       `TApp (`Variable 713, [`Row ({}, ..., false)]);
                       `TAbs ([(3775, (`Unl , `Any ), `Row ...)],
                               `Variable 1554);
                       `TApp (`Variable 20, [`Row ({}, ..., false)])]))),
         None, `Unknown );
  `Fun ((1563, ((Attributes) ~> Formlet (Int), "inputIntA", `Global )),
         ([(571, (`Unl , `Any ), `Row ...)],
           [(1562, (Attributes, "", `Local ))],
           ([`Let ((1557, (Attributes, "attributes", `Local )),
                    ([], `Return `Variable 1562));
             `Let ((1558, (Formlet (String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3789, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1199,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Variable 1557])));
             `Fun ((1561, ((String) -> String, "_fun__g111", `Local )),
                    ([], [(1560, (String, "", `Local ))],
                      ([`Let ((1559, (String, "s", `Local )),
                               ([], `Return `Variable 1560))],
                        `Return `ApplyPure (`TApp (`Variable 12,
                                                    [`Row ({}, ..., false)]),
                                             [`Variable 1559;
                                              `Constant `String " is not an integer"]))),
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(3786, (`Unl , `Any ), `Type ...);
                                    (3787, (`Unl , `Any ), `Row ...);
                                    (3788, (`Unl , `Any ), `Type ...)],
                                    `TApp (`Variable 1541,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `MetaTypeVar ...]),
                      [`Variable 1558;
                       `TApp (`Variable 713, [`Row ({}, ..., false)]);
                       `TAbs ([(3796, (`Unl , `Any ), `Row ...)],
                               `Variable 1561);
                       `TApp (`Variable 20, [`Row ({}, ..., false)])]))),
         None, `Unknown );
  `Fun ((1570,
          ((Gen) {}~> ((Xml, CheckedCollector (Float)), Gen), "_fun__g113",
            `Local )),
         ([], [(1569, (Gen, "", `Local ))],
           ([`Let ((1564, (Gen, "gen", `Local )),
                    ([], `Return `Variable 1569));
             `Fun ((1567, ((String) -> String, "_fun__g112", `Local )),
                    ([], [(1566, (String, "", `Local ))],
                      ([`Let ((1565, (String, "s", `Local )),
                               ([], `Return `Variable 1566))],
                        `Return `ApplyPure (`TApp (`Variable 12,
                                                    [`Row ({}, ..., false)]),
                                             [`Variable 1565;
                                              `Constant `String " is not a float"]))),
                    None, `Unknown );
             `Let ((1568, (Formlet (Float), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3806, (`Unl , `Any ), `Type ...);
                                             (3807, (`Unl , `Any ), `Row ...);
                                             (3808, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 1541,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1185;
                                `TApp (`Variable 742, [`Row ({}, ..., false)]);
                                `TAbs ([(3814, (`Unl , `Any ), `Row ...)],
                                        `Variable 1567);
                                `TApp (`Variable 24, [`Row ({}, ..., false)])])))],
             `Apply (`Variable 1568, [`Variable 1564]))), None, `Unknown );
  `Let ((1571, (Formlet (Float), "inputFloat", `Global )),
         ([], `Return `Variable 1570));
  `Fun ((1578, ((((a) ~> Page) ~d~> Page) ~d~> a, "sendSuspend", `Global )),
         ([(572, (`Unl , `Any ), `Type ...); (573, (`Unl , `Any ), `Row ...);
           (574, (`Unl , `Any ), `Row ...)],
           [(1577, (((_) ~> Page) ~> Page, "", `Local ))],
           ([`Let ((1572, (((_) ~> Page) ~> Page, "pagef", `Local )),
                    ([], `Return `Variable 1577));
             `Fun ((1576, (((a) ~> Page) -> a, "", `Local )),
                    ([], [(1573, ((_) ~> Page, "returnf", `Local ))],
                      ([`Let ((1574, (Page, "", `Local )),
                               ([], `Apply (`Variable 1572, [`Variable 1573])));
                        `Let ((1575, (Xml, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3833,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 1120,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Row ({}, ..., false)]),
                                          [`Variable 1574])))],
                        `Apply (`TApp (`TAbs ([(3830, (`Unl , `Any ),
                                                 `Type ...);
                                               (3831, (`Unl , `Any ),
                                                 `Row ...);
                                               (3832, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 30,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Variable 1575]))), None, `Unknown )],
             `Special `CallCC `Variable 1576)), None, `Unknown );
  `Fun ((1587, (((a::Session) ~b~> ()) ~b~> ~a::Session, "fork", `Global )),
         ([(577, (`Any , `Session ), `Type ...);
           (578, (`Unl , `Any ), `Row ...)],
           [(1586, ((_::Session) ~> (), "", `Local ))],
           ([`Let ((1579, ((_::Session) ~> (), "f", `Local )),
                    ([], `Return `Variable 1586));
             `Let ((1580, (AP (_::Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3852, (`Unl , `Any ), `Row ...);
                                             (3853, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1581, (AP (_::Session), "ap", `Local )),
                    ([],
                      `Return `TAbs ([(3850, (`Any , `Session ), `Type ...)],
                                      `Variable 1580)));
             `Fun ((1583, (() ~> (), "_fun__g114", `Local )),
                    ([], [],
                      ([`Let ((1582, (_::Session, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3859,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3860,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1581])))],
                        `Apply (`Variable 1579, [`Variable 1582]))), 
                    None, `Unknown );
             `Let ((1584, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1585, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 42,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1583; `Variable 1584])))],
             `Apply (`TApp (`TAbs ([(3866, (`Unl , `Any ), `Row ...);
                                    (3867, (`Any , `Session ), `Type ...)],
                                    `TApp (`Variable 53,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...]),
                      [`Variable 1581]))), None, `Unknown );
  `Fun ((1608,
          (((a::Session) ~b~> (), (~a::Session) ~b~> c) ~b~> c, "connect",
            `Global )),
         ([(580, (`Any , `Session ), `Type ...);
           (581, (`Unl , `Any ), `Row ...); (579, (`Unl , `Any ), `Type ...)],
           [(1606, ((_::Session) ~> (), "", `Local ));
            (1607, ((~_::Session) ~> _, "", `Local ))],
           ([`Let ((1588, ((~_::Session) ~> _, "g", `Local )),
                    ([], `Return `Variable 1607));
             `Let ((1589, ((_::Session) ~> (), "f", `Local )),
                    ([], `Return `Variable 1606));
             `Let ((1590, (AP (_::Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3878, (`Unl , `Any ), `Row ...);
                                             (3879, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1591, (AP (_::Session), "ap", `Local )),
                    ([],
                      `Return `TAbs ([(3876, (`Any , `Session ), `Type ...)],
                                      `Variable 1590)));
             `Let ((1592, (AP (!(())._::(Unl,Session)), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3883, (`Unl , `Any ), `Row ...);
                                             (3884, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1593, (AP (!(())._::(Unl,Session)), "done", `Local )),
                    ([],
                      `Return `TAbs ([(3908, (`Unl , `Session ), `Type ...)],
                                      `Variable 1592)));
             `Fun ((1598, (() ~> (), "_fun__g115", `Local )),
                    ([], [],
                      ([`Let ((1596, (_::Session, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3890,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3891,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1591])));
                        `Let ((1597, ((), "", `Local )),
                               ([], `Apply (`Variable 1589, [`Variable 1596])));
                        `Let ((1594, (!(())._::(Unl,Session), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3901,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3902,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1593])));
                        `Let ((1595, (_::(Unl,Session), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3898,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3899,
                                                          (`Any , `Any ),
                                                          `Type ...);
                                                        (3900,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 45,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...]),
                                          [`Extend ({}, None);
                                           `Variable 1594])))],
                        `Apply (`TApp (`TAbs ([(3896, (`Unl , `Any ),
                                                 `Type ...);
                                               (3897, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 545,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false)])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false)]),
                                 [`Variable 1595]))), None, `Unknown );
             `Let ((1599, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1600, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1598; `Variable 1599])));
             `Let ((1601, (~_::Session, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3911, (`Unl , `Any ), `Row ...);
                                             (3912, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 53,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1591])));
             `Let ((1602, (_, "result", `Local )),
                    ([], `Apply (`Variable 1588, [`Variable 1601])));
             `Let ((1603, (?(()).~_::(Unl,Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3922, (`Unl , `Any ), `Row ...);
                                             (3923, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 53,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1593])));
             `Let ((1604, (((), ~_::(Unl,Session)), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3919, (`Unl , `Any ), `Row ...);
                                             (3920, (`Any , `Any ), `Type ...);
                                             (3921, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 46,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1603])));
             `Let ((1605, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3917, (`Unl , `Any ), `Type ...);
                                             (3918, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 545,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1604])))], `Return `Variable 1602)),
         None, `Unknown );
  `Fun ((1617, (((a::Session) ~b~@ ()) ~b~> ~a::Session, "linFork", `Global )),
         ([(582, (`Any , `Session ), `Type ...);
           (583, (`Unl , `Any ), `Row ...)],
           [(1616, ((_::Session) ~@ (), "", `Local ))],
           ([`Let ((1609, ((_::Session) ~@ (), "f", `Local )),
                    ([], `Return `Variable 1616));
             `Let ((1610, (AP (_::Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(3939, (`Unl , `Any ), `Row ...);
                                             (3940, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1611, (AP (_::Session), "ap", `Local )),
                    ([],
                      `Return `TAbs ([(3937, (`Any , `Session ), `Type ...)],
                                      `Variable 1610)));
             `Fun ((1613, (() ~> (), "_fun__g116", `Local )),
                    ([], [],
                      ([`Let ((1612, (_::Session, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3946,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3947,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1611])))],
                        `Apply (`Variable 1609, [`Variable 1612]))), 
                    None, `Unknown );
             `Let ((1614, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1615, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 42,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1613; `Variable 1614])))],
             `Apply (`TApp (`TAbs ([(3953, (`Unl , `Any ), `Row ...);
                                    (3954, (`Any , `Session ), `Type ...)],
                                    `TApp (`Variable 53,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...]),
                      [`Variable 1611]))), None, `Unknown );
  `Rec [((1622,
           ((AP (a::Session), (a::Session) ~b~> ()) ~b~> (), "reproduce",
             `Global )),
          ([(584, (`Any , `Session ), `Type ...);
            (585, (`Unl , `Any ), `Row ...)],
            [(1620, (AP (_::Session), "", `Local ));
             (1621, ((_::Session) ~> (), "", `Local ))],
            ([`Let ((1618, ((_::Session) ~> (), "f", `Local )),
                     ([], `Return `Variable 1621));
              `Let ((1619, (AP (_::Session), "ap", `Local )),
                     ([], `Return `Variable 1620));
              `Let ((1623, (_::Session, "x", `Local )),
                     ([],
                       `Apply (`TApp (`TAbs ([(3967, (`Unl , `Any ), `Row ...);
                                              (3968, (`Any , `Session ),
                                                `Type ...)],
                                              `TApp (`Variable 52,
                                                      [`Row ({}, ..., false);
                                                       `Type `MetaTypeVar ...])),
                                       [`Row ({}, ..., false);
                                        `Type `MetaTypeVar ...]),
                                [`Variable 1619])));
              `Fun ((1624, (() ~> (), "_fun__g117", `Local )),
                     ([], [], ([], `Apply (`Variable 1618, [`Variable 1623]))),
                     None, `Unknown );
              `Let ((1625, (Location, "", `Local )),
                     ([], `Apply (`Variable 34, [`Extend ({}, None)])));
              `Let ((1626, (Process ({ wild|_ }), "", `Local )),
                     ([],
                       `Apply (`TApp (`Variable 39,
                                       [`Row ({"wild" => `Present `Record (
                                                                  {}, ...,
                                                                   false);
                                               }, ..., false);
                                        `Type `Record ({}, ..., false);
                                        `Row ({"wild" => `Present `Record (
                                                                  {}, ...,
                                                                   false);
                                               }, ..., false)]),
                                [`Variable 1624; `Variable 1625])))],
              `Apply (`TApp (`TAbs ([(3979, (`Any , `Session ), `Type ...);
                                     (3980, (`Unl , `Any ), `Row ...)],
                                     `TApp (`Variable 1622,
                                             [`Type `MetaTypeVar ...;
                                              `Row ({}, ..., false)])),
                              [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                       [`Variable 1619; `Variable 1618]))), None, `Unknown )];
  `Fun ((1632, (() ~> (), "freshResource", `Global )),
         ([(586, (`Unl , `Any ), `Row ...)], [],
           ([`Fun ((1631, (((()) ~> _) {}~> (), "", `Local )),
                    ([], [(1627, ((()) ~> _, "esc", `Local ))],
                      ([`Fun ((1628, (() ~> _, "_fun__g118", `Local )),
                               ([], [],
                                 ([],
                                   `Apply (`Variable 1627,
                                            [`Extend ({}, None)]))), 
                               None, `Unknown );
                        `Let ((1629, (String, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3998,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (3999,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (4000,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 167,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 1628])));
                        `Let ((1630, ((), "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(3996,
                                                          (`Unl , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 129,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Row ({}, ..., false)]),
                                          [`ApplyPure (`TApp (`Variable 12,
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Constant `String "?_k=";
                                                         `Variable 1629])])))],
                        `Apply (`TApp (`TAbs ([(4010, (`Unl , `Any ),
                                                 `Type ...);
                                               (4011, (`Unl , `Any ),
                                                 `Row ...);
                                               (4012, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 30,
                                                       [`Type `MetaTypeVar ...;
                                                        `Row ({}, ..., false);
                                                        `Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...;
                                         `Row ({}, ..., false);
                                         `Type `MetaTypeVar ...]),
                                 [`Constant `Int 0]))), None, `Unknown )],
             `Special `CallCC `Variable 1631)), None, `Unknown );
  `Fun ((1642,
          ((String, (String, Location) ~> Page) ~> (), "addRoute", `Global )),
         ([(587, (`Unl , `Any ), `Row ...); (588, (`Unl , `Any ), `Row ...)],
           [(1640, (String, "", `Local ));
            (1641, ((String, Location) ~> Page, "", `Local ))],
           ([`Let ((1633, ((String, Location) ~> Page, "f", `Local )),
                    ([], `Return `Variable 1641));
             `Let ((1634, (String, "path", `Local )),
                    ([], `Return `Variable 1640));
             `Fun ((1639, ((String, Location) ~> Page, "_fun__g119", `Local )),
                    ([],
                      [(1637, (String, "", `Local ));
                       (1638, (Location, "", `Local ))],
                      ([`Let ((1635, (Location, "loc", `Local )),
                               ([], `Return `Variable 1638));
                        `Let ((1636, (String, "p", `Local )),
                               ([], `Return `Variable 1637))],
                        `Apply (`Variable 1633,
                                 [`Variable 1636; `Variable 1635]))), 
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(4022, (`Unl , `Any ), `Row ...);
                                    (4023, (`Unl , `Any ), `Type ...);
                                    (4024, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 230,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Variable 1634; `Variable 1639]))), None, `Unknown );
  `Fun ((1646, ((EndQuery) ~> (), "wait", `Global )),
         ([(590, (`Unl , `Any ), `Row ...)],
           [(1645, (EndQuery, "", `Local ))],
           ([`Let ((1643, (EndQuery, "s", `Local )),
                    ([], `Return `Variable 1645));
             `Let ((1644, (((), End), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4040, (`Unl , `Any ), `Row ...);
                                             (4041, (`Any , `Any ), `Type ...);
                                             (4042, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 46,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1643])))],
             `Apply (`TApp (`TAbs ([(4038, (`Unl , `Any ), `Type ...);
                                    (4039, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 545,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 1644]))), None, `Unknown );
  `Fun ((1652, (() ~> EndBang, "makeEndBang", `Global )),
         ([(591, (`Unl , `Any ), `Row ...)], [],
           ([`Let ((1647, (AP (EndQuery), "ap", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4051, (`Unl , `Any ), `Row ...);
                                             (4052, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Fun ((1649, (() ~> (), "_fun__g120", `Local )),
                    ([], [],
                      ([`Let ((1648, (EndQuery, "c", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(4058,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (4059,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1647])))],
                        `Apply (`TApp (`TAbs ([(4064, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 1646,
                                                       [`Row ({}, ..., false)])),
                                        [`Row ({}, ..., false)]),
                                 [`Variable 1648]))), None, `Unknown );
             `Let ((1650, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1651, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1649; `Variable 1650])))],
             `Apply (`TApp (`TAbs ([(4068, (`Unl , `Any ), `Row ...);
                                    (4069, (`Any , `Session ), `Type ...)],
                                    `TApp (`Variable 53,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...]),
                      [`Variable 1647]))), None, `Unknown );
  `Fun ((1658, ((a::Session, ~a::Session) ~> EndBang, "linkSync", `Global )),
         ([(593, (`Any , `Session ), `Type ...);
           (592, (`Unl , `Any ), `Row ...)],
           [(1656, (_::Session, "", `Local ));
            (1657, (~_::Session, "", `Local ))],
           ([`Let ((1653, (~_::Session, "c", `Local )),
                    ([], `Return `Variable 1657));
             `Let ((1654, (_::Session, "s", `Local )),
                    ([], `Return `Variable 1656));
             `Let ((1655, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4078, (`Any , `Session ),
                                               `Type ...);
                                             (4079, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 47,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1654; `Variable 1653])))],
             `Apply (`TApp (`TAbs ([(4082, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 1652,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]), []))), None, `Unknown );
  `Fun ((1662, ((EndBang) ~> (), "close", `Global )),
         ([(594, (`Unl , `Any ), `Row ...)],
           [(1661, (EndBang, "", `Local ))],
           ([`Let ((1659, (EndBang, "s", `Local )),
                    ([], `Return `Variable 1661));
             `Let ((1660, (End, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4091, (`Unl , `Any ), `Row ...);
                                             (4092, (`Any , `Any ), `Type ...);
                                             (4093, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 45,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...]),
                               [`Extend ({}, None); `Variable 1659])))],
             `Apply (`TApp (`TAbs ([(4089, (`Unl , `Any ), `Type ...);
                                    (4090, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 545,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`Variable 1660]))), None, `Unknown );
  `Fun ((1672,
          (((a::Session) ~b~@ EndBang) ~b~> ~a::Session, "linForkSync",
            `Global )),
         ([(595, (`Any , `Session ), `Type ...);
           (596, (`Unl , `Any ), `Row ...)],
           [(1671, ((_::Session) ~@ EndBang, "", `Local ))],
           ([`Let ((1663, ((_::Session) ~@ EndBang, "f", `Local )),
                    ([], `Return `Variable 1671));
             `Let ((1664, (AP (_::Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4105, (`Unl , `Any ), `Row ...);
                                             (4106, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1665, (AP (_::Session), "ap", `Local )),
                    ([],
                      `Return `TAbs ([(4103, (`Any , `Session ), `Type ...)],
                                      `Variable 1664)));
             `Fun ((1668, (() ~> (), "_fun__g121", `Local )),
                    ([], [],
                      ([`Let ((1666, (_::Session, "c", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(4112,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (4113,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1665])));
                        `Let ((1667, (EndBang, "c", `Local )),
                               ([], `Apply (`Variable 1663, [`Variable 1666])))],
                        `Apply (`TApp (`TAbs ([(4120, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 1662,
                                                       [`Row ({}, ..., false)])),
                                        [`Row ({}, ..., false)]),
                                 [`Variable 1667]))), None, `Unknown );
             `Let ((1669, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1670, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1668; `Variable 1669])))],
             `Apply (`TApp (`TAbs ([(4123, (`Unl , `Any ), `Row ...);
                                    (4124, (`Any , `Session ), `Type ...)],
                                    `TApp (`Variable 53,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...]),
                      [`Variable 1665]))), None, `Unknown );
  `Fun ((1683, (([(String, () ~> Page)]) ~> (), "serveThese", `Global )),
         ([(597, (`Unl , `Any ), `Row ...); (598, (`Unl , `Any ), `Row ...)],
           [(1682, ([(String, () ~> Page)], "", `Local ))],
           ([`Let ((1673, ([(String, () ~> Page)], "routes", `Local )),
                    ([], `Return `Variable 1682));
             `Fun ((1680,
                     (((String, () ~> Page)) ~> (), "_fun__g123", `Local )),
                    ([], [(1679, ((String, () ~> Page), "", `Local ))],
                      ([`Let ((1674, (() ~> Page, "p", `Local )),
                               ([], `Return `Project ("2", `Variable 1679)));
                        `Let ((1675, (String, "s", `Local )),
                               ([], `Return `Project ("1", `Variable 1679)));
                        `Fun ((1678, ((_, _) ~> Page, "_fun__g122", `Local )),
                               ([],
                                 [(1676, (_, "", `Local ));
                                  (1677, (_, "", `Local ))],
                                 ([], `Apply (`Variable 1674, []))), 
                               None, `Unknown )],
                        `Apply (`TApp (`TAbs ([(4138, (`Unl , `Any ),
                                                 `Row ...);
                                               (4139, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 1642,
                                                       [`Row ({}, ..., false);
                                                        `Row ({}, ..., false)])),
                                        [`Row ({}, ..., false);
                                         `Row ({}, ..., false)]),
                                 [`Variable 1675;
                                  `TAbs ([(4141, (`Unl , `Any ), `Type ...);
                                          (4142, (`Unl , `Any ), `Type ...)],
                                          `Variable 1678)]))), None,
                    `Unknown );
             `Let ((1681, ([()], "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4132, (`Any , `Any ), `Type ...);
                                             (4133, (`Unl , `Any ), `Row ...);
                                             (4134, (`Unl , `Any ), `Type ...)],
                                             `TApp (`Variable 307,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]),
                               [`TAbs ([(4150, (`Unl , `Any ), `Row ...);
                                        (4151, (`Unl , `Any ), `Row ...)],
                                        `Variable 1680); `Variable 1673])))],
             `Apply (`TApp (`TAbs ([(4160, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 231,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]), []))), None, `Unknown );
  `Fun ((1700, (((a) -b-> c, [a]) -b-> [(c, [a])], "groupByFlat", `Global )),
         ([(600, (`Unl , `Any ), `Type ...); (601, (`Unl , `Any ), `Row ...);
           (602, (`Unl , `Any ), `Type ...)],
           [(1698, ((_) -> _, "", `Local )); (1699, ([_], "", `Local ))],
           ([`Let ((1684, ([_], "ts", `Local )), ([], `Return `Variable 1699));
             `Let ((1685, ((_) -> _, "project", `Local )),
                    ([], `Return `Variable 1698));
             `Fun ((1697, ((a) -> [(_, [a])], "_fun__g125", `Local )),
                    ([], [(1696, (_, "", `Local ))],
                      ([`Let ((1686, ([_], "_for__g8", `Local )),
                               ([], `Return `Variable 1696));
                        `Let ((1687, (_, "t", `Local )),
                               ([], `Return `Variable 1696));
                        `Let ((1695, (_, "", `Local )),
                               ([], `Apply (`Variable 1685, [`Variable 1687])));
                        `Fun ((1693, ((a) -> [a], "_fun__g124", `Local )),
                               ([], [(1692, (_, "", `Local ))],
                                 ([`Let ((1688, ([_], "_for__g9", `Local )),
                                          ([], `Return `Variable 1692));
                                   `Let ((1689, (_, "u", `Local )),
                                          ([], `Return `Variable 1692));
                                   `Let ((1691, (_, "", `Local )),
                                          ([],
                                            `Apply (`Variable 1685,
                                                     [`Variable 1687])));
                                   `Let ((1690, (_, "", `Local )),
                                          ([],
                                            `Apply (`Variable 1685,
                                                     [`Variable 1689])))],
                                   `If (`ApplyPure (`TApp (`Variable 13,
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1691;
                                                      `Variable 1690]),
                                         ([],
                                           `Return `ApplyPure (`TApp (
                                                               `Variable 55,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 1689;
                                                                 `TApp (
                                                                 `Variable 54,
                                                                  [`Type 
                                                                   `MetaTypeVar ...])])),
                                         ([],
                                           `Return `TApp (`Variable 54,
                                                           [`Type `MetaTypeVar ...]))))),
                               None, `Unknown );
                        `Let ((1694, ([_], "", `Local )),
                               ([],
                                 `Apply (`TApp (`Variable 257,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1693; `Variable 1684])))],
                        `Return `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Extend ({"1" => `Variable 1695;
                                                        "2" => `Variable 1694;
                                                        }, None);
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `MetaTypeVar ...;
                                                              "2" => 
                                                              `Present 
                                                              `Application (
                                                              {id = "List"; name = "List"; arity = 
                                                              [(`Type ,
                                                                 (`Unl ,
                                                                   `Any ))]},
                                                               [`Type 
                                                                `MetaTypeVar ...]);
                                                              }, ..., false)])]))),
                    None, `Unknown )],
             `Apply (`TApp (`Variable 257,
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Type `Record ({"1" => `Present `MetaTypeVar ...;
                                              "2" => `Present `Application (
                                                              {id = "List"; name = "List"; arity = 
                                                              [(`Type ,
                                                                 (`Unl ,
                                                                   `Any ))]},
                                                               [`Type 
                                                                `MetaTypeVar ...]);
                                              }, ..., false)]),
                      [`Variable 1697; `Variable 1684]))), None, `Unknown );
  `Fun ((1711, ((a, a) ~> (), "assertEq", `Global )),
         ([(603, (`Unl , `Any ), `Type ...); (604, (`Unl , `Any ), `Row ...)],
           [(1709, (_, "", `Local )); (1710, (_, "", `Local ))],
           ([`Let ((1701, (_, "expected", `Local )),
                    ([], `Return `Variable 1710));
             `Let ((1702, (_, "actual", `Local )),
                    ([], `Return `Variable 1709))],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1701; `Variable 1702]),
                   ([], `Return `Extend ({}, None)),
                   ([`Let ((1708, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4191, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 72,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`Constant `String "Assertion failed."])));
                     `Let ((1707, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4193, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 72,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`Constant `String "Expected:"])));
                     `Let ((1706, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4195, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 72,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`ApplyPure (`TApp (`TAbs ([(4196,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (4197,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 29,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1701])])));
                     `Let ((1705, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4201, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 72,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`Constant `String "but got:"])));
                     `Let ((1704, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4203, (`Unl , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 72,
                                                             [`Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false)]),
                                       [`ApplyPure (`TApp (`TAbs ([(4204,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Type ...);
                                                                   (4205,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                   `TApp (
                                                                   `Variable 29,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)])),
                                                            [`Type `MetaTypeVar ...;
                                                             `Row ({}, ...,
                                                                    false)]),
                                                     [`Variable 1702])])));
                     `Let ((1703, ((), "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(4209, (`Unl , `Any ),
                                                       `Row ...);
                                                     (4210, (`Unl , `Any ),
                                                       `Type ...)],
                                                     `TApp (`Variable 28,
                                                             [`Row ({}, ...,
                                                                    false);
                                                              `Type `MetaTypeVar ...])),
                                              [`Row ({}, ..., false);
                                               `Type `MetaTypeVar ...]),
                                       [`Constant `Int 2])))],
                     `Return `Extend ({}, None))))), None, `Server );
  `Fun ((1717, (((a) -b-> c) -> (a) -b-@ c, "lf", `Global )),
         ([(605, (`Unl , `Any ), `Type ...); (606, (`Unl , `Any ), `Row ...);
           (607, (`Unl , `Any ), `Type ...); (608, (`Unl , `Any ), `Row ...)],
           [(1716, ((_) -> _, "", `Local ))],
           ([`Let ((1712, ((_) -> _, "f", `Local )),
                    ([], `Return `Variable 1716));
             `Fun ((1715, ((_) -> _, "_fun__g126", `Local )),
                    ([], [(1714, (_, "", `Local ))],
                      ([`Let ((1713, (_, "x", `Local )),
                               ([], `Return `Variable 1714))],
                        `Apply (`Variable 1712, [`Variable 1713]))), 
                    None, `Unknown )], `Return `Variable 1715)), None,
         `Unknown );
  `Fun ((1727,
          (((a::Session) ~b~> EndBang) ~b~> ~a::Session, "forkSync", `Global )),
         ([(609, (`Any , `Session ), `Type ...);
           (610, (`Unl , `Any ), `Row ...)],
           [(1726, ((_::Session) ~> EndBang, "", `Local ))],
           ([`Let ((1718, ((_::Session) ~> EndBang, "f", `Local )),
                    ([], `Return `Variable 1726));
             `Let ((1719, (AP (_::Session), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4230, (`Unl , `Any ), `Row ...);
                                             (4231, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 48,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...]), [])));
             `Let ((1720, (AP (_::Session), "ap", `Local )),
                    ([],
                      `Return `TAbs ([(4228, (`Any , `Session ), `Type ...)],
                                      `Variable 1719)));
             `Fun ((1723, (() ~> (), "_fun__g127", `Local )),
                    ([], [],
                      ([`Let ((1721, (_::Session, "c", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(4237,
                                                          (`Unl , `Any ),
                                                          `Row ...);
                                                        (4238,
                                                          (`Any , `Session ),
                                                          `Type ...)],
                                                        `TApp (`Variable 52,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false);
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Row ({}, ..., false);
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 1720])));
                        `Let ((1722, (EndBang, "c", `Local )),
                               ([], `Apply (`Variable 1718, [`Variable 1721])))],
                        `Apply (`TApp (`TAbs ([(4245, (`Unl , `Any ),
                                                 `Row ...)],
                                               `TApp (`Variable 1662,
                                                       [`Row ({}, ..., false)])),
                                        [`Row ({}, ..., false)]),
                                 [`Variable 1722]))), None, `Unknown );
             `Let ((1724, (Location, "", `Local )),
                    ([], `Apply (`Variable 34, [`Extend ({}, None)])));
             `Let ((1725, (Process ({ wild|_ }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 1723; `Variable 1724])))],
             `Apply (`TApp (`TAbs ([(4248, (`Unl , `Any ), `Row ...);
                                    (4249, (`Any , `Session ), `Type ...)],
                                    `TApp (`Variable 53,
                                            [`Row ({}, ..., false);
                                             `Type `MetaTypeVar ...])),
                             [`Row ({}, ..., false); `Type `MetaTypeVar ...]),
                      [`Variable 1720]))), None, `Unknown );
  `Fun ((1735, (((!(a).EndBang) ~b~> EndBang) ~b~> a, "runSync", `Global )),
         ([(611, (`Unl , `Any ), `Type ...); (612, (`Unl , `Any ), `Row ...)],
           [(1734, ((!(_).EndBang) ~> EndBang, "", `Local ))],
           ([`Let ((1728, ((!(_).EndBang) ~> EndBang, "f", `Local )),
                    ([], `Return `Variable 1734));
             `Let ((1729, (~!(_).EndBang, "c", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4257, (`Any , `Session ),
                                               `Type ...);
                                             (4258, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1727,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 1728])));
             `Let ((1732, ((_, ?(()).End), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4262, (`Unl , `Any ), `Row ...);
                                             (4263, (`Any , `Any ), `Type ...);
                                             (4264, (`Any , `Session ),
                                               `Type ...)],
                                             `TApp (`Variable 46,
                                                     [`Row ({}, ..., false);
                                                      `Type `MetaTypeVar ...;
                                                      `Type `MetaTypeVar ...])),
                                      [`Row ({}, ..., false);
                                       `Type `MetaTypeVar ...;
                                       `Type `MetaTypeVar ...]),
                               [`Variable 1729])));
             `Let ((1730, (?(()).End, "c", `Local )),
                    ([], `Return `Project ("2", `Variable 1732)));
             `Let ((1731, (_, "v", `Local )),
                    ([], `Return `Project ("1", `Variable 1732)));
             `Let ((1733, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4270, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1646,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Variable 1730])))], `Return `Variable 1731)),
         None, `Unknown );
  `Fun ((1742, ((() ~> Page) ~> (), "serveThis", `Global )),
         ([(613, (`Unl , `Any ), `Row ...); (614, (`Unl , `Any ), `Row ...)],
           [(1741, (() ~> Page, "", `Local ))],
           ([`Let ((1736, (() ~> Page, "p", `Local )),
                    ([], `Return `Variable 1741));
             `Fun ((1739, ((_, _) ~> Page, "_fun__g128", `Local )),
                    ([],
                      [(1737, (_, "", `Local )); (1738, (_, "", `Local ))],
                      ([], `Apply (`Variable 1736, []))), None, `Unknown );
             `Let ((1740, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(4277, (`Unl , `Any ), `Row ...);
                                             (4278, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1642,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "";
                                `TAbs ([(4280, (`Unl , `Any ), `Type ...);
                                        (4281, (`Unl , `Any ), `Type ...)],
                                        `Variable 1739)])))],
             `Apply (`TApp (`TAbs ([(4290, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 231,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]), []))), None, `Unknown )],
  `Return `Extend ({}, None))
Finishing process MAIN
compiling to IR
compiled IR
([`Alien ((1825, ((), "VirtualDom.VirtualDOM.dummy", `Global )), "dummy",
           "javascript");
  `Alien ((1826,
            ((String, VirtualDom.Doc (a), Process ({ hear:a,wild }), [VirtualDom.Sub (a)]) {:Msg}~> (),
              "VirtualDom.VDom.runDom", `Global )), "runDom", "javascript");
  `Alien ((1827,
            ((VirtualDom.Doc (a)) {:Msg}~> (), "VirtualDom.VDom.updateDom",
              `Global )), "updateDom", "javascript");
  `Alien ((1828, (() ~> Int, "VirtualDom.VDom.getUniqueID", `Global )),
           "getUniqueID", "javascript");
  `Fun ((1833,
          ((a::Any, b::Any) -> (a::Any, b::Any), "VirtualDom.attr", `Global )),
         ([(7197, (`Any , `Any ), `Type ...);
           (7198, (`Any , `Any ), `Type ...);
           (7199, (`Any , `Any ), `Row ...)],
           [(1831, (_::Any, "", `Local )); (1832, (_::Any, "", `Local ))],
           ([`Let ((1829, (_::Any, "VirtualDom.v", `Local )),
                    ([], `Return `Variable 1832));
             `Let ((1830, (_::Any, "VirtualDom.k", `Local )),
                    ([], `Return `Variable 1831))],
             `Return `Extend ({"1" => `Variable 1830; "2" => `Variable 1829; },
                               None))), None, `Unknown );
  `Fun ((1836, ((String) -> (String, String), "Attrs.lang", `Global )),
         ([(6647, (`Unl , `Any ), `Row ...)],
           [(1835, (String, "", `Local ))],
           ([`Let ((1834, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 1835))],
             `Apply (`TApp (`TAbs ([(7207, (`Any , `Any ), `Type ...);
                                    (7208, (`Any , `Any ), `Type ...);
                                    (7209, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "lang"; `Variable 1834]))), 
         None, `Unknown );
  `Fun ((1843,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.bdo", `Global )),
         ([(6648, (`Unl , `Any ), `Type ...);
           (6649, (`Unl , `Any ), `Row ...)],
           [(1840, ([(String, String)], "", `Local ));
            (1841, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1842, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1837,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1842));
             `Let ((1838,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1841));
             `Let ((1839, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1840))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1839; "children" => 
                                                                    `Variable 1837;
                                                                    "eventHandlers" => 
                                                                    `Variable 1838;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "bdo";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1850,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.abbr", `Global )),
         ([(6652, (`Unl , `Any ), `Type ...);
           (6653, (`Unl , `Any ), `Row ...)],
           [(1847, ([(String, String)], "", `Local ));
            (1848, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1849, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1844,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1849));
             `Let ((1845,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1848));
             `Let ((1846, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1847))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1846; "children" => 
                                                                    `Variable 1844;
                                                                    "eventHandlers" => 
                                                                    `Variable 1845;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "abbr";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1857,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.ul", `Global )),
         ([(6656, (`Unl , `Any ), `Type ...);
           (6657, (`Unl , `Any ), `Row ...)],
           [(1854, ([(String, String)], "", `Local ));
            (1855, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1856, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1851,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1856));
             `Let ((1852,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1855));
             `Let ((1853, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1854))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1853; "children" => 
                                                                    `Variable 1851;
                                                                    "eventHandlers" => 
                                                                    `Variable 1852;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "ul";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1864,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.style", `Global )),
         ([(6660, (`Unl , `Any ), `Type ...);
           (6661, (`Unl , `Any ), `Row ...)],
           [(1861, ([(String, String)], "", `Local ));
            (1862, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1863, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1858,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1863));
             `Let ((1859,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1862));
             `Let ((1860, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1861))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1860; "children" => 
                                                                    `Variable 1858;
                                                                    "eventHandlers" => 
                                                                    `Variable 1859;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "style";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1871,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.footer", `Global )),
         ([(6664, (`Unl , `Any ), `Type ...);
           (6665, (`Unl , `Any ), `Row ...)],
           [(1868, ([(String, String)], "", `Local ));
            (1869, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1870, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1865,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1870));
             `Let ((1866,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1869));
             `Let ((1867, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1868))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1867; "children" => 
                                                                    `Variable 1865;
                                                                    "eventHandlers" => 
                                                                    `Variable 1866;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "footer";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1878,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.small", `Global )),
         ([(6668, (`Unl , `Any ), `Type ...);
           (6669, (`Unl , `Any ), `Row ...)],
           [(1875, ([(String, String)], "", `Local ));
            (1876, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1877, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1872,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1877));
             `Let ((1873,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1876));
             `Let ((1874, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1875))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1874; "children" => 
                                                                    `Variable 1872;
                                                                    "eventHandlers" => 
                                                                    `Variable 1873;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "small";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1885,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.col", `Global )),
         ([(6672, (`Unl , `Any ), `Type ...);
           (6673, (`Unl , `Any ), `Row ...)],
           [(1882, ([(String, String)], "", `Local ));
            (1883, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1884, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1879,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1884));
             `Let ((1880,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1883));
             `Let ((1881, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1882))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1881; "children" => 
                                                                    `Variable 1879;
                                                                    "eventHandlers" => 
                                                                    `Variable 1880;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "col";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1892,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h2", `Global )),
         ([(6676, (`Unl , `Any ), `Type ...);
           (6677, (`Unl , `Any ), `Row ...)],
           [(1889, ([(String, String)], "", `Local ));
            (1890, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1891, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1886,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1891));
             `Let ((1887,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1890));
             `Let ((1888, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1889))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1888; "children" => 
                                                                    `Variable 1886;
                                                                    "eventHandlers" => 
                                                                    `Variable 1887;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h2";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1899,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.wbr", `Global )),
         ([(6680, (`Unl , `Any ), `Type ...);
           (6681, (`Unl , `Any ), `Row ...)],
           [(1896, ([(String, String)], "", `Local ));
            (1897, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1898, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1893,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1898));
             `Let ((1894,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1897));
             `Let ((1895, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1896))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1895; "children" => 
                                                                    `Variable 1893;
                                                                    "eventHandlers" => 
                                                                    `Variable 1894;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "wbr";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1902, ((String) -> (String, String), "Attrs.value", `Global )),
         ([(6684, (`Unl , `Any ), `Row ...)],
           [(1901, (String, "", `Local ))],
           ([`Let ((1900, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 1901))],
             `Apply (`TApp (`TAbs ([(7307, (`Any , `Any ), `Type ...);
                                    (7308, (`Any , `Any ), `Type ...);
                                    (7309, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "value"; `Variable 1900]))), 
         None, `Unknown );
  `Fun ((1909,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h4", `Global )),
         ([(6685, (`Unl , `Any ), `Type ...);
           (6686, (`Unl , `Any ), `Row ...)],
           [(1906, ([(String, String)], "", `Local ));
            (1907, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1908, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1903,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1908));
             `Let ((1904,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1907));
             `Let ((1905, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1906))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1905; "children" => 
                                                                    `Variable 1903;
                                                                    "eventHandlers" => 
                                                                    `Variable 1904;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h4";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1916,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.s", `Global )),
         ([(6689, (`Unl , `Any ), `Type ...);
           (6690, (`Unl , `Any ), `Row ...)],
           [(1913, ([(String, String)], "", `Local ));
            (1914, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1915, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1910,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1915));
             `Let ((1911,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1914));
             `Let ((1912, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1913))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1912; "children" => 
                                                                    `Variable 1910;
                                                                    "eventHandlers" => 
                                                                    `Variable 1911;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "s";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1923,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h1", `Global )),
         ([(6693, (`Unl , `Any ), `Type ...);
           (6694, (`Unl , `Any ), `Row ...)],
           [(1920, ([(String, String)], "", `Local ));
            (1921, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1922, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1917,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1922));
             `Let ((1918,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1921));
             `Let ((1919, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1920))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1919; "children" => 
                                                                    `Variable 1917;
                                                                    "eventHandlers" => 
                                                                    `Variable 1918;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h1";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1930,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.isindex", `Global )),
         ([(6697, (`Unl , `Any ), `Type ...);
           (6698, (`Unl , `Any ), `Row ...)],
           [(1927, ([(String, String)], "", `Local ));
            (1928, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1929, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1924,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1929));
             `Let ((1925,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1928));
             `Let ((1926, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1927))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1926; "children" => 
                                                                    `Variable 1924;
                                                                    "eventHandlers" => 
                                                                    `Variable 1925;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "isindex";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1937,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.xmp", `Global )),
         ([(6701, (`Unl , `Any ), `Type ...);
           (6702, (`Unl , `Any ), `Row ...)],
           [(1934, ([(String, String)], "", `Local ));
            (1935, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1936, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1931,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1936));
             `Let ((1932,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1935));
             `Let ((1933, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1934))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1933; "children" => 
                                                                    `Variable 1931;
                                                                    "eventHandlers" => 
                                                                    `Variable 1932;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "xmp";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1944,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.object", `Global )),
         ([(6705, (`Unl , `Any ), `Type ...);
           (6706, (`Unl , `Any ), `Row ...)],
           [(1941, ([(String, String)], "", `Local ));
            (1942, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1943, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1938,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1943));
             `Let ((1939,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1942));
             `Let ((1940, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1941))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1940; "children" => 
                                                                    `Variable 1938;
                                                                    "eventHandlers" => 
                                                                    `Variable 1939;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "object";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1951,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.script", `Global )),
         ([(6709, (`Unl , `Any ), `Type ...);
           (6710, (`Unl , `Any ), `Row ...)],
           [(1948, ([(String, String)], "", `Local ));
            (1949, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1950, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1945,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1950));
             `Let ((1946,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1949));
             `Let ((1947, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1948))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1947; "children" => 
                                                                    `Variable 1945;
                                                                    "eventHandlers" => 
                                                                    `Variable 1946;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "script";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1958,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.blink", `Global )),
         ([(6713, (`Unl , `Any ), `Type ...);
           (6714, (`Unl , `Any ), `Row ...)],
           [(1955, ([(String, String)], "", `Local ));
            (1956, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1957, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1952,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1957));
             `Let ((1953,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1956));
             `Let ((1954, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1955))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1954; "children" => 
                                                                    `Variable 1952;
                                                                    "eventHandlers" => 
                                                                    `Variable 1953;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "blink";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1965,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.marquee", `Global )),
         ([(6717, (`Unl , `Any ), `Type ...);
           (6718, (`Unl , `Any ), `Row ...)],
           [(1962, ([(String, String)], "", `Local ));
            (1963, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1964, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1959,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1964));
             `Let ((1960,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1963));
             `Let ((1961, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1962))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1961; "children" => 
                                                                    `Variable 1959;
                                                                    "eventHandlers" => 
                                                                    `Variable 1960;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "marquee";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1972,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.em", `Global )),
         ([(6721, (`Unl , `Any ), `Type ...);
           (6722, (`Unl , `Any ), `Row ...)],
           [(1969, ([(String, String)], "", `Local ));
            (1970, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1971, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1966,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1971));
             `Let ((1967,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1970));
             `Let ((1968, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1969))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1968; "children" => 
                                                                    `Variable 1966;
                                                                    "eventHandlers" => 
                                                                    `Variable 1967;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "em";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1979,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.li", `Global )),
         ([(6725, (`Unl , `Any ), `Type ...);
           (6726, (`Unl , `Any ), `Row ...)],
           [(1976, ([(String, String)], "", `Local ));
            (1977, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1978, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1973,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1978));
             `Let ((1974,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1977));
             `Let ((1975, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1976))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1975; "children" => 
                                                                    `Variable 1973;
                                                                    "eventHandlers" => 
                                                                    `Variable 1974;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "li";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1982, ((String) -> (String, String), "Attrs.color", `Global )),
         ([(6729, (`Unl , `Any ), `Row ...)],
           [(1981, (String, "", `Local ))],
           ([`Let ((1980, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 1981))],
             `Apply (`TApp (`TAbs ([(7427, (`Any , `Any ), `Type ...);
                                    (7428, (`Any , `Any ), `Type ...);
                                    (7429, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "color"; `Variable 1980]))), 
         None, `Unknown );
  `Fun ((1989,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.code", `Global )),
         ([(6730, (`Unl , `Any ), `Type ...);
           (6731, (`Unl , `Any ), `Row ...)],
           [(1986, ([(String, String)], "", `Local ));
            (1987, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1988, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1983,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1988));
             `Let ((1984,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1987));
             `Let ((1985, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1986))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1985; "children" => 
                                                                    `Variable 1983;
                                                                    "eventHandlers" => 
                                                                    `Variable 1984;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "code";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((1996,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.video", `Global )),
         ([(6734, (`Unl , `Any ), `Type ...);
           (6735, (`Unl , `Any ), `Row ...)],
           [(1993, ([(String, String)], "", `Local ));
            (1994, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (1995, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1990,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 1995));
             `Let ((1991,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 1994));
             `Let ((1992, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 1993))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1992; "children" => 
                                                                    `Variable 1990;
                                                                    "eventHandlers" => 
                                                                    `Variable 1991;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "video";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2003,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.nextid", `Global )),
         ([(6738, (`Unl , `Any ), `Type ...);
           (6739, (`Unl , `Any ), `Row ...)],
           [(2000, ([(String, String)], "", `Local ));
            (2001, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2002, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((1997,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2002));
             `Let ((1998,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2001));
             `Let ((1999, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2000))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 1999; "children" => 
                                                                    `Variable 1997;
                                                                    "eventHandlers" => 
                                                                    `Variable 1998;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "nextid";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2010,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.colgroup", `Global )),
         ([(6742, (`Unl , `Any ), `Type ...);
           (6743, (`Unl , `Any ), `Row ...)],
           [(2007, ([(String, String)], "", `Local ));
            (2008, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2009, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2004,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2009));
             `Let ((2005,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2008));
             `Let ((2006, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2007))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2006; "children" => 
                                                                    `Variable 2004;
                                                                    "eventHandlers" => 
                                                                    `Variable 2005;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "colgroup";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2017,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.details", `Global )),
         ([(6746, (`Unl , `Any ), `Type ...);
           (6747, (`Unl , `Any ), `Row ...)],
           [(2014, ([(String, String)], "", `Local ));
            (2015, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2016, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2011,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2016));
             `Let ((2012,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2015));
             `Let ((2013, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2014))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2013; "children" => 
                                                                    `Variable 2011;
                                                                    "eventHandlers" => 
                                                                    `Variable 2012;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "details";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2020,
          ((a::Any) -> [|VirtualDom.StringHandler:(String, a::Any)|_::Any|],
            "Events.onKeyPress", `Global )),
         ([(7484, (`Any , `Any ), `Type ...);
           (7485, (`Any , `Any ), `Row ...);
           (7487, (`Any , `Any ), `Row ...)],
           [(2019, (_::Any, "", `Local ))],
           ([`Let ((2018, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2019))],
             `Return `Inject ("VirtualDom.StringHandler",
                               `Extend ({"1" => `Constant `String "onkeypress";
                                         "2" => `Variable 2018; }, None),
                               [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2023,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseLeave", `Global )),
         ([(7491, (`Any , `Any ), `Type ...);
           (7492, (`Any , `Any ), `Row ...);
           (7494, (`Any , `Any ), `Row ...)],
           [(2022, (_::Any, "", `Local ))],
           ([`Let ((2021, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2022))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmouseleave";
                                         "2" => `Variable 2021; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2030,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.svg", `Global )),
         ([(6750, (`Unl , `Any ), `Type ...);
           (6751, (`Unl , `Any ), `Row ...)],
           [(2027, ([(String, String)], "", `Local ));
            (2028, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2029, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2024,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2029));
             `Let ((2025,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2028));
             `Let ((2026, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2027))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2026; "children" => 
                                                                    `Variable 2024;
                                                                    "eventHandlers" => 
                                                                    `Variable 2025;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "svg";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2037,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.tbody", `Global )),
         ([(6754, (`Unl , `Any ), `Type ...);
           (6755, (`Unl , `Any ), `Row ...)],
           [(2034, ([(String, String)], "", `Local ));
            (2035, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2036, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2031,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2036));
             `Let ((2032,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2035));
             `Let ((2033, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2034))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2033; "children" => 
                                                                    `Variable 2031;
                                                                    "eventHandlers" => 
                                                                    `Variable 2032;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "tbody";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2044,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.nobr", `Global )),
         ([(6758, (`Unl , `Any ), `Type ...);
           (6759, (`Unl , `Any ), `Row ...)],
           [(2041, ([(String, String)], "", `Local ));
            (2042, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2043, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2038,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2043));
             `Let ((2039,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2042));
             `Let ((2040, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2041))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2040; "children" => 
                                                                    `Variable 2038;
                                                                    "eventHandlers" => 
                                                                    `Variable 2039;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "nobr";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2051,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.applet", `Global )),
         ([(6762, (`Unl , `Any ), `Type ...);
           (6763, (`Unl , `Any ), `Row ...)],
           [(2048, ([(String, String)], "", `Local ));
            (2049, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2050, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2045,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2050));
             `Let ((2046,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2049));
             `Let ((2047, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2048))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2047; "children" => 
                                                                    `Variable 2045;
                                                                    "eventHandlers" => 
                                                                    `Variable 2046;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "applet";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2058,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.noscript", `Global )),
         ([(6766, (`Unl , `Any ), `Type ...);
           (6767, (`Unl , `Any ), `Row ...)],
           [(2055, ([(String, String)], "", `Local ));
            (2056, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2057, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2052,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2057));
             `Let ((2053,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2056));
             `Let ((2054, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2055))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2054; "children" => 
                                                                    `Variable 2052;
                                                                    "eventHandlers" => 
                                                                    `Variable 2053;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "noscript";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2065,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.dd", `Global )),
         ([(6770, (`Unl , `Any ), `Type ...);
           (6771, (`Unl , `Any ), `Row ...)],
           [(2062, ([(String, String)], "", `Local ));
            (2063, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2064, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2059,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2064));
             `Let ((2060,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2063));
             `Let ((2061, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2062))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2061; "children" => 
                                                                    `Variable 2059;
                                                                    "eventHandlers" => 
                                                                    `Variable 2060;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "dd";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2072,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.body", `Global )),
         ([(6774, (`Unl , `Any ), `Type ...);
           (6775, (`Unl , `Any ), `Row ...)],
           [(2069, ([(String, String)], "", `Local ));
            (2070, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2071, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2066,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2071));
             `Let ((2067,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2070));
             `Let ((2068, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2069))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2068; "children" => 
                                                                    `Variable 2066;
                                                                    "eventHandlers" => 
                                                                    `Variable 2067;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "body";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2079,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.td", `Global )),
         ([(6778, (`Unl , `Any ), `Type ...);
           (6779, (`Unl , `Any ), `Row ...)],
           [(2076, ([(String, String)], "", `Local ));
            (2077, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2078, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2073,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2078));
             `Let ((2074,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2077));
             `Let ((2075, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2076))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2075; "children" => 
                                                                    `Variable 2073;
                                                                    "eventHandlers" => 
                                                                    `Variable 2074;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "td";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2086,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.embed", `Global )),
         ([(6782, (`Unl , `Any ), `Type ...);
           (6783, (`Unl , `Any ), `Row ...)],
           [(2083, ([(String, String)], "", `Local ));
            (2084, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2085, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2080,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2085));
             `Let ((2081,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2084));
             `Let ((2082, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2083))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2082; "children" => 
                                                                    `Variable 2080;
                                                                    "eventHandlers" => 
                                                                    `Variable 2081;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "embed";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2087, (() ~> Int, "VirtualDom.uniqueID", `Global )),
         ([], [], ([], `Apply (`Variable 1828, []))), None, `Unknown );
  `Fun ((2091,
          ((a::Any) ~> [|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, a::Any)|_::Any|])|_::Any|],
            "VirtualDom.getKeyCode", `Global )),
         ([(7592, (`Any , `Any ), `Type ...);
           (7597, (`Any , `Any ), `Row ...);
           (7598, (`Any , `Any ), `Row ...)],
           [(2090, (_::Any, "", `Local ))],
           ([`Let ((2088, (_::Any, "VirtualDom.f", `Local )),
                    ([], `Return `Variable 2090));
             `Let ((2089, (Int, "", `Local )),
                    ([], `Apply (`Variable 2087, [])))],
             `Return `Inject ("VirtualDom.HandlerSub",
                               `Extend ({"1" => `Variable 2089; "2" => 
                                                                `Inject (
                                                                "VirtualDom.StringHandler",
                                                                 `Extend (
                                                                 {"1" => 
                                                                  `Constant 
                                                                  `String "keypress";
                                                                  "2" => 
                                                                  `Variable 2088;
                                                                  }, 
                                                                  None),
                                                                 [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]);
                                                                }, None),
                               [|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, _::Any)|_::Any|])|_::Any|]))),
         None, `Unknown );
  `Fun ((2098,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.span", `Global )),
         ([(6786, (`Unl , `Any ), `Type ...);
           (6787, (`Unl , `Any ), `Row ...)],
           [(2095, ([(String, String)], "", `Local ));
            (2096, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2097, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2092,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2097));
             `Let ((2093,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2096));
             `Let ((2094, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2095))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2094; "children" => 
                                                                    `Variable 2092;
                                                                    "eventHandlers" => 
                                                                    `Variable 2093;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "span";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2101,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseOver", `Global )),
         ([(7612, (`Any , `Any ), `Type ...);
           (7613, (`Any , `Any ), `Row ...);
           (7615, (`Any , `Any ), `Row ...)],
           [(2100, (_::Any, "", `Local ))],
           ([`Let ((2099, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2100))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmouseover";
                                         "2" => `Variable 2099; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2108,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.q", `Global )),
         ([(6790, (`Unl , `Any ), `Type ...);
           (6791, (`Unl , `Any ), `Row ...)],
           [(2105, ([(String, String)], "", `Local ));
            (2106, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2107, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2102,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2107));
             `Let ((2103,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2106));
             `Let ((2104, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2105))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2104; "children" => 
                                                                    `Variable 2102;
                                                                    "eventHandlers" => 
                                                                    `Variable 2103;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "q";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2115,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.aside", `Global )),
         ([(6794, (`Unl , `Any ), `Type ...);
           (6795, (`Unl , `Any ), `Row ...)],
           [(2112, ([(String, String)], "", `Local ));
            (2113, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2114, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2109,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2114));
             `Let ((2110,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2113));
             `Let ((2111, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2112))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2111; "children" => 
                                                                    `Variable 2109;
                                                                    "eventHandlers" => 
                                                                    `Variable 2110;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "aside";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2122,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.sup", `Global )),
         ([(6798, (`Unl , `Any ), `Type ...);
           (6799, (`Unl , `Any ), `Row ...)],
           [(2119, ([(String, String)], "", `Local ));
            (2120, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2121, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2116,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2121));
             `Let ((2117,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2120));
             `Let ((2118, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2119))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2118; "children" => 
                                                                    `Variable 2116;
                                                                    "eventHandlers" => 
                                                                    `Variable 2117;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "sup";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2129,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.iframe", `Global )),
         ([(6802, (`Unl , `Any ), `Type ...);
           (6803, (`Unl , `Any ), `Row ...)],
           [(2126, ([(String, String)], "", `Local ));
            (2127, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2128, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2123,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2128));
             `Let ((2124,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2127));
             `Let ((2125, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2126))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2125; "children" => 
                                                                    `Variable 2123;
                                                                    "eventHandlers" => 
                                                                    `Variable 2124;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "iframe";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2132,
          ((a::Any) -> [|VirtualDom.StringHandler:(String, a::Any)|_::Any|],
            "Events.onKeyUp", `Global )),
         ([(7659, (`Any , `Any ), `Type ...);
           (7660, (`Any , `Any ), `Row ...);
           (7662, (`Any , `Any ), `Row ...)],
           [(2131, (_::Any, "", `Local ))],
           ([`Let ((2130, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2131))],
             `Return `Inject ("VirtualDom.StringHandler",
                               `Extend ({"1" => `Constant `String "onkeyup"; 
                                        "2" => `Variable 2130; }, None),
                               [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2139,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.div", `Global )),
         ([(6806, (`Unl , `Any ), `Type ...);
           (6807, (`Unl , `Any ), `Row ...)],
           [(2136, ([(String, String)], "", `Local ));
            (2137, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2138, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2133,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2138));
             `Let ((2134,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2137));
             `Let ((2135, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2136))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2135; "children" => 
                                                                    `Variable 2133;
                                                                    "eventHandlers" => 
                                                                    `Variable 2134;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "div";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2146,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.hgroup", `Global )),
         ([(6810, (`Unl , `Any ), `Type ...);
           (6811, (`Unl , `Any ), `Row ...)],
           [(2143, ([(String, String)], "", `Local ));
            (2144, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2145, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2140,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2145));
             `Let ((2141,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2144));
             `Let ((2142, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2143))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2142; "children" => 
                                                                    `Variable 2140;
                                                                    "eventHandlers" => 
                                                                    `Variable 2141;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "hgroup";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2152,
          ((a::Any, b::Any) ~> [|VirtualDom.HandlerSub:(Int, [|VirtualDom.TimeHandler:(a::Any, b::Any)|_::Any|])|_::Any|],
            "VirtualDom.getEvery", `Global )),
         ([(7686, (`Any , `Any ), `Type ...);
           (7687, (`Any , `Any ), `Type ...);
           (7692, (`Any , `Any ), `Row ...);
           (7693, (`Any , `Any ), `Row ...)],
           [(2150, (_::Any, "", `Local )); (2151, (_::Any, "", `Local ))],
           ([`Let ((2147, (_::Any, "VirtualDom.f", `Local )),
                    ([], `Return `Variable 2151));
             `Let ((2148, (_::Any, "VirtualDom.interval", `Local )),
                    ([], `Return `Variable 2150));
             `Let ((2149, (Int, "", `Local )),
                    ([], `Apply (`Variable 2087, [])))],
             `Return `Inject ("VirtualDom.HandlerSub",
                               `Extend ({"1" => `Variable 2149; "2" => 
                                                                `Inject (
                                                                "VirtualDom.TimeHandler",
                                                                 `Extend (
                                                                 {"1" => 
                                                                  `Variable 2148;
                                                                  "2" => 
                                                                  `Variable 2147;
                                                                  }, 
                                                                  None),
                                                                 [|VirtualDom.TimeHandler:(_::Any, _::Any)|_::Any|]);
                                                                }, None),
                               [|VirtualDom.HandlerSub:(Int, [|VirtualDom.TimeHandler:(_::Any, _::Any)|_::Any|])|_::Any|]))),
         None, `Unknown );
  `Fun ((2159,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.samp", `Global )),
         ([(6814, (`Unl , `Any ), `Type ...);
           (6815, (`Unl , `Any ), `Row ...)],
           [(2156, ([(String, String)], "", `Local ));
            (2157, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2158, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2153,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2158));
             `Let ((2154,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2157));
             `Let ((2155, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2156))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2155; "children" => 
                                                                    `Variable 2153;
                                                                    "eventHandlers" => 
                                                                    `Variable 2154;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "samp";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2166,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.tt", `Global )),
         ([(6818, (`Unl , `Any ), `Type ...);
           (6819, (`Unl , `Any ), `Row ...)],
           [(2163, ([(String, String)], "", `Local ));
            (2164, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2165, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2160,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2165));
             `Let ((2161,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2164));
             `Let ((2162, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2163))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2162; "children" => 
                                                                    `Variable 2160;
                                                                    "eventHandlers" => 
                                                                    `Variable 2161;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "tt";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2173,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.form", `Global )),
         ([(6822, (`Unl , `Any ), `Type ...);
           (6823, (`Unl , `Any ), `Row ...)],
           [(2170, ([(String, String)], "", `Local ));
            (2171, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2172, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2167,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2172));
             `Let ((2168,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2171));
             `Let ((2169, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2170))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2169; "children" => 
                                                                    `Variable 2167;
                                                                    "eventHandlers" => 
                                                                    `Variable 2168;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "form";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2180,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.var_", `Global )),
         ([(6826, (`Unl , `Any ), `Type ...);
           (6827, (`Unl , `Any ), `Row ...)],
           [(2177, ([(String, String)], "", `Local ));
            (2178, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2179, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2174,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2179));
             `Let ((2175,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2178));
             `Let ((2176, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2177))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2176; "children" => 
                                                                    `Variable 2174;
                                                                    "eventHandlers" => 
                                                                    `Variable 2175;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "var";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2187,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.u", `Global )),
         ([(6830, (`Unl , `Any ), `Type ...);
           (6831, (`Unl , `Any ), `Row ...)],
           [(2184, ([(String, String)], "", `Local ));
            (2185, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2186, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2181,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2186));
             `Let ((2182,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2185));
             `Let ((2183, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2184))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2183; "children" => 
                                                                    `Variable 2181;
                                                                    "eventHandlers" => 
                                                                    `Variable 2182;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "u";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2194,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.label", `Global )),
         ([(6834, (`Unl , `Any ), `Type ...);
           (6835, (`Unl , `Any ), `Row ...)],
           [(2191, ([(String, String)], "", `Local ));
            (2192, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2193, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2188,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2193));
             `Let ((2189,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2192));
             `Let ((2190, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2191))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2190; "children" => 
                                                                    `Variable 2188;
                                                                    "eventHandlers" => 
                                                                    `Variable 2189;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "label";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2201,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.section", `Global )),
         ([(6838, (`Unl , `Any ), `Type ...);
           (6839, (`Unl , `Any ), `Row ...)],
           [(2198, ([(String, String)], "", `Local ));
            (2199, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2200, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2195,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2200));
             `Let ((2196,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2199));
             `Let ((2197, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2198))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2197; "children" => 
                                                                    `Variable 2195;
                                                                    "eventHandlers" => 
                                                                    `Variable 2196;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "section";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2208,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.spacer", `Global )),
         ([(6842, (`Unl , `Any ), `Type ...);
           (6843, (`Unl , `Any ), `Row ...)],
           [(2205, ([(String, String)], "", `Local ));
            (2206, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2207, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2202,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2207));
             `Let ((2203,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2206));
             `Let ((2204, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2205))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2204; "children" => 
                                                                    `Variable 2202;
                                                                    "eventHandlers" => 
                                                                    `Variable 2203;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "spacer";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2211, ((String) -> (String, String), "Attrs.placeholder", `Global )),
         ([(6846, (`Unl , `Any ), `Row ...)],
           [(2210, (String, "", `Local ))],
           ([`Let ((2209, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2210))],
             `Apply (`TApp (`TAbs ([(7781, (`Any , `Any ), `Type ...);
                                    (7782, (`Any , `Any ), `Type ...);
                                    (7783, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "placeholder"; `Variable 2209]))),
         None, `Unknown );
  `Fun ((2218,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.ins", `Global )),
         ([(6847, (`Unl , `Any ), `Type ...);
           (6848, (`Unl , `Any ), `Row ...)],
           [(2215, ([(String, String)], "", `Local ));
            (2216, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2217, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2212,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2217));
             `Let ((2213,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2216));
             `Let ((2214, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2215))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2214; "children" => 
                                                                    `Variable 2212;
                                                                    "eventHandlers" => 
                                                                    `Variable 2213;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "ins";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2225,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.fieldset", `Global )),
         ([(6851, (`Unl , `Any ), `Type ...);
           (6852, (`Unl , `Any ), `Row ...)],
           [(2222, ([(String, String)], "", `Local ));
            (2223, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2224, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2219,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2224));
             `Let ((2220,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2223));
             `Let ((2221, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2222))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2221; "children" => 
                                                                    `Variable 2219;
                                                                    "eventHandlers" => 
                                                                    `Variable 2220;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "fieldset";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2232,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.del", `Global )),
         ([(6855, (`Unl , `Any ), `Type ...);
           (6856, (`Unl , `Any ), `Row ...)],
           [(2229, ([(String, String)], "", `Local ));
            (2230, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2231, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2226,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2231));
             `Let ((2227,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2230));
             `Let ((2228, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2229))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2228; "children" => 
                                                                    `Variable 2226;
                                                                    "eventHandlers" => 
                                                                    `Variable 2227;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "del";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2239,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.big", `Global )),
         ([(6859, (`Unl , `Any ), `Type ...);
           (6860, (`Unl , `Any ), `Row ...)],
           [(2236, ([(String, String)], "", `Local ));
            (2237, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2238, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2233,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2238));
             `Let ((2234,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2237));
             `Let ((2235, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2236))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2235; "children" => 
                                                                    `Variable 2233;
                                                                    "eventHandlers" => 
                                                                    `Variable 2234;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "big";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2246,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.header", `Global )),
         ([(6863, (`Unl , `Any ), `Type ...);
           (6864, (`Unl , `Any ), `Row ...)],
           [(2243, ([(String, String)], "", `Local ));
            (2244, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2245, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2240,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2245));
             `Let ((2241,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2244));
             `Let ((2242, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2243))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2242; "children" => 
                                                                    `Variable 2240;
                                                                    "eventHandlers" => 
                                                                    `Variable 2241;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "header";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2253,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.meta", `Global )),
         ([(6867, (`Unl , `Any ), `Type ...);
           (6868, (`Unl , `Any ), `Row ...)],
           [(2250, ([(String, String)], "", `Local ));
            (2251, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2252, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2247,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2252));
             `Let ((2248,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2251));
             `Let ((2249, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2250))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2249; "children" => 
                                                                    `Variable 2247;
                                                                    "eventHandlers" => 
                                                                    `Variable 2248;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "meta";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2260,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.pre", `Global )),
         ([(6871, (`Unl , `Any ), `Type ...);
           (6872, (`Unl , `Any ), `Row ...)],
           [(2257, ([(String, String)], "", `Local ));
            (2258, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2259, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2254,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2259));
             `Let ((2255,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2258));
             `Let ((2256, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2257))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2256; "children" => 
                                                                    `Variable 2254;
                                                                    "eventHandlers" => 
                                                                    `Variable 2255;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "pre";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2263,
          ((a::Any) -> [|VirtualDom.StringHandler:(String, a::Any)|_::Any|],
            "Events.mousePos", `Global )),
         ([(7858, (`Any , `Any ), `Type ...);
           (7859, (`Any , `Any ), `Row ...);
           (7861, (`Any , `Any ), `Row ...)],
           [(2262, (_::Any, "", `Local ))],
           ([`Let ((2261, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2262))],
             `Return `Inject ("VirtualDom.StringHandler",
                               `Extend ({"1" => `Constant `String "mouseListener";
                                         "2" => `Variable 2261; }, None),
                               [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2270,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.p", `Global )),
         ([(6875, (`Unl , `Any ), `Type ...);
           (6876, (`Unl , `Any ), `Row ...)],
           [(2267, ([(String, String)], "", `Local ));
            (2268, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2269, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2264,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2269));
             `Let ((2265,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2268));
             `Let ((2266, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2267))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2266; "children" => 
                                                                    `Variable 2264;
                                                                    "eventHandlers" => 
                                                                    `Variable 2265;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "p";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2277,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.audio", `Global )),
         ([(6879, (`Unl , `Any ), `Type ...);
           (6880, (`Unl , `Any ), `Row ...)],
           [(2274, ([(String, String)], "", `Local ));
            (2275, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2276, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2271,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2276));
             `Let ((2272,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2275));
             `Let ((2273, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2274))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2273; "children" => 
                                                                    `Variable 2271;
                                                                    "eventHandlers" => 
                                                                    `Variable 2272;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "audio";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2284,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.th", `Global )),
         ([(6883, (`Unl , `Any ), `Type ...);
           (6884, (`Unl , `Any ), `Row ...)],
           [(2281, ([(String, String)], "", `Local ));
            (2282, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2283, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2278,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2283));
             `Let ((2279,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2282));
             `Let ((2280, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2281))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2280; "children" => 
                                                                    `Variable 2278;
                                                                    "eventHandlers" => 
                                                                    `Variable 2279;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "th";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2291,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.figcaption", `Global )),
         ([(6887, (`Unl , `Any ), `Type ...);
           (6888, (`Unl , `Any ), `Row ...)],
           [(2288, ([(String, String)], "", `Local ));
            (2289, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2290, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2285,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2290));
             `Let ((2286,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2289));
             `Let ((2287, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2288))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2287; "children" => 
                                                                    `Variable 2285;
                                                                    "eventHandlers" => 
                                                                    `Variable 2286;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "figcaption";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2298,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.i", `Global )),
         ([(6891, (`Unl , `Any ), `Type ...);
           (6892, (`Unl , `Any ), `Row ...)],
           [(2295, ([(String, String)], "", `Local ));
            (2296, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2297, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2292,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2297));
             `Let ((2293,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2296));
             `Let ((2294, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2295))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2294; "children" => 
                                                                    `Variable 2292;
                                                                    "eventHandlers" => 
                                                                    `Variable 2293;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "i";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2305,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.br", `Global )),
         ([(6895, (`Unl , `Any ), `Type ...);
           (6896, (`Unl , `Any ), `Row ...)],
           [(2302, ([(String, String)], "", `Local ));
            (2303, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2304, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2299,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2304));
             `Let ((2300,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2303));
             `Let ((2301, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2302))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2301; "children" => 
                                                                    `Variable 2299;
                                                                    "eventHandlers" => 
                                                                    `Variable 2300;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "br";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2308, ((String) -> (String, String), "Attrs.class", `Global )),
         ([(6899, (`Unl , `Any ), `Row ...)],
           [(2307, (String, "", `Local ))],
           ([`Let ((2306, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2307))],
             `Apply (`TApp (`TAbs ([(7928, (`Any , `Any ), `Type ...);
                                    (7929, (`Any , `Any ), `Type ...);
                                    (7930, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "className"; `Variable 2306]))),
         None, `Unknown );
  `Fun ((2315,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.rp", `Global )),
         ([(6900, (`Unl , `Any ), `Type ...);
           (6901, (`Unl , `Any ), `Row ...)],
           [(2312, ([(String, String)], "", `Local ));
            (2313, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2314, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2309,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2314));
             `Let ((2310,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2313));
             `Let ((2311, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2312))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2311; "children" => 
                                                                    `Variable 2309;
                                                                    "eventHandlers" => 
                                                                    `Variable 2310;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "rp";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2322,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.optgroup", `Global )),
         ([(6904, (`Unl , `Any ), `Type ...);
           (6905, (`Unl , `Any ), `Row ...)],
           [(2319, ([(String, String)], "", `Local ));
            (2320, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2321, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2316,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2321));
             `Let ((2317,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2320));
             `Let ((2318, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2319))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2318; "children" => 
                                                                    `Variable 2316;
                                                                    "eventHandlers" => 
                                                                    `Variable 2317;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "optgroup";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2325, ((String) -> (String, String), "Attrs.id", `Global )),
         ([(6908, (`Unl , `Any ), `Row ...)],
           [(2324, (String, "", `Local ))],
           ([`Let ((2323, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2324))],
             `Apply (`TApp (`TAbs ([(7958, (`Any , `Any ), `Type ...);
                                    (7959, (`Any , `Any ), `Type ...);
                                    (7960, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "id"; `Variable 2323]))), None,
         `Unknown );
  `Fun ((2334,
          ((a::Any, b::Any, c::Any, d::Any) -> [|VirtualDom.DocTagNode:(attrs:b::Any,children:d::Any,eventHandlers:c::Any,tagName:a::Any)|_::Any|],
            "VirtualDom.tag", `Global )),
         ([(7965, (`Any , `Any ), `Type ...);
           (7966, (`Any , `Any ), `Type ...);
           (7967, (`Any , `Any ), `Type ...);
           (7968, (`Any , `Any ), `Type ...);
           (7969, (`Any , `Any ), `Row ...);
           (7971, (`Any , `Any ), `Row ...)],
           [(2330, (_::Any, "", `Local )); (2331, (_::Any, "", `Local ));
            (2332, (_::Any, "", `Local )); (2333, (_::Any, "", `Local ))],
           ([`Let ((2326, (_::Any, "VirtualDom.childrenOfTag", `Local )),
                    ([], `Return `Variable 2333));
             `Let ((2327, (_::Any, "VirtualDom.handlers", `Local )),
                    ([], `Return `Variable 2332));
             `Let ((2328, (_::Any, "VirtualDom.attrsOfTag", `Local )),
                    ([], `Return `Variable 2331));
             `Let ((2329, (_::Any, "VirtualDom.nameOfTag", `Local )),
                    ([], `Return `Variable 2330))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2328; "children" => 
                                                                    `Variable 2326;
                                                                    "eventHandlers" => 
                                                                    `Variable 2327;
                                                                    "tagName" => 
                                                                    `Variable 2329;
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:_::Any,children:_::Any,eventHandlers:_::Any,tagName:_::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2341,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.img", `Global )),
         ([(6909, (`Unl , `Any ), `Type ...);
           (6910, (`Unl , `Any ), `Row ...)],
           [(2338, ([(String, String)], "", `Local ));
            (2339, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2340, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2335,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2340));
             `Let ((2336,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2339));
             `Let ((2337, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2338))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2337; "children" => 
                                                                    `Variable 2335;
                                                                    "eventHandlers" => 
                                                                    `Variable 2336;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "img";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2348,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.canvas", `Global )),
         ([(6913, (`Unl , `Any ), `Type ...);
           (6914, (`Unl , `Any ), `Row ...)],
           [(2345, ([(String, String)], "", `Local ));
            (2346, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2347, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2342,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2347));
             `Let ((2343,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2346));
             `Let ((2344, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2345))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2344; "children" => 
                                                                    `Variable 2342;
                                                                    "eventHandlers" => 
                                                                    `Variable 2343;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "canvas";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2355,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.center", `Global )),
         ([(6917, (`Unl , `Any ), `Type ...);
           (6918, (`Unl , `Any ), `Row ...)],
           [(2352, ([(String, String)], "", `Local ));
            (2353, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2354, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2349,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2354));
             `Let ((2350,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2353));
             `Let ((2351, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2352))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2351; "children" => 
                                                                    `Variable 2349;
                                                                    "eventHandlers" => 
                                                                    `Variable 2350;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "center";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2362,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.datalist", `Global )),
         ([(6921, (`Unl , `Any ), `Type ...);
           (6922, (`Unl , `Any ), `Row ...)],
           [(2359, ([(String, String)], "", `Local ));
            (2360, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2361, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2356,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2361));
             `Let ((2357,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2360));
             `Let ((2358, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2359))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2358; "children" => 
                                                                    `Variable 2356;
                                                                    "eventHandlers" => 
                                                                    `Variable 2357;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "datalist";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2365,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseUp", `Global )),
         ([(8018, (`Any , `Any ), `Type ...);
           (8019, (`Any , `Any ), `Row ...);
           (8021, (`Any , `Any ), `Row ...)],
           [(2364, (_::Any, "", `Local ))],
           ([`Let ((2363, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2364))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmouseup";
                                         "2" => `Variable 2363; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2372,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.b", `Global )),
         ([(6925, (`Unl , `Any ), `Type ...);
           (6926, (`Unl , `Any ), `Row ...)],
           [(2369, ([(String, String)], "", `Local ));
            (2370, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2371, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2366,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2371));
             `Let ((2367,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2370));
             `Let ((2368, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2369))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2368; "children" => 
                                                                    `Variable 2366;
                                                                    "eventHandlers" => 
                                                                    `Variable 2367;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "b";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2375,
          ((a::Any) -> [|VirtualDom.StringHandler:(String, a::Any)|_::Any|],
            "Events.onKeyDown", `Global )),
         ([(8035, (`Any , `Any ), `Type ...);
           (8036, (`Any , `Any ), `Row ...);
           (8038, (`Any , `Any ), `Row ...)],
           [(2374, (_::Any, "", `Local ))],
           ([`Let ((2373, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2374))],
             `Return `Inject ("VirtualDom.StringHandler",
                               `Extend ({"1" => `Constant `String "onkeydown";
                                         "2" => `Variable 2373; }, None),
                               [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2382,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.hr", `Global )),
         ([(6929, (`Unl , `Any ), `Type ...);
           (6930, (`Unl , `Any ), `Row ...)],
           [(2379, ([(String, String)], "", `Local ));
            (2380, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2381, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2376,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2381));
             `Let ((2377,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2380));
             `Let ((2378, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2379))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2378; "children" => 
                                                                    `Variable 2376;
                                                                    "eventHandlers" => 
                                                                    `Variable 2377;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "hr";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2389,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.math", `Global )),
         ([(6933, (`Unl , `Any ), `Type ...);
           (6934, (`Unl , `Any ), `Row ...)],
           [(2386, ([(String, String)], "", `Local ));
            (2387, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2388, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2383,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2388));
             `Let ((2384,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2387));
             `Let ((2385, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2386))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2385; "children" => 
                                                                    `Variable 2383;
                                                                    "eventHandlers" => 
                                                                    `Variable 2384;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "math";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2396,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.dfn", `Global )),
         ([(6937, (`Unl , `Any ), `Type ...);
           (6938, (`Unl , `Any ), `Row ...)],
           [(2393, ([(String, String)], "", `Local ));
            (2394, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2395, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2390,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2395));
             `Let ((2391,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2394));
             `Let ((2392, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2393))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2392; "children" => 
                                                                    `Variable 2390;
                                                                    "eventHandlers" => 
                                                                    `Variable 2391;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "dfn";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2403,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.ruby", `Global )),
         ([(6941, (`Unl , `Any ), `Type ...);
           (6942, (`Unl , `Any ), `Row ...)],
           [(2400, ([(String, String)], "", `Local ));
            (2401, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2402, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2397,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2402));
             `Let ((2398,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2401));
             `Let ((2399, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2400))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2399; "children" => 
                                                                    `Variable 2397;
                                                                    "eventHandlers" => 
                                                                    `Variable 2398;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "ruby";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2410,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.a", `Global )),
         ([(6945, (`Unl , `Any ), `Type ...);
           (6946, (`Unl , `Any ), `Row ...)],
           [(2407, ([(String, String)], "", `Local ));
            (2408, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2409, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2404,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2409));
             `Let ((2405,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2408));
             `Let ((2406, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2407))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2406; "children" => 
                                                                    `Variable 2404;
                                                                    "eventHandlers" => 
                                                                    `Variable 2405;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "a";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2413,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onFocus", `Global )),
         ([(8092, (`Any , `Any ), `Type ...);
           (8093, (`Any , `Any ), `Row ...);
           (8095, (`Any , `Any ), `Row ...)],
           [(2412, (_::Any, "", `Local ))],
           ([`Let ((2411, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2412))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onfocus"; 
                                        "2" => `Variable 2411; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2420,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.acronym", `Global )),
         ([(6949, (`Unl , `Any ), `Type ...);
           (6950, (`Unl , `Any ), `Row ...)],
           [(2417, ([(String, String)], "", `Local ));
            (2418, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2419, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2414,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2419));
             `Let ((2415,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2418));
             `Let ((2416, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2417))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2416; "children" => 
                                                                    `Variable 2414;
                                                                    "eventHandlers" => 
                                                                    `Variable 2415;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "acronym";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2427,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.dt", `Global )),
         ([(6953, (`Unl , `Any ), `Type ...);
           (6954, (`Unl , `Any ), `Row ...)],
           [(2424, ([(String, String)], "", `Local ));
            (2425, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2426, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2421,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2426));
             `Let ((2422,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2425));
             `Let ((2423, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2424))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2423; "children" => 
                                                                    `Variable 2421;
                                                                    "eventHandlers" => 
                                                                    `Variable 2422;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "dt";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2434,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.sub", `Global )),
         ([(6957, (`Unl , `Any ), `Type ...);
           (6958, (`Unl , `Any ), `Row ...)],
           [(2431, ([(String, String)], "", `Local ));
            (2432, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2433, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2428,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2433));
             `Let ((2429,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2432));
             `Let ((2430, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2431))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2430; "children" => 
                                                                    `Variable 2428;
                                                                    "eventHandlers" => 
                                                                    `Variable 2429;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "sub";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2441,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.nav", `Global )),
         ([(6961, (`Unl , `Any ), `Type ...);
           (6962, (`Unl , `Any ), `Row ...)],
           [(2438, ([(String, String)], "", `Local ));
            (2439, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2440, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2435,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2440));
             `Let ((2436,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2439));
             `Let ((2437, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2438))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2437; "children" => 
                                                                    `Variable 2435;
                                                                    "eventHandlers" => 
                                                                    `Variable 2436;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "nav";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2448,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.tr", `Global )),
         ([(6965, (`Unl , `Any ), `Type ...);
           (6966, (`Unl , `Any ), `Row ...)],
           [(2445, ([(String, String)], "", `Local ));
            (2446, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2447, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2442,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2447));
             `Let ((2443,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2446));
             `Let ((2444, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2445))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2444; "children" => 
                                                                    `Variable 2442;
                                                                    "eventHandlers" => 
                                                                    `Variable 2443;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "tr";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2455,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.listing", `Global )),
         ([(6969, (`Unl , `Any ), `Type ...);
           (6970, (`Unl , `Any ), `Row ...)],
           [(2452, ([(String, String)], "", `Local ));
            (2453, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2454, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2449,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2454));
             `Let ((2450,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2453));
             `Let ((2451, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2452))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2451; "children" => 
                                                                    `Variable 2449;
                                                                    "eventHandlers" => 
                                                                    `Variable 2450;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "listing";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2462,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.frameset", `Global )),
         ([(6973, (`Unl , `Any ), `Type ...);
           (6974, (`Unl , `Any ), `Row ...)],
           [(2459, ([(String, String)], "", `Local ));
            (2460, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2461, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2456,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2461));
             `Let ((2457,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2460));
             `Let ((2458, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2459))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2458; "children" => 
                                                                    `Variable 2456;
                                                                    "eventHandlers" => 
                                                                    `Variable 2457;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "frameset";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2469,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.strong", `Global )),
         ([(6977, (`Unl , `Any ), `Type ...);
           (6978, (`Unl , `Any ), `Row ...)],
           [(2466, ([(String, String)], "", `Local ));
            (2467, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2468, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2463,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2468));
             `Let ((2464,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2467));
             `Let ((2465, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2466))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2465; "children" => 
                                                                    `Variable 2463;
                                                                    "eventHandlers" => 
                                                                    `Variable 2464;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "strong";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2472, ((String) -> (String, String), "Attrs.text", `Global )),
         ([(6981, (`Unl , `Any ), `Row ...)],
           [(2471, (String, "", `Local ))],
           ([`Let ((2470, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2471))],
             `Apply (`TApp (`TAbs ([(8182, (`Any , `Any ), `Type ...);
                                    (8183, (`Any , `Any ), `Type ...);
                                    (8184, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "text"; `Variable 2470]))), 
         None, `Unknown );
  `Fun ((2479,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.noframes", `Global )),
         ([(6982, (`Unl , `Any ), `Type ...);
           (6983, (`Unl , `Any ), `Row ...)],
           [(2476, ([(String, String)], "", `Local ));
            (2477, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2478, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2473,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2478));
             `Let ((2474,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2477));
             `Let ((2475, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2476))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2475; "children" => 
                                                                    `Variable 2473;
                                                                    "eventHandlers" => 
                                                                    `Variable 2474;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "noframes";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2486,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.bgsound", `Global )),
         ([(6986, (`Unl , `Any ), `Type ...);
           (6987, (`Unl , `Any ), `Row ...)],
           [(2483, ([(String, String)], "", `Local ));
            (2484, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2485, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2480,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2485));
             `Let ((2481,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2484));
             `Let ((2482, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2483))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2482; "children" => 
                                                                    `Variable 2480;
                                                                    "eventHandlers" => 
                                                                    `Variable 2481;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "bgsound";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2493,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.area", `Global )),
         ([(6990, (`Unl , `Any ), `Type ...);
           (6991, (`Unl , `Any ), `Row ...)],
           [(2490, ([(String, String)], "", `Local ));
            (2491, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2492, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2487,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2492));
             `Let ((2488,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2491));
             `Let ((2489, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2490))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2489; "children" => 
                                                                    `Variable 2487;
                                                                    "eventHandlers" => 
                                                                    `Variable 2488;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "area";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2496, ((String) -> (String, String), "Attrs.title", `Global )),
         ([(6994, (`Unl , `Any ), `Row ...)],
           [(2495, (String, "", `Local ))],
           ([`Let ((2494, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2495))],
             `Apply (`TApp (`TAbs ([(8222, (`Any , `Any ), `Type ...);
                                    (8223, (`Any , `Any ), `Type ...);
                                    (8224, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "title"; `Variable 2494]))), 
         None, `Unknown );
  `Fun ((2503,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.keygen", `Global )),
         ([(6995, (`Unl , `Any ), `Type ...);
           (6996, (`Unl , `Any ), `Row ...)],
           [(2500, ([(String, String)], "", `Local ));
            (2501, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2502, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2497,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2502));
             `Let ((2498,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2501));
             `Let ((2499, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2500))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2499; "children" => 
                                                                    `Variable 2497;
                                                                    "eventHandlers" => 
                                                                    `Variable 2498;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "keygen";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2510,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.menu", `Global )),
         ([(6999, (`Unl , `Any ), `Type ...);
           (7000, (`Unl , `Any ), `Row ...)],
           [(2507, ([(String, String)], "", `Local ));
            (2508, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2509, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2504,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2509));
             `Let ((2505,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2508));
             `Let ((2506, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2507))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2506; "children" => 
                                                                    `Variable 2504;
                                                                    "eventHandlers" => 
                                                                    `Variable 2505;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "menu";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2517,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h3", `Global )),
         ([(7003, (`Unl , `Any ), `Type ...);
           (7004, (`Unl , `Any ), `Row ...)],
           [(2514, ([(String, String)], "", `Local ));
            (2515, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2516, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2511,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2516));
             `Let ((2512,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2515));
             `Let ((2513, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2514))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2513; "children" => 
                                                                    `Variable 2511;
                                                                    "eventHandlers" => 
                                                                    `Variable 2512;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h3";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Rec [((2520, (([(String, Bool)]) ~> String, "Attrs.classList", `Global )),
          ([(8280, (`Unl , `Any ), `Row ...)],
            [(2519, ([(String, Bool)], "", `Local ))],
            ([`Let ((2518, ([(String, Bool)], "Attrs.classes", `Local )),
                     ([], `Return `Variable 2519));
              `Let ((2524, ([(String, Bool)], "", `Local )),
                     ([], `Return `Variable 2518))],
              `If (`ApplyPure (`TApp (`Variable 13,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]),
                                [`Variable 2524;
                                 `TApp (`Variable 54,
                                         [`Type `Record ({"1" => `Present 
                                                                 `MetaTypeVar ...;
                                                          "2" => `Present 
                                                                 `MetaTypeVar ...;
                                                          }, ..., false)])]),
                    ([], `Return `Constant `String ""),
                    ([`Let ((2525, ((String, Bool), "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 57,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 2524])));
                      `Let ((2526, ([(String, Bool)], "", `Local )),
                             ([],
                               `Apply (`TApp (`Variable 58,
                                               [`Type `Record ({"1" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                "2" => 
                                                                `Present 
                                                                `MetaTypeVar ...;
                                                                }, ..., false);
                                                `Row ({}, ..., false)]),
                                        [`Variable 2524])));
                      `Let ((2528, (String, "", `Local )),
                             ([], `Return `Project ("1", `Variable 2525)));
                      `Let ((2529, (Bool, "", `Local )),
                             ([], `Return `Project ("2", `Variable 2525)));
                      `Let ((2523, ([(String, Bool)], "Attrs.xs", `Local )),
                             ([], `Return `Variable 2526));
                      `Let ((2521, (Bool, "Attrs.b", `Local )),
                             ([], `Return `Variable 2529));
                      `Let ((2522, (String, "Attrs.val", `Local )),
                             ([], `Return `Variable 2528))],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Variable 2521;
                                         `Constant `Bool true]),
                            ([`Let ((2530, (String, "", `Local )),
                                     ([],
                                       `Apply (`Variable 2520,
                                                [`Variable 2523])))],
                              `Return `ApplyPure (`TApp (`Variable 12,
                                                          [`Row ({}, ...,
                                                                  false)]),
                                                   [`Variable 2522;
                                                    `ApplyPure (`TApp (
                                                                `Variable 12,
                                                                 [`Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Constant 
                                                                  `String " ";
                                                                  `Variable 2530])])),
                            ([], `Apply (`Variable 2520, [`Variable 2523]))))))),
          None, `Unknown )];
  `Fun ((2537,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.command", `Global )),
         ([(7007, (`Unl , `Any ), `Type ...);
           (7008, (`Unl , `Any ), `Row ...)],
           [(2534, ([(String, String)], "", `Local ));
            (2535, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2536, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2531,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2536));
             `Let ((2532,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2535));
             `Let ((2533, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2534))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2533; "children" => 
                                                                    `Variable 2531;
                                                                    "eventHandlers" => 
                                                                    `Variable 2532;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "command";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2544,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.strike", `Global )),
         ([(7011, (`Unl , `Any ), `Type ...);
           (7012, (`Unl , `Any ), `Row ...)],
           [(2541, ([(String, String)], "", `Local ));
            (2542, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2543, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2538,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2543));
             `Let ((2539,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2542));
             `Let ((2540, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2541))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2540; "children" => 
                                                                    `Variable 2538;
                                                                    "eventHandlers" => 
                                                                    `Variable 2539;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "strike";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2551,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.frame", `Global )),
         ([(7015, (`Unl , `Any ), `Type ...);
           (7016, (`Unl , `Any ), `Row ...)],
           [(2548, ([(String, String)], "", `Local ));
            (2549, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2550, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2545,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2550));
             `Let ((2546,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2549));
             `Let ((2547, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2548))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2547; "children" => 
                                                                    `Variable 2545;
                                                                    "eventHandlers" => 
                                                                    `Variable 2546;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "frame";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2558,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.tfoot", `Global )),
         ([(7019, (`Unl , `Any ), `Type ...);
           (7020, (`Unl , `Any ), `Row ...)],
           [(2555, ([(String, String)], "", `Local ));
            (2556, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2557, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2552,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2557));
             `Let ((2553,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2556));
             `Let ((2554, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2555))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2554; "children" => 
                                                                    `Variable 2552;
                                                                    "eventHandlers" => 
                                                                    `Variable 2553;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "tfoot";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2565,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.plaintext", `Global )),
         ([(7023, (`Unl , `Any ), `Type ...);
           (7024, (`Unl , `Any ), `Row ...)],
           [(2562, ([(String, String)], "", `Local ));
            (2563, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2564, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2559,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2564));
             `Let ((2560,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2563));
             `Let ((2561, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2562))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2561; "children" => 
                                                                    `Variable 2559;
                                                                    "eventHandlers" => 
                                                                    `Variable 2560;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "plaintext";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2568,
          ((a::Any) -> [|VirtualDom.DocTextNode:a::Any|_::Any|],
            "VirtualDom.textDoc", `Global )),
         ([(8333, (`Any , `Any ), `Type ...);
           (8334, (`Any , `Any ), `Row ...);
           (8336, (`Any , `Any ), `Row ...)],
           [(2567, (_::Any, "", `Local ))],
           ([`Let ((2566, (_::Any, "VirtualDom.str", `Local )),
                    ([], `Return `Variable 2567))],
             `Return `Inject ("VirtualDom.DocTextNode", `Variable 2566,
                               [|VirtualDom.DocTextNode:_::Any|_::Any|]))),
         None, `Unknown );
  `Fun ((2575,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.summary", `Global )),
         ([(7027, (`Unl , `Any ), `Type ...);
           (7028, (`Unl , `Any ), `Row ...)],
           [(2572, ([(String, String)], "", `Local ));
            (2573, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2574, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2569,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2574));
             `Let ((2570,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2573));
             `Let ((2571, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2572))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2571; "children" => 
                                                                    `Variable 2569;
                                                                    "eventHandlers" => 
                                                                    `Variable 2570;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "summary";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2578,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseMove", `Global )),
         ([(8350, (`Any , `Any ), `Type ...);
           (8351, (`Any , `Any ), `Row ...);
           (8353, (`Any , `Any ), `Row ...)],
           [(2577, (_::Any, "", `Local ))],
           ([`Let ((2576, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2577))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmousemove";
                                         "2" => `Variable 2576; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2585,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.figure", `Global )),
         ([(7031, (`Unl , `Any ), `Type ...);
           (7032, (`Unl , `Any ), `Row ...)],
           [(2582, ([(String, String)], "", `Local ));
            (2583, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2584, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2579,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2584));
             `Let ((2580,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2583));
             `Let ((2581, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2582))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2581; "children" => 
                                                                    `Variable 2579;
                                                                    "eventHandlers" => 
                                                                    `Variable 2580;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "figure";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2588, ((String) -> (String, String), "Attrs.type", `Global )),
         ([(7035, (`Unl , `Any ), `Row ...)],
           [(2587, (String, "", `Local ))],
           ([`Let ((2586, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2587))],
             `Apply (`TApp (`TAbs ([(8370, (`Any , `Any ), `Type ...);
                                    (8371, (`Any , `Any ), `Type ...);
                                    (8372, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "type"; `Variable 2586]))), 
         None, `Unknown );
  `Fun ((2595,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.article", `Global )),
         ([(7036, (`Unl , `Any ), `Type ...);
           (7037, (`Unl , `Any ), `Row ...)],
           [(2592, ([(String, String)], "", `Local ));
            (2593, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2594, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2589,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2594));
             `Let ((2590,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2593));
             `Let ((2591, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2592))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2591; "children" => 
                                                                    `Variable 2589;
                                                                    "eventHandlers" => 
                                                                    `Variable 2590;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "article";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2602,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.input", `Global )),
         ([(7040, (`Unl , `Any ), `Type ...);
           (7041, (`Unl , `Any ), `Row ...)],
           [(2599, ([(String, String)], "", `Local ));
            (2600, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2601, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2596,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2601));
             `Let ((2597,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2600));
             `Let ((2598, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2599))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2598; "children" => 
                                                                    `Variable 2596;
                                                                    "eventHandlers" => 
                                                                    `Variable 2597;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "input";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2609,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.font", `Global )),
         ([(7044, (`Unl , `Any ), `Type ...);
           (7045, (`Unl , `Any ), `Row ...)],
           [(2606, ([(String, String)], "", `Local ));
            (2607, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2608, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2603,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2608));
             `Let ((2604,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2607));
             `Let ((2605, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2606))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2605; "children" => 
                                                                    `Variable 2603;
                                                                    "eventHandlers" => 
                                                                    `Variable 2604;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "font";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2612,
          ((a::Any) -> [|VirtualDom.StringHandler:(String, a::Any)|_::Any|],
            "Events.onInput", `Global )),
         ([(8407, (`Any , `Any ), `Type ...);
           (8408, (`Any , `Any ), `Row ...);
           (8410, (`Any , `Any ), `Row ...)],
           [(2611, (_::Any, "", `Local ))],
           ([`Let ((2610, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2611))],
             `Return `Inject ("VirtualDom.StringHandler",
                               `Extend ({"1" => `Constant `String "oninput"; 
                                        "2" => `Variable 2610; }, None),
                               [|VirtualDom.StringHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2619,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.basefont", `Global )),
         ([(7048, (`Unl , `Any ), `Type ...);
           (7049, (`Unl , `Any ), `Row ...)],
           [(2616, ([(String, String)], "", `Local ));
            (2617, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2618, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2613,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2618));
             `Let ((2614,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2617));
             `Let ((2615, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2616))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2615; "children" => 
                                                                    `Variable 2613;
                                                                    "eventHandlers" => 
                                                                    `Variable 2614;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "basefont";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2622, ((String) -> (String, String), "Attrs.width", `Global )),
         ([(7052, (`Unl , `Any ), `Row ...)],
           [(2621, (String, "", `Local ))],
           ([`Let ((2620, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2621))],
             `Apply (`TApp (`TAbs ([(8427, (`Any , `Any ), `Type ...);
                                    (8428, (`Any , `Any ), `Type ...);
                                    (8429, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "width"; `Variable 2620]))), 
         None, `Unknown );
  `Fun ((2629,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h5", `Global )),
         ([(7053, (`Unl , `Any ), `Type ...);
           (7054, (`Unl , `Any ), `Row ...)],
           [(2626, ([(String, String)], "", `Local ));
            (2627, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2628, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2623,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2628));
             `Let ((2624,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2627));
             `Let ((2625, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2626))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2625; "children" => 
                                                                    `Variable 2623;
                                                                    "eventHandlers" => 
                                                                    `Variable 2624;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h5";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2636,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.html", `Global )),
         ([(7057, (`Unl , `Any ), `Type ...);
           (7058, (`Unl , `Any ), `Row ...)],
           [(2633, ([(String, String)], "", `Local ));
            (2634, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2635, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2630,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2635));
             `Let ((2631,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2634));
             `Let ((2632, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2633))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2632; "children" => 
                                                                    `Variable 2630;
                                                                    "eventHandlers" => 
                                                                    `Variable 2631;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "html";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2639, ((String) -> (String, String), "Attrs.for_", `Global )),
         ([(7061, (`Unl , `Any ), `Row ...)],
           [(2638, (String, "", `Local ))],
           ([`Let ((2637, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2638))],
             `Apply (`TApp (`TAbs ([(8457, (`Any , `Any ), `Type ...);
                                    (8458, (`Any , `Any ), `Type ...);
                                    (8459, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "for"; `Variable 2637]))), None,
         `Unknown );
  `Fun ((2646,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.link", `Global )),
         ([(7062, (`Unl , `Any ), `Type ...);
           (7063, (`Unl , `Any ), `Row ...)],
           [(2643, ([(String, String)], "", `Local ));
            (2644, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2645, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2640,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2645));
             `Let ((2641,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2644));
             `Let ((2642, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2643))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2642; "children" => 
                                                                    `Variable 2640;
                                                                    "eventHandlers" => 
                                                                    `Variable 2641;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "link";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2649,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onClick", `Global )),
         ([(8474, (`Any , `Any ), `Type ...);
           (8475, (`Any , `Any ), `Row ...);
           (8477, (`Any , `Any ), `Row ...)],
           [(2648, (_::Any, "", `Local ))],
           ([`Let ((2647, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2648))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onclick"; 
                                        "2" => `Variable 2647; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2656,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.table_", `Global )),
         ([(7066, (`Unl , `Any ), `Type ...);
           (7067, (`Unl , `Any ), `Row ...)],
           [(2653, ([(String, String)], "", `Local ));
            (2654, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2655, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2650,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2655));
             `Let ((2651,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2654));
             `Let ((2652, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2653))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2652; "children" => 
                                                                    `Variable 2650;
                                                                    "eventHandlers" => 
                                                                    `Variable 2651;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "table";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2663,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.thead", `Global )),
         ([(7070, (`Unl , `Any ), `Type ...);
           (7071, (`Unl , `Any ), `Row ...)],
           [(2660, ([(String, String)], "", `Local ));
            (2661, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2662, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2657,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2662));
             `Let ((2658,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2661));
             `Let ((2659, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2660))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2659; "children" => 
                                                                    `Variable 2657;
                                                                    "eventHandlers" => 
                                                                    `Variable 2658;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "thead";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2666, ((String) -> (String, String), "Attrs.height", `Global )),
         ([(7074, (`Unl , `Any ), `Row ...)],
           [(2665, (String, "", `Local ))],
           ([`Let ((2664, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2665))],
             `Apply (`TApp (`TAbs ([(8504, (`Any , `Any ), `Type ...);
                                    (8505, (`Any , `Any ), `Type ...);
                                    (8506, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "height"; `Variable 2664]))), 
         None, `Unknown );
  `Fun ((2673,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.address", `Global )),
         ([(7075, (`Unl , `Any ), `Type ...);
           (7076, (`Unl , `Any ), `Row ...)],
           [(2670, ([(String, String)], "", `Local ));
            (2671, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2672, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2667,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2672));
             `Let ((2668,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2671));
             `Let ((2669, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2670))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2669; "children" => 
                                                                    `Variable 2667;
                                                                    "eventHandlers" => 
                                                                    `Variable 2668;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "address";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2680,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.c", `Global )),
         ([(7079, (`Unl , `Any ), `Type ...);
           (7080, (`Unl , `Any ), `Row ...)],
           [(2677, ([(String, String)], "", `Local ));
            (2678, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2679, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2674,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2679));
             `Let ((2675,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2678));
             `Let ((2676, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2677))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2676; "children" => 
                                                                    `Variable 2674;
                                                                    "eventHandlers" => 
                                                                    `Variable 2675;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "c";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2683,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onBlur", `Global )),
         ([(8531, (`Any , `Any ), `Type ...);
           (8532, (`Any , `Any ), `Row ...);
           (8534, (`Any , `Any ), `Row ...)],
           [(2682, (_::Any, "", `Local ))],
           ([`Let ((2681, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2682))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onblur"; 
                                        "2" => `Variable 2681; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2686,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onDoubleClick", `Global )),
         ([(8538, (`Any , `Any ), `Type ...);
           (8539, (`Any , `Any ), `Row ...);
           (8541, (`Any , `Any ), `Row ...)],
           [(2685, (_::Any, "", `Local ))],
           ([`Let ((2684, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2685))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "ondblclick";
                                         "2" => `Variable 2684; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2689,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseOut", `Global )),
         ([(8545, (`Any , `Any ), `Type ...);
           (8546, (`Any , `Any ), `Row ...);
           (8548, (`Any , `Any ), `Row ...)],
           [(2688, (_::Any, "", `Local ))],
           ([`Let ((2687, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2688))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmouseout";
                                         "2" => `Variable 2687; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2696,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.output", `Global )),
         ([(7083, (`Unl , `Any ), `Type ...);
           (7084, (`Unl , `Any ), `Row ...)],
           [(2693, ([(String, String)], "", `Local ));
            (2694, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2695, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2690,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2695));
             `Let ((2691,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2694));
             `Let ((2692, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2693))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2692; "children" => 
                                                                    `Variable 2690;
                                                                    "eventHandlers" => 
                                                                    `Variable 2691;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "output";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2703,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.source", `Global )),
         ([(7087, (`Unl , `Any ), `Type ...);
           (7088, (`Unl , `Any ), `Row ...)],
           [(2700, ([(String, String)], "", `Local ));
            (2701, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2702, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2697,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2702));
             `Let ((2698,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2701));
             `Let ((2699, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2700))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2699; "children" => 
                                                                    `Variable 2697;
                                                                    "eventHandlers" => 
                                                                    `Variable 2698;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "source";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2710,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.track", `Global )),
         ([(7091, (`Unl , `Any ), `Type ...);
           (7092, (`Unl , `Any ), `Row ...)],
           [(2707, ([(String, String)], "", `Local ));
            (2708, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2709, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2704,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2709));
             `Let ((2705,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2708));
             `Let ((2706, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2707))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2706; "children" => 
                                                                    `Variable 2704;
                                                                    "eventHandlers" => 
                                                                    `Variable 2705;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "track";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Rec [((2719,
           (((Msg, a) {:Msg}~> a, (a) {:Msg}~> VirtualDom.Doc (b), a, _::Any) {:Msg}~> _::Any,
             "VirtualDom.evtLoop", `Global )),
          ([(8584, (`Unl , `Any ), `Type ...);
            (8600, (`Unl , `Any ), `Type ...);
            (8585, (`Any , `Any ), `Type ...);
            (8586, (`Any , `Any ), `Type ...)],
            [(2715, ((Msg, a) {:Msg}~> a, "", `Local ));
             (2716, ((_) {:Msg}~> VirtualDom.Doc (b), "", `Local ));
             (2717, (_, "", `Local )); (2718, (_::Any, "", `Local ))],
            ([`Let ((2711, (_::Any, "VirtualDom.subscriptions", `Local )),
                     ([], `Return `Variable 2718));
              `Let ((2712, (_, "VirtualDom.model", `Local )),
                     ([], `Return `Variable 2717));
              `Let ((2713,
                      ((_) {:Msg}~> VirtualDom.Doc (b), "VirtualDom.render",
                        `Local )), ([], `Return `Variable 2716));
              `Let ((2714, ((Msg, a) {:Msg}~> a, "VirtualDom.updt", `Local )),
                     ([], `Return `Variable 2715));
              `Let ((2721, (Msg, "", `Local )),
                     ([],
                       `Apply (`TApp (`Variable 37,
                                       [`Type `MetaTypeVar ...;
                                        `Row ({}, ..., false)]), [])));
              `Let ((2722, (Msg, "", `Local )), ([], `Return `Variable 2721));
              `Let ((2720, (Msg, "VirtualDom.msg", `Local )),
                     ([], `Return `Variable 2722));
              `Let ((2723, (_, "VirtualDom.newModel", `Local )),
                     ([],
                       `Apply (`Variable 2714,
                                [`Variable 2720; `Variable 2712])));
              `Let ((2724, (VirtualDom.Doc (a), "", `Local )),
                     ([], `Apply (`Variable 2713, [`Variable 2723])));
              `Let ((2725, ((), "", `Local )),
                     ([],
                       `Apply (`TApp (`TAbs ([(8597, (`Unl , `Any ),
                                                `Type ...)],
                                              `TApp (`Variable 1827,
                                                      [`Type `MetaTypeVar ...])),
                                       [`Type `MetaTypeVar ...]),
                                [`Variable 2724])))],
              `Apply (`Variable 2719,
                       [`Variable 2714; `Variable 2713; `Variable 2723;
                        `Variable 2711]))), None, `Unknown )];
  `Fun ((2728, ((Bool) -> (String, String), "Attrs.checked", `Global )),
         ([(7095, (`Unl , `Any ), `Row ...)], [(2727, (Bool, "", `Local ))],
           ([`Let ((2726, (Bool, "Attrs.val", `Local )),
                    ([], `Return `Variable 2727))],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 2726; `Constant `Bool true]),
                   ([],
                     `Apply (`TApp (`TAbs ([(8616, (`Any , `Any ), `Type ...);
                                            (8617, (`Any , `Any ), `Type ...);
                                            (8618, (`Any , `Any ), `Row ...)],
                                            `TApp (`Variable 1833,
                                                    [`Type `MetaTypeVar ...;
                                                     `Type `MetaTypeVar ...;
                                                     `Row ({}, ..., false)])),
                                     [`Type `MetaTypeVar ...;
                                      `Type `MetaTypeVar ...;
                                      `Row ({}, ..., false)]),
                              [`Constant `String "checked";
                               `Constant `String "true"])),
                   ([],
                     `Apply (`TApp (`TAbs ([(8622, (`Any , `Any ), `Type ...);
                                            (8623, (`Any , `Any ), `Type ...);
                                            (8624, (`Any , `Any ), `Row ...)],
                                            `TApp (`Variable 1833,
                                                    [`Type `MetaTypeVar ...;
                                                     `Type `MetaTypeVar ...;
                                                     `Row ({}, ..., false)])),
                                     [`Type `MetaTypeVar ...;
                                      `Type `MetaTypeVar ...;
                                      `Row ({}, ..., false)]),
                              [`Constant `String ""; `Constant `String ""]))))),
         None, `Unknown );
  `Fun ((2735,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.mark", `Global )),
         ([(7096, (`Unl , `Any ), `Type ...);
           (7097, (`Unl , `Any ), `Row ...)],
           [(2732, ([(String, String)], "", `Local ));
            (2733, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2734, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2729,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2734));
             `Let ((2730,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2733));
             `Let ((2731, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2732))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2731; "children" => 
                                                                    `Variable 2729;
                                                                    "eventHandlers" => 
                                                                    `Variable 2730;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "mark";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2742,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.option", `Global )),
         ([(7100, (`Unl , `Any ), `Type ...);
           (7101, (`Unl , `Any ), `Row ...)],
           [(2739, ([(String, String)], "", `Local ));
            (2740, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2741, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2736,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2741));
             `Let ((2737,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2740));
             `Let ((2738, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2739))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2738; "children" => 
                                                                    `Variable 2736;
                                                                    "eventHandlers" => 
                                                                    `Variable 2737;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "option";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2745, ((String) -> (String, String), "Attrs.dir", `Global )),
         ([(7104, (`Unl , `Any ), `Row ...)],
           [(2744, (String, "", `Local ))],
           ([`Let ((2743, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2744))],
             `Apply (`TApp (`TAbs ([(8652, (`Any , `Any ), `Type ...);
                                    (8653, (`Any , `Any ), `Type ...);
                                    (8654, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "dir"; `Variable 2743]))), None,
         `Unknown );
  `Fun ((2748, ((String) -> (String, String), "Attrs.href", `Global )),
         ([(7105, (`Unl , `Any ), `Row ...)],
           [(2747, (String, "", `Local ))],
           ([`Let ((2746, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2747))],
             `Apply (`TApp (`TAbs ([(8662, (`Any , `Any ), `Type ...);
                                    (8663, (`Any , `Any ), `Type ...);
                                    (8664, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "href"; `Variable 2746]))), 
         None, `Unknown );
  `Fun ((2755,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.base", `Global )),
         ([(7106, (`Unl , `Any ), `Type ...);
           (7107, (`Unl , `Any ), `Row ...)],
           [(2752, ([(String, String)], "", `Local ));
            (2753, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2754, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2749,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2754));
             `Let ((2750,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2753));
             `Let ((2751, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2752))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2751; "children" => 
                                                                    `Variable 2749;
                                                                    "eventHandlers" => 
                                                                    `Variable 2750;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "base";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2762,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.map_", `Global )),
         ([(7110, (`Unl , `Any ), `Type ...);
           (7111, (`Unl , `Any ), `Row ...)],
           [(2759, ([(String, String)], "", `Local ));
            (2760, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2761, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2756,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2761));
             `Let ((2757,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2760));
             `Let ((2758, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2759))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2758; "children" => 
                                                                    `Variable 2756;
                                                                    "eventHandlers" => 
                                                                    `Variable 2757;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "map";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2769,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.rt", `Global )),
         ([(7114, (`Unl , `Any ), `Type ...);
           (7115, (`Unl , `Any ), `Row ...)],
           [(2766, ([(String, String)], "", `Local ));
            (2767, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2768, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2763,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2768));
             `Let ((2764,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2767));
             `Let ((2765, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2766))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2765; "children" => 
                                                                    `Variable 2763;
                                                                    "eventHandlers" => 
                                                                    `Variable 2764;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "rt";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2776,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.progress", `Global )),
         ([(7118, (`Unl , `Any ), `Type ...);
           (7119, (`Unl , `Any ), `Row ...)],
           [(2773, ([(String, String)], "", `Local ));
            (2774, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2775, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2770,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2775));
             `Let ((2771,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2774));
             `Let ((2772, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2773))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2772; "children" => 
                                                                    `Variable 2770;
                                                                    "eventHandlers" => 
                                                                    `Variable 2771;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "progress";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2783,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.noembed", `Global )),
         ([(7122, (`Unl , `Any ), `Type ...);
           (7123, (`Unl , `Any ), `Row ...)],
           [(2780, ([(String, String)], "", `Local ));
            (2781, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2782, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2777,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2782));
             `Let ((2778,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2781));
             `Let ((2779, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2780))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2779; "children" => 
                                                                    `Variable 2777;
                                                                    "eventHandlers" => 
                                                                    `Variable 2778;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "noembed";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2790,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.param", `Global )),
         ([(7126, (`Unl , `Any ), `Type ...);
           (7127, (`Unl , `Any ), `Row ...)],
           [(2787, ([(String, String)], "", `Local ));
            (2788, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2789, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2784,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2789));
             `Let ((2785,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2788));
             `Let ((2786, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2787))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2786; "children" => 
                                                                    `Variable 2784;
                                                                    "eventHandlers" => 
                                                                    `Variable 2785;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "param";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2797,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.dl", `Global )),
         ([(7130, (`Unl , `Any ), `Type ...);
           (7131, (`Unl , `Any ), `Row ...)],
           [(2794, ([(String, String)], "", `Local ));
            (2795, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2796, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2791,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2796));
             `Let ((2792,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2795));
             `Let ((2793, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2794))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2793; "children" => 
                                                                    `Variable 2791;
                                                                    "eventHandlers" => 
                                                                    `Variable 2792;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "dl";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2800, ((String) -> (String, String), "Attrs.style", `Global )),
         ([(7134, (`Unl , `Any ), `Row ...)],
           [(2799, (String, "", `Local ))],
           ([`Let ((2798, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2799))],
             `Apply (`TApp (`TAbs ([(8742, (`Any , `Any ), `Type ...);
                                    (8743, (`Any , `Any ), `Type ...);
                                    (8744, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "style"; `Variable 2798]))), 
         None, `Unknown );
  `Fun ((2807,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.h6", `Global )),
         ([(7135, (`Unl , `Any ), `Type ...);
           (7136, (`Unl , `Any ), `Row ...)],
           [(2804, ([(String, String)], "", `Local ));
            (2805, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2806, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2801,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2806));
             `Let ((2802,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2805));
             `Let ((2803, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2804))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2803; "children" => 
                                                                    `Variable 2801;
                                                                    "eventHandlers" => 
                                                                    `Variable 2802;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "h6";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2810,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseDown", `Global )),
         ([(8759, (`Any , `Any ), `Type ...);
           (8760, (`Any , `Any ), `Row ...);
           (8762, (`Any , `Any ), `Row ...)],
           [(2809, (_::Any, "", `Local ))],
           ([`Let ((2808, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2809))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmousedown";
                                         "2" => `Variable 2808; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2829,
          ((String, (a) {:Msg}~> VirtualDom.Doc (Msg), (Msg, a) {:Msg}~> a, a, [VirtualDom.Sub (Msg)]) ~> Process ({ hear:Msg,wild }),
            "VirtualDom.runVDom", `Global )),
         ([(8781, (`Unl , `Any ), `Type ...);
           (8790, (`Any , `Any ), `Row ...)],
           [(2824, (String, "", `Local ));
            (2825, ((_) {:Msg}~> VirtualDom.Doc (Msg), "", `Local ));
            (2826, ((Msg, a) {:Msg}~> a, "", `Local ));
            (2827, (_, "", `Local ));
            (2828, ([VirtualDom.Sub (Msg)], "", `Local ))],
           ([`Let ((2811,
                     ([VirtualDom.Sub (Msg)], "VirtualDom.subscriptions",
                       `Local )), ([], `Return `Variable 2828));
             `Let ((2812, (_, "VirtualDom.model", `Local )),
                    ([], `Return `Variable 2827));
             `Let ((2813, ((Msg, a) {:Msg}~> a, "VirtualDom.updt", `Local )),
                    ([], `Return `Variable 2826));
             `Let ((2814,
                     ((_) {:Msg}~> VirtualDom.Doc (Msg), "VirtualDom.view",
                       `Local )), ([], `Return `Variable 2825));
             `Let ((2815, (String, "VirtualDom.placeholder", `Local )),
                    ([], `Return `Variable 2824));
             `Fun ((2817, (() {:Msg}~> _::Any, "_fun__g130", `Local )),
                    ([], [],
                      ([`Let ((2816, (_::Any, "", `Local )),
                               ([],
                                 `Apply (`TApp (`TAbs ([(8776,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (8777,
                                                          (`Unl , `Any ),
                                                          `Type ...);
                                                        (8778,
                                                          (`Any , `Any ),
                                                          `Type ...);
                                                        (8779,
                                                          (`Any , `Any ),
                                                          `Type ...)],
                                                        `TApp (`Variable 2719,
                                                                [`Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...;
                                                                 `Type 
                                                                 `MetaTypeVar ...])),
                                                 [`Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...;
                                                  `Type `MetaTypeVar ...]),
                                          [`Variable 2813; `Variable 2814;
                                           `Variable 2812; `Variable 2811])))],
                        `Return `TAbs ([(8784, (`Any , `Any ), `Type ...)],
                                        `Variable 2816))), None, `Unknown );
             `Let ((2818, (Location, "", `Local )),
                    ([], `Apply (`Variable 35, [`Extend ({}, None)])));
             `Let ((2819,
                     (Process ({ |hear:Msg,wild }), "VirtualDom.evtHandler",
                       `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"hear" => `Present `MetaTypeVar ...;
                                              "wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `ForAll ({contents = [(8784,
                                                                    (`Any ,
                                                                    `Any ),
                                                                    `Type ...)]},
                                                       `MetaTypeVar ...);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 2817; `Variable 2818])));
             `Fun ((2821, (() {:Msg}~> (), "_fun__g131", `Local )),
                    ([], [],
                      ([`Let ((2820, (VirtualDom.Doc (Msg), "", `Local )),
                               ([], `Apply (`Variable 2814, [`Variable 2812])))],
                        `Apply (`TApp (`TAbs ([(8791, (`Unl , `Any ),
                                                 `Type ...)],
                                               `TApp (`Variable 1826,
                                                       [`Type `MetaTypeVar ...])),
                                        [`Type `MetaTypeVar ...]),
                                 [`Variable 2815; `Variable 2820;
                                  `Variable 2819; `Variable 2811]))), 
                    None, `Unknown );
             `Let ((2822, (Location, "", `Local )),
                    ([], `Apply (`Variable 35, [`Extend ({}, None)])));
             `Let ((2823, (Process ({ hear:Msg,wild }), "", `Local )),
                    ([],
                      `Apply (`TApp (`Variable 39,
                                      [`Row ({"hear" => `Present `MetaTypeVar ...;
                                              "wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false);
                                       `Type `Record ({}, ..., false);
                                       `Row ({"wild" => `Present `Record (
                                                                 {}, ...,
                                                                  false);
                                              }, ..., false)]),
                               [`Variable 2821; `Variable 2822])))],
             `Return `Variable 2819)), None, `Unknown );
  `Fun ((2836,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.button", `Global )),
         ([(7139, (`Unl , `Any ), `Type ...);
           (7140, (`Unl , `Any ), `Row ...)],
           [(2833, ([(String, String)], "", `Local ));
            (2834, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2835, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2830,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2835));
             `Let ((2831,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2834));
             `Let ((2832, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2833))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2832; "children" => 
                                                                    `Variable 2830;
                                                                    "eventHandlers" => 
                                                                    `Variable 2831;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "button";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2839, ((String) -> (String, String), "Attrs.face", `Global )),
         ([(7143, (`Unl , `Any ), `Row ...)],
           [(2838, (String, "", `Local ))],
           ([`Let ((2837, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2838))],
             `Apply (`TApp (`TAbs ([(8814, (`Any , `Any ), `Type ...);
                                    (8815, (`Any , `Any ), `Type ...);
                                    (8816, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "face"; `Variable 2837]))), 
         None, `Unknown );
  `Fun ((2842, ((Bool) -> (String, String), "Attrs.hidden", `Global )),
         ([(7144, (`Unl , `Any ), `Row ...)], [(2841, (Bool, "", `Local ))],
           ([`Let ((2840, (Bool, "Attrs.val", `Local )),
                    ([], `Return `Variable 2841))],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 2840; `Constant `Bool true]),
                   ([],
                     `Apply (`TApp (`TAbs ([(8827, (`Any , `Any ), `Type ...);
                                            (8828, (`Any , `Any ), `Type ...);
                                            (8829, (`Any , `Any ), `Row ...)],
                                            `TApp (`Variable 1833,
                                                    [`Type `MetaTypeVar ...;
                                                     `Type `MetaTypeVar ...;
                                                     `Row ({}, ..., false)])),
                                     [`Type `MetaTypeVar ...;
                                      `Type `MetaTypeVar ...;
                                      `Row ({}, ..., false)]),
                              [`Constant `String "hidden";
                               `Constant `String "true"])),
                   ([],
                     `Apply (`TApp (`TAbs ([(8833, (`Any , `Any ), `Type ...);
                                            (8834, (`Any , `Any ), `Type ...);
                                            (8835, (`Any , `Any ), `Row ...)],
                                            `TApp (`Variable 1833,
                                                    [`Type `MetaTypeVar ...;
                                                     `Type `MetaTypeVar ...;
                                                     `Row ({}, ..., false)])),
                                     [`Type `MetaTypeVar ...;
                                      `Type `MetaTypeVar ...;
                                      `Row ({}, ..., false)]),
                              [`Constant `String ""; `Constant `String ""]))))),
         None, `Unknown );
  `Fun ((2849,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.head", `Global )),
         ([(7145, (`Unl , `Any ), `Type ...);
           (7146, (`Unl , `Any ), `Row ...)],
           [(2846, ([(String, String)], "", `Local ));
            (2847, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2848, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2843,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2848));
             `Let ((2844,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2847));
             `Let ((2845, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2846))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2845; "children" => 
                                                                    `Variable 2843;
                                                                    "eventHandlers" => 
                                                                    `Variable 2844;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "head";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2856,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.legend", `Global )),
         ([(7149, (`Unl , `Any ), `Type ...);
           (7150, (`Unl , `Any ), `Row ...)],
           [(2853, ([(String, String)], "", `Local ));
            (2854, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2855, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2850,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2855));
             `Let ((2851,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2854));
             `Let ((2852, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2853))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2852; "children" => 
                                                                    `Variable 2850;
                                                                    "eventHandlers" => 
                                                                    `Variable 2851;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "legend";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2859, ((String) -> (String, String), "Attrs.name", `Global )),
         ([(7153, (`Unl , `Any ), `Row ...)],
           [(2858, (String, "", `Local ))],
           ([`Let ((2857, (String, "Attrs.val", `Local )),
                    ([], `Return `Variable 2858))],
             `Apply (`TApp (`TAbs ([(8863, (`Any , `Any ), `Type ...);
                                    (8864, (`Any , `Any ), `Type ...);
                                    (8865, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 1833,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false)]),
                      [`Constant `String "name"; `Variable 2857]))), 
         None, `Unknown );
  `Fun ((2866,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.blockquote", `Global )),
         ([(7154, (`Unl , `Any ), `Type ...);
           (7155, (`Unl , `Any ), `Row ...)],
           [(2863, ([(String, String)], "", `Local ));
            (2864, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2865, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2860,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2865));
             `Let ((2861,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2864));
             `Let ((2862, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2863))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2862; "children" => 
                                                                    `Variable 2860;
                                                                    "eventHandlers" => 
                                                                    `Variable 2861;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "blockquote";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2873,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.title", `Global )),
         ([(7158, (`Unl , `Any ), `Type ...);
           (7159, (`Unl , `Any ), `Row ...)],
           [(2870, ([(String, String)], "", `Local ));
            (2871, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2872, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2867,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2872));
             `Let ((2868,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2871));
             `Let ((2869, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2870))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2869; "children" => 
                                                                    `Variable 2867;
                                                                    "eventHandlers" => 
                                                                    `Variable 2868;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "title";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2880,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.cite", `Global )),
         ([(7162, (`Unl , `Any ), `Type ...);
           (7163, (`Unl , `Any ), `Row ...)],
           [(2877, ([(String, String)], "", `Local ));
            (2878, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2879, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2874,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2879));
             `Let ((2875,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2878));
             `Let ((2876, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2877))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2876; "children" => 
                                                                    `Variable 2874;
                                                                    "eventHandlers" => 
                                                                    `Variable 2875;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "cite";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2883,
          ((a::Any) -> [|VirtualDom.UnitHandler:(String, a::Any)|_::Any|],
            "Events.onMouseEnter", `Global )),
         ([(8900, (`Any , `Any ), `Type ...);
           (8901, (`Any , `Any ), `Row ...);
           (8903, (`Any , `Any ), `Row ...)],
           [(2882, (_::Any, "", `Local ))],
           ([`Let ((2881, (_::Any, "Events.f", `Local )),
                    ([], `Return `Variable 2882))],
             `Return `Inject ("VirtualDom.UnitHandler",
                               `Extend ({"1" => `Constant `String "onmouseenter";
                                         "2" => `Variable 2881; }, None),
                               [|VirtualDom.UnitHandler:(String, _::Any)|_::Any|]))),
         None, `Unknown );
  `Fun ((2890,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.meter", `Global )),
         ([(7166, (`Unl , `Any ), `Type ...);
           (7167, (`Unl , `Any ), `Row ...)],
           [(2887, ([(String, String)], "", `Local ));
            (2888, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2889, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2884,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2889));
             `Let ((2885,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2888));
             `Let ((2886, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2887))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2886; "children" => 
                                                                    `Variable 2884;
                                                                    "eventHandlers" => 
                                                                    `Variable 2885;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "meter";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2897,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.caption", `Global )),
         ([(7170, (`Unl , `Any ), `Type ...);
           (7171, (`Unl , `Any ), `Row ...)],
           [(2894, ([(String, String)], "", `Local ));
            (2895, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2896, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2891,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2896));
             `Let ((2892,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2895));
             `Let ((2893, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2894))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2893; "children" => 
                                                                    `Variable 2891;
                                                                    "eventHandlers" => 
                                                                    `Variable 2892;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "caption";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2904,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.select_", `Global )),
         ([(7174, (`Unl , `Any ), `Type ...);
           (7175, (`Unl , `Any ), `Row ...)],
           [(2901, ([(String, String)], "", `Local ));
            (2902, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2903, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2898,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2903));
             `Let ((2899,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2902));
             `Let ((2900, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2901))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2900; "children" => 
                                                                    `Variable 2898;
                                                                    "eventHandlers" => 
                                                                    `Variable 2899;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "select";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2911,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.kbd", `Global )),
         ([(7178, (`Unl , `Any ), `Type ...);
           (7179, (`Unl , `Any ), `Row ...)],
           [(2908, ([(String, String)], "", `Local ));
            (2909, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2910, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2905,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2910));
             `Let ((2906,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2909));
             `Let ((2907, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2908))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2907; "children" => 
                                                                    `Variable 2905;
                                                                    "eventHandlers" => 
                                                                    `Variable 2906;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "kbd";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2918,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.textarea", `Global )),
         ([(7182, (`Unl , `Any ), `Type ...);
           (7183, (`Unl , `Any ), `Row ...)],
           [(2915, ([(String, String)], "", `Local ));
            (2916, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2917, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2912,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2917));
             `Let ((2913,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2916));
             `Let ((2914, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2915))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2914; "children" => 
                                                                    `Variable 2912;
                                                                    "eventHandlers" => 
                                                                    `Variable 2913;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "textarea";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2925,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.time", `Global )),
         ([(7186, (`Unl , `Any ), `Type ...);
           (7187, (`Unl , `Any ), `Row ...)],
           [(2922, ([(String, String)], "", `Local ));
            (2923, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2924, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2919,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2924));
             `Let ((2920,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2923));
             `Let ((2921, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2922))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2921; "children" => 
                                                                    `Variable 2919;
                                                                    "eventHandlers" => 
                                                                    `Variable 2920;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "time";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2932,
          (([(String, String)], [VirtualDom.VirtualHandler (a)], [VirtualDom.Doc (a)]) -> VirtualDom.Doc (a),
            "Tags.ol", `Global )),
         ([(7190, (`Unl , `Any ), `Type ...);
           (7191, (`Unl , `Any ), `Row ...)],
           [(2929, ([(String, String)], "", `Local ));
            (2930, ([VirtualDom.VirtualHandler (a)], "", `Local ));
            (2931, ([VirtualDom.Doc (a)], "", `Local ))],
           ([`Let ((2926,
                     ([VirtualDom.Doc (a)], "Tags.childrenOfTag", `Local )),
                    ([], `Return `Variable 2931));
             `Let ((2927,
                     ([VirtualDom.VirtualHandler (a)], "Tags.handlers",
                       `Local )), ([], `Return `Variable 2930));
             `Let ((2928, ([(String, String)], "Tags.attrsOfTag", `Local )),
                    ([], `Return `Variable 2929))],
             `Return `Inject ("VirtualDom.DocTagNode",
                               `Extend ({"attrs" => `Variable 2928; "children" => 
                                                                    `Variable 2926;
                                                                    "eventHandlers" => 
                                                                    `Variable 2927;
                                                                    "tagName" => 
                                                                    `Constant 
                                                                    `String "ol";
                                                                    }, 
                                         None),
                               [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[VirtualDom.Doc (a)],eventHandlers:[VirtualDom.VirtualHandler (a)],tagName:String)|VirtualDom.DocTextNode:String|]))),
         None, `Unknown );
  `Fun ((2935, ((Int) -> String, "pad", `Global )),
         ([(8992, (`Unl , `Any ), `Row ...)], [(2934, (Int, "", `Local ))],
           ([`Let ((2933, (Int, "t", `Local )), ([], `Return `Variable 2934))],
             `If (`ApplyPure (`TApp (`Variable 15,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Variable 2933; `Constant `Int 10]),
                   ([],
                     `Return `ApplyPure (`TApp (`Variable 12,
                                                 [`Row ({}, ..., false)]),
                                          [`Constant `String "0";
                                           `ApplyPure (`TApp (`TAbs (
                                                              [(8985,
                                                                 (`Any ,
                                                                   `Any ),
                                                                 `Row ...)],
                                                               `TApp (
                                                               `Variable 19,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 2933])])),
                   ([],
                     `Return `ApplyPure (`TApp (`TAbs ([(8990,
                                                          (`Any , `Any ),
                                                          `Row ...)],
                                                        `TApp (`Variable 19,
                                                                [`Row (
                                                                 {}, ...,
                                                                  false)])),
                                                 [`Row ({}, ..., false)]),
                                          [`Variable 2933]))))), None,
         `Unknown );
  `Fun ((2937,
          (() -> [|VirtualDom.UnitHandler:(String, () -> [|Reset|_::Any|])|_::Any|],
            "resetHandler", `Global )),
         ([(9006, (`Any , `Any ), `Row ...);
           (9001, (`Any , `Any ), `Row ...);
           (9002, (`Any , `Any ), `Row ...);
           (9005, (`Any , `Any ), `Row ...)], [],
           ([`Fun ((2936, (() -> [|Reset|_::Any|], "_fun__g132", `Local )),
                    ([], [],
                      ([],
                        `Return `Inject ("Reset", `Extend ({}, None),
                                          [|Reset|_::Any|]))), None,
                    `Unknown )],
             `Apply (`TApp (`TAbs ([(8996, (`Any , `Any ), `Type ...);
                                    (8997, (`Any , `Any ), `Row ...);
                                    (8998, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 2649,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Row ({}, ..., false)]),
                      [`TAbs ([(8999, (`Any , `Any ), `Row ...);
                               (9000, (`Any , `Any ), `Row ...)],
                               `Variable 2936)]))), None, `Unknown );
  `Fun ((2939,
          (() -> [|VirtualDom.UnitHandler:(String, () -> [|Stop|_::Any|])|_::Any|],
            "stopHandler", `Global )),
         ([(9023, (`Any , `Any ), `Row ...);
           (9018, (`Any , `Any ), `Row ...);
           (9019, (`Any , `Any ), `Row ...);
           (9022, (`Any , `Any ), `Row ...)], [],
           ([`Fun ((2938, (() -> [|Stop|_::Any|], "_fun__g133", `Local )),
                    ([], [],
                      ([],
                        `Return `Inject ("Stop", `Extend ({}, None),
                                          [|Stop|_::Any|]))), None, `Unknown )],
             `Apply (`TApp (`TAbs ([(9013, (`Any , `Any ), `Type ...);
                                    (9014, (`Any , `Any ), `Row ...);
                                    (9015, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 2649,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Row ({}, ..., false)]),
                      [`TAbs ([(9016, (`Any , `Any ), `Row ...);
                               (9017, (`Any , `Any ), `Row ...)],
                               `Variable 2938)]))), None, `Unknown );
  `Fun ((2941,
          (() -> [|VirtualDom.UnitHandler:(String, () -> [|TogglePause|_::Any|])|_::Any|],
            "togglePauseHandler", `Global )),
         ([(9040, (`Any , `Any ), `Row ...);
           (9035, (`Any , `Any ), `Row ...);
           (9036, (`Any , `Any ), `Row ...);
           (9039, (`Any , `Any ), `Row ...)], [],
           ([`Fun ((2940,
                     (() -> [|TogglePause|_::Any|], "_fun__g134", `Local )),
                    ([], [],
                      ([],
                        `Return `Inject ("TogglePause", `Extend ({}, None),
                                          [|TogglePause|_::Any|]))), 
                    None, `Unknown )],
             `Apply (`TApp (`TAbs ([(9030, (`Any , `Any ), `Type ...);
                                    (9031, (`Any , `Any ), `Row ...);
                                    (9032, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 2649,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Row ({}, ..., false)]),
                      [`TAbs ([(9033, (`Any , `Any ), `Row ...);
                               (9034, (`Any , `Any ), `Row ...)],
                               `Variable 2940)]))), None, `Unknown );
  `Fun ((2973, ((Model) ~> VirtualDom.Doc (Msg), "view", `Global )),
         ([(9265, (`Unl , `Any ), `Row ...)], [(2972, (Model, "", `Local ))],
           ([`Let ((2942, (Model, "model", `Local )),
                    ([], `Return `Variable 2972));
             `Let ((2943, (String, "toggleText", `Local )),
                    ([],
                      `If (`ApplyPure (`TApp (`Variable 13,
                                               [`Type `MetaTypeVar ...;
                                                `Row ({}, ..., false)]),
                                        [`Project ("paused", `Variable 2942);
                                         `Constant `Bool true]),
                            ([], `Return `Constant `String "Start"),
                            ([], `Return `Constant `String "Pause"))));
             `Let ((2945, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9060, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2325,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "swatch"])));
             `Let ((2944, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9063, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2308,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "swatch"])));
             `Let ((2969, (String, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9076, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2935,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Project ("minutes", `Variable 2942)])));
             `Let ((2970,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9073, (`Any , `Any ), `Type ...);
                                             (9074, (`Any , `Any ), `Row ...);
                                             (9075, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 2969])));
             `Let ((2968,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9085, (`Any , `Any ), `Type ...);
                                             (9086, (`Any , `Any ), `Row ...);
                                             (9087, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String ":"])));
             `Let ((2966, (String, "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9095, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2935,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Project ("seconds", `Variable 2942)])));
             `Let ((2967,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9092, (`Any , `Any ), `Type ...);
                                             (9093, (`Any , `Any ), `Row ...);
                                             (9094, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 2966])));
             `Let ((2971,
                     (VirtualDom.Doc ([|TogglePause|Reset|Stop|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9067, (`Unl , `Any ), `Type ...);
                                             (9068, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1923,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TApp (`Variable 54,
                                        [`Type `Record ({"1" => `Present 
                                                                `Primitive `String ;
                                                         "2" => `Present 
                                                                `Primitive `String ;
                                                         }, ..., false)]);
                                `TApp (`Variable 54,
                                        [`Type `Alias (("VirtualDom.VirtualHandler",
                                                         [`Type `MetaTypeVar ...]),
                                                        `Variant ({"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `MetaTypeVar ...; },
                                                            ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2970;
                                              `ApplyPure (`TApp (`Variable 55,
                                                                  [`Type 
                                                                   `Variant (
                                                                   {"VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                   "VirtualDom.DocTextNode" => 
                                                                   `Present 
                                                                   `MetaTypeVar ...;
                                                                   }, ...,
                                                                    false);
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 2968;
                                                            `ApplyPure (
                                                            `TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `MetaTypeVar ...;
                                                                    }, ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 2967;
                                                              `TApp (
                                                              `Variable 54,
                                                               [`Type 
                                                                `Variant (
                                                                {"VirtualDom.DocTagNode" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"attrs" => 
                                                                  `Present 
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]);
                                                                  "children" => 
                                                                  `Present 
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `MetaTypeVar ...]);
                                                                  "eventHandlers" => 
                                                                  `Present 
                                                                  `Application (
                                                                  {id = "List"; name = "List"; arity = 
                                                                  [(`Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                  "tagName" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.DocTextNode" => 
                                                                 `Present 
                                                                 `MetaTypeVar ...;
                                                                 }, ...,
                                                                 false)])])])])])));
             `Let ((2962, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9115, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2325,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "togglepause"])));
             `Let ((2963,
                     ([|VirtualDom.UnitHandler:(String, () {}~> [|TogglePause|Reset|Stop|NoOp|Tick|])|VirtualDom.StringHandler:(String, (String) {}~> [|TogglePause|Reset|Stop|NoOp|Tick|])|VirtualDom.TimeHandler:(Int, () {}~> [|TogglePause|Reset|Stop|NoOp|Tick|])|VirtualDom.TupleIntHandler:(String, (Int, Int) {}~> [|TogglePause|Reset|Stop|NoOp|Tick|])|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9118, (`Any , `Any ), `Row ...);
                                             (9119, (`Any , `Any ), `Row ...);
                                             (9120, (`Any , `Any ), `Row ...);
                                             (9121, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2941,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]), [])));
             `Let ((2964,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|TogglePause|Reset|Stop|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9127, (`Any , `Any ), `Type ...);
                                             (9128, (`Any , `Any ), `Row ...);
                                             (9129, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 2943])));
             `Let ((2965,
                     (VirtualDom.Doc ([|TogglePause|Reset|Stop|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9111, (`Unl , `Any ), `Type ...);
                                             (9112, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2836,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2962;
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.StringHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TimeHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `Int ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TupleIntHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.UnitHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "TogglePause" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)));
                                                             }, ..., false);
                                                            }, ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2963;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.StringHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TimeHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `Int ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {}, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TupleIntHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.UnitHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `ForAll (
                                                               {contents = 
                                                               []},
                                                                `Function (
                                                                `Record (
                                                                {}, ...,
                                                                 false),
                                                                 ({}, ...,
                                                                   false),
                                                                 `Variant (
                                                                 {"TogglePause" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false)));
                                                               }, ..., false);
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `MetaTypeVar ...; },
                                                            ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2964;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.DocTagNode" => 
                                                              `Present 
                                                              `Record (
                                                              {"attrs" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false)]);
                                                               "children" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]);
                                                               "eventHandlers" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Alias (
                                                                 ("VirtualDom.VirtualHandler",
                                                                   [`Type 
                                                                    `MetaTypeVar ...]),
                                                                  `Variant (
                                                                  {"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                                               "tagName" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               }, ..., false);
                                                              "VirtualDom.DocTextNode" => 
                                                              `Present 
                                                              `MetaTypeVar ...;
                                                              }, ..., false)])])])));
             `Let ((2958, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9143, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2325,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "reset"])));
             `Let ((2959,
                     ([|VirtualDom.UnitHandler:(String, () {}~> [|Reset|TogglePause|Stop|NoOp|Tick|])|VirtualDom.StringHandler:(String, (String) {}~> [|Reset|TogglePause|Stop|NoOp|Tick|])|VirtualDom.TimeHandler:(Int, () {}~> [|Reset|TogglePause|Stop|NoOp|Tick|])|VirtualDom.TupleIntHandler:(String, (Int, Int) {}~> [|Reset|TogglePause|Stop|NoOp|Tick|])|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9146, (`Any , `Any ), `Row ...);
                                             (9147, (`Any , `Any ), `Row ...);
                                             (9148, (`Any , `Any ), `Row ...);
                                             (9149, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2937,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]), [])));
             `Let ((2960,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Reset|TogglePause|Stop|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Reset|TogglePause|Stop|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9155, (`Any , `Any ), `Type ...);
                                             (9156, (`Any , `Any ), `Row ...);
                                             (9157, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "Reset"])));
             `Let ((2961,
                     (VirtualDom.Doc ([|Reset|TogglePause|Stop|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9139, (`Unl , `Any ), `Type ...);
                                             (9140, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2836,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2958;
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.StringHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TimeHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `Int ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TupleIntHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.UnitHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Reset" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)));
                                                             }, ..., false);
                                                            }, ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2959;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.StringHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TimeHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `Int ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {}, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TupleIntHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.UnitHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `ForAll (
                                                               {contents = 
                                                               []},
                                                                `Function (
                                                                `Record (
                                                                {}, ...,
                                                                 false),
                                                                 ({}, ...,
                                                                   false),
                                                                 `Variant (
                                                                 {"Reset" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false)));
                                                               }, ..., false);
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `MetaTypeVar ...; },
                                                            ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2960;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.DocTagNode" => 
                                                              `Present 
                                                              `Record (
                                                              {"attrs" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false)]);
                                                               "children" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]);
                                                               "eventHandlers" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Alias (
                                                                 ("VirtualDom.VirtualHandler",
                                                                   [`Type 
                                                                    `MetaTypeVar ...]),
                                                                  `Variant (
                                                                  {"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                                               "tagName" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               }, ..., false);
                                                              "VirtualDom.DocTextNode" => 
                                                              `Present 
                                                              `MetaTypeVar ...;
                                                              }, ..., false)])])])));
             `Let ((2954, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9171, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2325,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "stop"])));
             `Let ((2955,
                     ([|VirtualDom.UnitHandler:(String, () {}~> [|Stop|Reset|TogglePause|NoOp|Tick|])|VirtualDom.StringHandler:(String, (String) {}~> [|Stop|Reset|TogglePause|NoOp|Tick|])|VirtualDom.TimeHandler:(Int, () {}~> [|Stop|Reset|TogglePause|NoOp|Tick|])|VirtualDom.TupleIntHandler:(String, (Int, Int) {}~> [|Stop|Reset|TogglePause|NoOp|Tick|])|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9174, (`Any , `Any ), `Row ...);
                                             (9175, (`Any , `Any ), `Row ...);
                                             (9176, (`Any , `Any ), `Row ...);
                                             (9177, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2939,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]), [])));
             `Let ((2956,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9183, (`Any , `Any ), `Type ...);
                                             (9184, (`Any , `Any ), `Row ...);
                                             (9185, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "Stop"])));
             `Let ((2957,
                     (VirtualDom.Doc ([|Stop|Reset|TogglePause|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9167, (`Unl , `Any ), `Type ...);
                                             (9168, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2836,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2954;
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.StringHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TimeHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `Int ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.TupleIntHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                             }, ..., false);
                                                            "VirtualDom.UnitHandler" => 
                                                            `Present 
                                                            `Record (
                                                            {"1" => `Present 
                                                                    `Primitive `String ;
                                                             "2" => `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Stop" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)));
                                                             }, ..., false);
                                                            }, ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2955;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.StringHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TimeHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `Int ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {}, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.TupleIntHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `Function (
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `Int ;
                                                                }, ..., false),
                                                                ({"wild" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false),
                                                                `MetaTypeVar ...);
                                                               }, ..., false);
                                                              "VirtualDom.UnitHandler" => 
                                                              `Present 
                                                              `Record (
                                                              {"1" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               "2" => 
                                                               `Present 
                                                               `ForAll (
                                                               {contents = 
                                                               []},
                                                                `Function (
                                                                `Record (
                                                                {}, ...,
                                                                 false),
                                                                 ({}, ...,
                                                                   false),
                                                                 `Variant (
                                                                 {"Stop" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {}, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false)));
                                                               }, ..., false);
                                                              }, ..., false)])]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `MetaTypeVar ...; },
                                                            ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2956;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.DocTagNode" => 
                                                              `Present 
                                                              `Record (
                                                              {"attrs" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false)]);
                                                               "children" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]);
                                                               "eventHandlers" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Alias (
                                                                 ("VirtualDom.VirtualHandler",
                                                                   [`Type 
                                                                    `MetaTypeVar ...]),
                                                                  `Variant (
                                                                  {"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                                               "tagName" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               }, ..., false);
                                                              "VirtualDom.DocTextNode" => 
                                                              `Present 
                                                              `MetaTypeVar ...;
                                                              }, ..., false)])])])));
             `Let ((2946, ((String, String), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9199, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2308,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "footer"])));
             `Let ((2951,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9209, (`Any , `Any ), `Type ...);
                                             (9210, (`Any , `Any ), `Row ...);
                                             (9211, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "Keyboard shortcuts"])));
             `Let ((2952,
                     (VirtualDom.Doc ([|Stop|Reset|TogglePause|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9203, (`Unl , `Any ), `Type ...);
                                             (9204, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2372,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TApp (`Variable 54,
                                        [`Type `Record ({"1" => `Present 
                                                                `Primitive `String ;
                                                         "2" => `Present 
                                                                `Primitive `String ;
                                                         }, ..., false)]);
                                `TApp (`Variable 54,
                                        [`Type `Alias (("VirtualDom.VirtualHandler",
                                                         [`Type `MetaTypeVar ...]),
                                                        `Variant ({"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `MetaTypeVar ...; },
                                                            ..., false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2951;
                                              `TApp (`Variable 54,
                                                      [`Type `Variant (
                                                             {"VirtualDom.DocTagNode" => 
                                                              `Present 
                                                              `Record (
                                                              {"attrs" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false)]);
                                                               "children" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `MetaTypeVar ...]);
                                                               "eventHandlers" => 
                                                               `Present 
                                                               `Application (
                                                               {id = "List"; name = "List"; arity = 
                                                               [(`Type ,
                                                                  (`Unl ,
                                                                    `Any ))]},
                                                                [`Type 
                                                                 `Alias (
                                                                 ("VirtualDom.VirtualHandler",
                                                                   [`Type 
                                                                    `MetaTypeVar ...]),
                                                                  `Variant (
                                                                  {"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                                               "tagName" => 
                                                               `Present 
                                                               `Primitive `String ;
                                                               }, ..., false);
                                                              "VirtualDom.DocTextNode" => 
                                                              `Present 
                                                              `MetaTypeVar ...;
                                                              }, ..., false)])])])));
             `Let ((2950,
                     (VirtualDom.Doc ([|Stop|Reset|TogglePause|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9221, (`Unl , `Any ), `Type ...);
                                             (9222, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2305,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`TApp (`Variable 54,
                                        [`Type `Record ({"1" => `Present 
                                                                `Primitive `String ;
                                                         "2" => `Present 
                                                                `Primitive `String ;
                                                         }, ..., false)]);
                                `TApp (`Variable 54,
                                        [`Type `Alias (("VirtualDom.VirtualHandler",
                                                         [`Type `MetaTypeVar ...]),
                                                        `Variant ({"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                `TApp (`Variable 54,
                                        [`Type `Alias (("VirtualDom.Doc",
                                                         [`Type `MetaTypeVar ...]),
                                                        `Variant ({"VirtualDom.DocTagNode" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                   "children" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                   "eventHandlers" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                   "tagName" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                    false);
                                                                   "VirtualDom.DocTextNode" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false))])])));
             `Let ((2949,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9233, (`Any , `Any ), `Type ...);
                                             (9234, (`Any , `Any ), `Row ...);
                                             (9235, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "| p : start/pause | "])));
             `Let ((2948,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9240, (`Any , `Any ), `Type ...);
                                             (9241, (`Any , `Any ), `Row ...);
                                             (9242, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "r : reset | "])));
             `Let ((2947,
                     ([|VirtualDom.DocTextNode:String|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[mu a . [|VirtualDom.DocTagNode:(attrs:[(String, String)],children:[a],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|VirtualDom.DocTextNode:String|]],eventHandlers:[VirtualDom.VirtualHandler ([|Stop|Reset|TogglePause|NoOp|Tick|])],tagName:String)|],
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9247, (`Any , `Any ), `Type ...);
                                             (9248, (`Any , `Any ), `Row ...);
                                             (9249, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2568,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "s : stop |"])));
             `Let ((2953,
                     (VirtualDom.Doc ([|Stop|Reset|TogglePause|NoOp|Tick|]),
                       "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9195, (`Unl , `Any ), `Type ...);
                                             (9196, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 2139,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2946;
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])]);
                                `TApp (`Variable 54,
                                        [`Type `Alias (("VirtualDom.VirtualHandler",
                                                         [`Type `MetaTypeVar ...]),
                                                        `Variant ({"VirtualDom.StringHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.TupleIntHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   "VirtualDom.UnitHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                                   }, ...,
                                                                   false))]);
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Alias (("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false));
                                                     `Row ({}, ..., false)]),
                                             [`Variable 2952;
                                              `ApplyPure (`TApp (`Variable 55,
                                                                  [`Type 
                                                                   `Alias (
                                                                   ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false));
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                           [`Variable 2950;
                                                            `ApplyPure (
                                                            `TApp (`Variable 55,
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false));
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                             [`Variable 2949;
                                                              `ApplyPure (
                                                              `TApp (
                                                              `Variable 55,
                                                               [`Type 
                                                                `Alias (
                                                                ("VirtualDom.Doc",
                                                                  [`Type 
                                                                   `MetaTypeVar ...]),
                                                                 `Variant (
                                                                 {"VirtualDom.DocTagNode" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"attrs" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]);
                                                                   "children" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                   "eventHandlers" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                   "tagName" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false);
                                                                  "VirtualDom.DocTextNode" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false));
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Variable 2948;
                                                                `ApplyPure (
                                                                `TApp (
                                                                `Variable 55,
                                                                 [`Type 
                                                                  `Alias (
                                                                  ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                   `Variant (
                                                                   {"VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                   "VirtualDom.DocTextNode" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                    false));
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                                 [`Variable 2947;
                                                                  `TApp (
                                                                  `Variable 54,
                                                                   [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false))])])])])])])])))],
             `Apply (`TApp (`TAbs ([(9056, (`Unl , `Any ), `Type ...);
                                    (9057, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 2139,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false)]),
                      [`ApplyPure (`TApp (`Variable 55,
                                           [`Type `Record ({"1" => `Present 
                                                                   `Primitive `String ;
                                                            "2" => `Present 
                                                                   `Primitive `String ;
                                                            }, ..., false);
                                            `Row ({}, ..., false)]),
                                    [`Variable 2945;
                                     `ApplyPure (`TApp (`Variable 55,
                                                         [`Type `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Primitive `String ;
                                                                 }, ...,
                                                                 false);
                                                          `Row ({}, ...,
                                                                 false)]),
                                                  [`Variable 2944;
                                                   `TApp (`Variable 54,
                                                           [`Type `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false)])])]);
                       `TApp (`Variable 54,
                               [`Type `Alias (("VirtualDom.VirtualHandler",
                                                [`Type `MetaTypeVar ...]),
                                               `Variant ({"VirtualDom.StringHandler" => 
                                                          `Present `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                          "VirtualDom.TimeHandler" => 
                                                          `Present `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                          "VirtualDom.TupleIntHandler" => 
                                                          `Present `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                          "VirtualDom.UnitHandler" => 
                                                          `Present `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false);
                                                          }, ..., false))]);
                       `ApplyPure (`TApp (`Variable 55,
                                           [`Type `Alias (("VirtualDom.Doc",
                                                            [`Type `MetaTypeVar ...]),
                                                           `Variant (
                                                           {"VirtualDom.DocTagNode" => 
                                                            `Present 
                                                            `Record (
                                                            {"attrs" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Record (
                                                               {"1" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                "2" => 
                                                                `Present 
                                                                `Primitive `String ;
                                                                }, ..., false)]);
                                                             "children" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `MetaTypeVar ...]);
                                                             "eventHandlers" => 
                                                             `Present 
                                                             `Application (
                                                             {id = "List"; name = "List"; arity = 
                                                             [(`Type ,
                                                                (`Unl , `Any ))]},
                                                              [`Type 
                                                               `Alias (
                                                               ("VirtualDom.VirtualHandler",
                                                                 [`Type 
                                                                  `MetaTypeVar ...]),
                                                                `Variant (
                                                                {"VirtualDom.StringHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TimeHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.TupleIntHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   }, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 "VirtualDom.UnitHandler" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Function (
                                                                  `Record (
                                                                  {}, ...,
                                                                   false),
                                                                   ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                   `MetaTypeVar ...);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false))]);
                                                             "tagName" => 
                                                             `Present 
                                                             `Primitive `String ;
                                                             }, ..., false);
                                                            "VirtualDom.DocTextNode" => 
                                                            `Present 
                                                            `Primitive `String ;
                                                            }, ..., false));
                                            `Row ({}, ..., false)]),
                                    [`Variable 2971;
                                     `ApplyPure (`TApp (`Variable 55,
                                                         [`Type `Alias (
                                                                ("VirtualDom.Doc",
                                                                  [`Type 
                                                                   `MetaTypeVar ...]),
                                                                 `Variant (
                                                                 {"VirtualDom.DocTagNode" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"attrs" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]);
                                                                   "children" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                   "eventHandlers" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                   "tagName" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false);
                                                                  "VirtualDom.DocTextNode" => 
                                                                  `Present 
                                                                  `Primitive `String ;
                                                                  }, ...,
                                                                  false));
                                                          `Row ({}, ...,
                                                                 false)]),
                                                  [`Variable 2965;
                                                   `ApplyPure (`TApp (
                                                               `Variable 55,
                                                                [`Type 
                                                                 `Alias (
                                                                 ("VirtualDom.Doc",
                                                                   [`Type 
                                                                    `MetaTypeVar ...]),
                                                                  `Variant (
                                                                  {"VirtualDom.DocTagNode" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                   "children" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                   "eventHandlers" => 
                                                                   `Present 
                                                                   `Application (
                                                                   {id = "List"; name = "List"; arity = 
                                                                   [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                   "tagName" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                    false);
                                                                   "VirtualDom.DocTextNode" => 
                                                                   `Present 
                                                                   `Primitive `String ;
                                                                   }, ...,
                                                                   false));
                                                                 `Row (
                                                                 {}, ...,
                                                                  false)]),
                                                                [`Variable 2961;
                                                                 `ApplyPure (
                                                                 `TApp (
                                                                 `Variable 55,
                                                                  [`Type 
                                                                   `Alias (
                                                                   ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false));
                                                                   `Row (
                                                                   {}, ...,
                                                                    false)]),
                                                                  [`Variable 2957;
                                                                   `ApplyPure (
                                                                   `TApp (
                                                                   `Variable 55,
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false));
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                                    [`Variable 2953;
                                                                    `TApp (
                                                                    `Variable 54,
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.Doc",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.DocTagNode" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "attrs" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false)]); 
                                                                    "children" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `MetaTypeVar ...]);
                                                                    "eventHandlers" => 
                                                                    `Present 
                                                                    `Application (
                                                                    {id = "List"; name = "List"; arity = 
                                                                    [(
                                                                    `Type ,
                                                                    (`Unl ,
                                                                    `Any ))]},
                                                                    [`Type 
                                                                    `Alias (
                                                                    ("VirtualDom.VirtualHandler",
                                                                    [`Type 
                                                                    `MetaTypeVar ...]),
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.StringHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.TupleIntHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    }, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.UnitHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({
                                                                    "wild" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false),
                                                                    `MetaTypeVar ...);
                                                                    }, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))]);
                                                                    "tagName" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false); 
                                                                    "VirtualDom.DocTextNode" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false))])])])])])])]))),
         None, `Unknown );
  `Fun ((2975,
          (() ~> [|VirtualDom.HandlerSub:(Int, [|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|_::Any|])|_::Any|],
            "secondsHandler", `Global )),
         ([(9276, (`Any , `Any ), `Row ...);
           (9277, (`Any , `Any ), `Row ...);
           (9280, (`Any , `Any ), `Row ...);
           (9281, (`Any , `Any ), `Row ...)], [],
           ([`Fun ((2974, (() -> [|Tick|_::Any|], "_fun__g135", `Local )),
                    ([], [],
                      ([],
                        `Return `Inject ("Tick", `Extend ({}, None),
                                          [|Tick|_::Any|]))), None, `Unknown )],
             `Apply (`TApp (`TAbs ([(9270, (`Any , `Any ), `Type ...);
                                    (9271, (`Any , `Any ), `Type ...);
                                    (9272, (`Any , `Any ), `Row ...);
                                    (9273, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 2152,
                                            [`Type `MetaTypeVar ...;
                                             `Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Type `MetaTypeVar ...;
                              `Row ({}, ..., false); `Row ({}, ..., false)]),
                      [`Constant `Int 1000;
                       `TAbs ([(9274, (`Any , `Any ), `Row ...);
                               (9275, (`Any , `Any ), `Row ...)],
                               `Variable 2974)]))), None, `Unknown );
  `Fun ((2983,
          ((a, [|NoOp|b|]) ~> [|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (a) -> [|NoOp|b|])|_::Any|])|_::Any|],
            "shortcutHandler", `Global )),
         ([(9296, (`Unl , `Any ), `Type ...);
           (9300, (`Unl , `Any ), `Row ...);
           (9301, (`Any , `Any ), `Row ...);
           (9303, (`Any , `Any ), `Row ...);
           (9304, (`Any , `Any ), `Row ...)],
           [(2981, (_, "", `Local )); (2982, ([|NoOp|_|], "", `Local ))],
           ([`Let ((2976, ([|NoOp|_|], "msg", `Local )),
                    ([], `Return `Variable 2982));
             `Let ((2977, (_, "shortcutKey", `Local )),
                    ([], `Return `Variable 2981));
             `Fun ((2980, ((_) -> [|NoOp|_|], "_fun__g136", `Local )),
                    ([], [(2979, (_, "", `Local ))],
                      ([`Let ((2978, (_, "keycode", `Local )),
                               ([], `Return `Variable 2979))],
                        `If (`ApplyPure (`TApp (`Variable 13,
                                                 [`Type `MetaTypeVar ...;
                                                  `Row ({}, ..., false)]),
                                          [`Variable 2978; `Variable 2977]),
                              ([], `Return `Variable 2976),
                              ([],
                                `Return `Inject ("NoOp", `Extend ({}, None),
                                                  [|NoOp|_|]))))), None,
                    `Unknown )],
             `Apply (`TApp (`TAbs ([(9291, (`Any , `Any ), `Type ...);
                                    (9292, (`Any , `Any ), `Row ...);
                                    (9293, (`Any , `Any ), `Row ...)],
                                    `TApp (`Variable 2091,
                                            [`Type `MetaTypeVar ...;
                                             `Row ({}, ..., false);
                                             `Row ({}, ..., false)])),
                             [`Type `MetaTypeVar ...; `Row ({}, ..., false);
                              `Row ({}, ..., false)]),
                      [`TAbs ([(9299, (`Any , `Any ), `Row ...)],
                               `Variable 2980)]))), None, `Unknown );
  `Fun ((2990,
          (((paused:Bool|_)) ~> [[|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (String) -> [|NoOp|Reset|Stop|TogglePause|_|])|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|_::Any|])|_::Any|]],
            "subscriptions", `Global )),
         ([(9317, (`Unl , `Any ), `Row ...);
           (9324, (`Any , `Any ), `Row ...);
           (9325, (`Any , `Any ), `Row ...);
           (9373, (`Any , `Any ), `Row ...);
           (9374, (`Unl , `Any ), `Row ...);
           (9372, (`Any , `Any ), `Row ...);
           (9371, (`Any , `Any ), `Row ...)],
           [(2989, ((paused:Bool|_), "", `Local ))],
           ([`Let ((2984, ((paused:Bool|_), "model", `Local )),
                    ([], `Return `Variable 2989))],
             `If (`ApplyPure (`TApp (`Variable 13,
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Project ("paused", `Variable 2984);
                                `Constant `Bool true]),
                   ([`Let ((2988,
                             ([|VirtualDom.HandlerSub:(Int, [|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|VirtualDom.StringHandler:(String, (String) -> [|NoOp|TogglePause|Reset|Stop|_|])|_::Any|])|_::Any|],
                               "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(9320, (`Any , `Any ),
                                                       `Row ...);
                                                     (9321, (`Any , `Any ),
                                                       `Row ...);
                                                     (9322, (`Any , `Any ),
                                                       `Row ...);
                                                     (9323, (`Any , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 2975,
                                                             [`Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false)]), 
                                       [])));
                     `Let ((2987,
                             ([|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (String) -> [|NoOp|TogglePause|Reset|Stop|_|])|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|_::Any|])|_::Any|],
                               "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(9329, (`Unl , `Any ),
                                                       `Type ...);
                                                     (9330, (`Unl , `Any ),
                                                       `Row ...);
                                                     (9331, (`Any , `Any ),
                                                       `Row ...);
                                                     (9332, (`Any , `Any ),
                                                       `Row ...);
                                                     (9333, (`Any , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 2983,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false)]),
                                       [`Constant `String "80";
                                        `Inject ("TogglePause",
                                                  `Extend ({}, None),
                                                  [|NoOp|Reset|Stop|TogglePause|_|])])));
                     `Let ((2986,
                             ([|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (String) -> [|NoOp|Reset|TogglePause|Stop|_|])|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|_::Any|])|_::Any|],
                               "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(9341, (`Unl , `Any ),
                                                       `Type ...);
                                                     (9342, (`Unl , `Any ),
                                                       `Row ...);
                                                     (9343, (`Any , `Any ),
                                                       `Row ...);
                                                     (9344, (`Any , `Any ),
                                                       `Row ...);
                                                     (9345, (`Any , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 2983,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false)]),
                                       [`Constant `String "82";
                                        `Inject ("Reset", `Extend ({}, None),
                                                  [|NoOp|Reset|Stop|TogglePause|_|])])));
                     `Let ((2985,
                             ([|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (String) -> [|NoOp|Stop|Reset|TogglePause|_|])|VirtualDom.TimeHandler:(Int, () -> [|Tick|_::Any|])|_::Any|])|_::Any|],
                               "", `Local )),
                            ([],
                              `Apply (`TApp (`TAbs ([(9353, (`Unl , `Any ),
                                                       `Type ...);
                                                     (9354, (`Unl , `Any ),
                                                       `Row ...);
                                                     (9355, (`Any , `Any ),
                                                       `Row ...);
                                                     (9356, (`Any , `Any ),
                                                       `Row ...);
                                                     (9357, (`Any , `Any ),
                                                       `Row ...)],
                                                     `TApp (`Variable 2983,
                                                             [`Type `MetaTypeVar ...;
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false);
                                                              `Row ({}, ...,
                                                                    false)])),
                                              [`Type `MetaTypeVar ...;
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false);
                                               `Row ({}, ..., false)]),
                                       [`Constant `String "83";
                                        `Inject ("Stop", `Extend ({}, None),
                                                  [|NoOp|Reset|Stop|TogglePause|_|])])))],
                     `Return `ApplyPure (`TApp (`Variable 55,
                                                 [`Type `Variant ({"VirtualDom.HandlerSub" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false);
                                                                   }, ...,
                                                                   false);
                                                  `Row ({}, ..., false)]),
                                          [`Variable 2988;
                                           `ApplyPure (`TApp (`Variable 55,
                                                               [`Type 
                                                                `Variant (
                                                                {"VirtualDom.HandlerSub" => 
                                                                 `Present 
                                                                 `Record (
                                                                 {"1" => 
                                                                  `Present 
                                                                  `Primitive `Int ;
                                                                  "2" => 
                                                                  `Present 
                                                                  `Variant (
                                                                  {"VirtualDom.TimeHandler" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))); },
                                                                    ...,
                                                                    false);
                                                                   }, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false);
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                        [`Variable 2987;
                                                         `ApplyPure (
                                                         `TApp (`Variable 55,
                                                                 [`Type 
                                                                  `Variant (
                                                                  {"VirtualDom.HandlerSub" => 
                                                                   `Present 
                                                                   `Record (
                                                                   {"1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false);
                                                                   }, ...,
                                                                   false);
                                                                  `Row (
                                                                  {}, ...,
                                                                   false)]),
                                                          [`Variable 2986;
                                                           `ApplyPure (
                                                           `TApp (`Variable 55,
                                                                   [`Type 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.HandlerSub" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false);
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Variable 2985;
                                                             `TApp (`Variable 54,
                                                                    [`Type 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.HandlerSub" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Variant (
                                                                    {
                                                                    "VirtualDom.TimeHandler" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `Int ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `ForAll (
                                                                    {contents = 
                                                                    []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false))); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false); },
                                                                    ...,
                                                                    false)])])])])])),
                   ([],
                     `Return `TApp (`Variable 54,
                                     [`Type `Variant ({"VirtualDom.HandlerSub" => 
                                                       `Present `Record (
                                                                {"1" => 
                                                                 `Present 
                                                                 `Primitive `Int ;
                                                                 "2" => 
                                                                 `Present 
                                                                 `Variant (
                                                                 {"VirtualDom.TimeHandler" => 
                                                                  `Present 
                                                                  `Record (
                                                                  {"1" => 
                                                                   `Present 
                                                                   `Primitive `Int ;
                                                                   "2" => 
                                                                   `Present 
                                                                   `ForAll (
                                                                   {contents = 
                                                                   []},
                                                                    `Function (
                                                                    `Record (
                                                                    {}, ...,
                                                                    false),
                                                                    ({}, ...,
                                                                    false),
                                                                    `Variant (
                                                                    {
                                                                    "Tick" => 
                                                                    `Present 
                                                                    `Record (
                                                                    {}, ...,
                                                                    false); },
                                                                    ...,
                                                                    false)));
                                                                   }, ...,
                                                                   false);
                                                                  }, ...,
                                                                  false);
                                                                 }, ...,
                                                                 false);
                                                       }, ..., false)]))))),
         None, `Unknown );
  `Fun ((3002, ((Msg, Model) ~> Model, "updt", `Global )),
         ([(9451, (`Unl , `Any ), `Row ...)],
           [(3000, (Msg, "", `Local )); (3001, (Model, "", `Local ))],
           ([`Let ((2991, (Model, "model", `Local )),
                    ([], `Return `Variable 3001));
             `Let ((2992, (Msg, "msg", `Local )),
                    ([], `Return `Variable 3000));
             `Let ((2993, (Msg, "", `Local )), ([], `Return `Variable 2992))],
             `Case (`Variable 2993,
                     {"NoOp" => ((2994, ((), "", `Local )),
                                  ([], `Return `Variable 2991));
                      "Reset" => ((2995, ((), "", `Local )),
                                   ([],
                                     `Return `Extend ({"minutes" => `Constant 
                                                                    `Int 0;
                                                       "seconds" => `Constant 
                                                                    `Int 0;
                                                       },
                                                       Some
                                                         (`Erase ({"minutes"; 
                                                                  "seconds"; },
                                                                   `Variable 2991)))));
                      "Stop" => ((2996, ((), "", `Local )),
                                  ([],
                                    `Return `Extend ({"minutes" => `Constant 
                                                                   `Int 0;
                                                      "paused" => `Constant 
                                                                  `Bool true;
                                                      "seconds" => `Constant 
                                                                   `Int 0;
                                                      },
                                                      Some
                                                        (`Erase ({"minutes"; 
                                                                 "paused"; 
                                                                 "seconds"; },
                                                                  `Variable 2991)))));
                      "Tick" => ((2997, ((), "", `Local )),
                                  ([`Let ((2998, (Bool, "", `Local )),
                                           ([],
                                             `If (`ApplyPure (`TApp (
                                                              `Variable 15,
                                                               [`Type 
                                                                `MetaTypeVar ...;
                                                                `Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Project (
                                                                "seconds",
                                                                 `Variable 2991);
                                                                `Constant 
                                                                `Int 59]),
                                                   ([],
                                                     `Return `ApplyPure (
                                                             `TApp (`Variable 13,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Project (
                                                               "paused",
                                                                `Variable 2991);
                                                               `Constant 
                                                               `Bool false])),
                                                   ([],
                                                     `Return `Constant 
                                                             `Bool false))))],
                                    `If (`Variable 2998,
                                          ([],
                                            `Return `Extend ({"seconds" => 
                                                              `ApplyPure (
                                                              `TApp (
                                                              `Variable 1,
                                                               [`Row (
                                                                {}, ...,
                                                                 false)]),
                                                               [`Project (
                                                                "seconds",
                                                                 `Variable 2991);
                                                                `Constant 
                                                                `Int 1]);
                                                              },
                                                              Some
                                                                (`Erase (
                                                                 {"seconds"; },
                                                                  `Variable 2991)))),
                                          ([],
                                            `If (`ApplyPure (`TApp (`Variable 13,
                                                                    [`Type 
                                                                    `MetaTypeVar ...;
                                                                    `Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Project (
                                                               "paused",
                                                                `Variable 2991);
                                                               `Constant 
                                                               `Bool false]),
                                                  ([],
                                                    `Return `Extend (
                                                            {"minutes" => 
                                                             `ApplyPure (
                                                             `TApp (`Variable 1,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Project (
                                                               "minutes",
                                                                `Variable 2991);
                                                               `Constant 
                                                               `Int 1]);
                                                             "seconds" => 
                                                             `Constant 
                                                             `Int 0; },
                                                             Some
                                                               (`Erase (
                                                                {"minutes"; 
                                                                "seconds"; },
                                                                 `Variable 2991)))),
                                                  ([], `Return `Variable 2991))))));
                      "TogglePause" => ((2999, ((), "", `Local )),
                                         ([],
                                           `Return `Extend ({"paused" => 
                                                             `ApplyPure (
                                                             `TApp (`TAbs (
                                                                    [(
                                                                    9408,
                                                                    (`Unl ,
                                                                    `Any ),
                                                                    `Row ...)],
                                                                    `TApp (
                                                                    `Variable 100,
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)])),
                                                                    [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                              [`Project (
                                                               "paused",
                                                                `Variable 2991)]);
                                                             },
                                                             Some
                                                               (`Erase (
                                                                {"paused"; },
                                                                 `Variable 2991)))));
                      }, None))), None, `Unknown );
  `Fun ((3008, ((_, _) ~> Page, "mainPage", `Global )),
         ([(9456, (`Unl , `Any ), `Type ...);
           (9457, (`Unl , `Any ), `Type ...)],
           [(3006, (_, "", `Local )); (3007, (_, "", `Local ))],
           ([`Let ((3003,
                     ((minutes:Int,paused:Bool,seconds:Int), "initialModel",
                       `Local )),
                    ([],
                      `Return `Extend ({"minutes" => `Constant `Int 0; 
                                       "paused" => `Constant `Bool true; 
                                       "seconds" => `Constant `Int 0; }, 
                                        None)));
             `Let ((3004,
                     ([[|VirtualDom.HandlerSub:(Int, [|VirtualDom.StringHandler:(String, (String) {}~> [|NoOp|Reset|Stop|TogglePause|Tick|])|VirtualDom.TimeHandler:(Int, () {}~> [|Tick|NoOp|Reset|Stop|TogglePause|])|VirtualDom.TupleIntHandler:(String, (Int, Int) {}~> Msg)|VirtualDom.UnitHandler:(String, () {}~> Msg)|])|VirtualDom.EmptySub|VirtualDom.Sub:Msg|]],
                       "subs", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9461, (`Unl , `Any ), `Row ...);
                                             (9462, (`Any , `Any ), `Row ...);
                                             (9463, (`Any , `Any ), `Row ...);
                                             (9464, (`Any , `Any ), `Row ...);
                                             (9465, (`Unl , `Any ), `Row ...);
                                             (9466, (`Any , `Any ), `Row ...);
                                             (9467, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2990,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Variable 3003])));
             `Let ((3005,
                     (Process ({ hear:Msg,wild }), "evtHandler", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9477, (`Unl , `Any ), `Type ...);
                                             (9478, (`Any , `Any ), `Row ...)],
                                             `TApp (`Variable 2829,
                                                     [`Type `MetaTypeVar ...;
                                                      `Row ({}, ..., false)])),
                                      [`Type `MetaTypeVar ...;
                                       `Row ({}, ..., false)]),
                               [`Constant `String "placeholder";
                                `TApp (`Variable 2973,
                                        [`Row ({}, ..., false)]);
                                `TApp (`Variable 3002,
                                        [`Row ({}, ..., false)]);
                                `Variable 3003; `Variable 3004])))],
             `Apply (`TApp (`Variable 1013,
                             [`Row ({"wild" => `Present `Record ({}, ...,
                                                                  false);
                                     }, ..., false)]),
                      [`XmlNode ("html", {},
                                  [`ApplyPure (`TApp (`Variable 25,
                                                       [`Row ({}, ..., false)]),
                                                [`Constant `String "\n    "]);
                                   `XmlNode ("head", {},
                                              [`ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n      "]);
                                               `XmlNode ("title", {},
                                                          [`ApplyPure (
                                                           `TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "Stopwatch"])]);
                                               `ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n      "]);
                                               `XmlNode ("link",
                                                          {"href" => 
                                                           `Constant 
                                                           `String "css/stopwatch.css";
                                                           "rel" => `Constant 
                                                                    `String "stylesheet";
                                                           "type" => 
                                                           `Constant 
                                                           `String "text/css";
                                                           }, []);
                                               `ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n    "])]);
                                   `ApplyPure (`TApp (`Variable 25,
                                                       [`Row ({}, ..., false)]),
                                                [`Constant `String "\n    "]);
                                   `XmlNode ("body", {},
                                              [`ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n      "]);
                                               `XmlNode ("div",
                                                          {"id" => `Constant 
                                                                   `String "placeholder";
                                                           }, []);
                                               `ApplyPure (`TApp (`Variable 25,
                                                                   [`Row (
                                                                    {}, ...,
                                                                    false)]),
                                                            [`Constant 
                                                             `String "\n    "])]);
                                   `ApplyPure (`TApp (`Variable 25,
                                                       [`Row ({}, ..., false)]),
                                                [`Constant `String "\n  "])])]))),
         None, `Unknown );
  `Fun ((3011, (() ~> (), "main", `Global )),
         ([(9510, (`Unl , `Any ), `Row ...)], [],
           ([`Let ((3010, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9494, (`Unl , `Any ), `Row ...);
                                             (9495, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 1642,
                                                     [`Row ({}, ..., false);
                                                      `Row ({}, ..., false)])),
                                      [`Row ({}, ..., false);
                                       `Row ({}, ..., false)]),
                               [`Constant `String "/";
                                `TApp (`Variable 3008,
                                        [`Type `MetaTypeVar ...;
                                         `Type `MetaTypeVar ...])])));
             `Let ((3009, ((), "", `Local )),
                    ([],
                      `Apply (`TApp (`TAbs ([(9505, (`Unl , `Any ), `Row ...)],
                                             `TApp (`Variable 229,
                                                     [`Row ({}, ..., false)])),
                                      [`Row ({}, ..., false)]),
                               [`Constant `String "/css";
                                `Constant `String "css";
                                `ApplyPure (`TApp (`Variable 55,
                                                    [`Type `Record ({
                                                                    "1" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    "2" => 
                                                                    `Present 
                                                                    `Primitive `String ;
                                                                    }, ...,
                                                                    false);
                                                     `Row ({"wild" => 
                                                            `Present 
                                                            `Record (
                                                            {}, ..., false); },
                                                            ..., false)]),
                                             [`Extend ({"1" => `Constant 
                                                               `String "css";
                                                        "2" => `Constant 
                                                               `String "text/css";
                                                        }, None);
                                              `TApp (`Variable 54,
                                                      [`Type `Record (
                                                             {"1" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              "2" => 
                                                              `Present 
                                                              `Primitive `String ;
                                                              }, ..., false)])])])))],
             `Apply (`TApp (`TAbs ([(9508, (`Unl , `Any ), `Row ...)],
                                    `TApp (`Variable 231,
                                            [`Row ({}, ..., false)])),
                             [`Row ({}, ..., false)]), []))), None, `Unknown )],
  `Apply (`TApp (`TAbs ([(9512, (`Unl , `Any ), `Row ...)],
                         `TApp (`Variable 3011, [`Row ({}, ..., false)])),
                  [`Row ({}, ..., false)]), []))
Starting server?

Starting server (2)?

