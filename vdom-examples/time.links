open Tags
open Attrs
open Events
open VirtualDom

typename Model = (seconds : Int, minutes : Int, paused: Bool);
typename Msg = [| Tick | Reset | TogglePause | Stop | NoOp |];

fun resetHandler() {
  onClick(fun() { Reset })
}

fun stopHandler() {
  onClick(fun() { Stop })
}

fun togglePauseHandler() {
  onClick(fun() { TogglePause })
}

fun secondsHandler() {
  getEvery(1000, fun() {
    Tick
  })
}

fun shortcutHandler(shortcutKey, msg) {
  getKeyCode(fun(keycode) {
    if (keycode == shortcutKey) {
      msg
    } else {
      NoOp
    }
  })
}

fun pad(t) {
  if (t < 10) {
    "0"^^intToString(t)
  } else {
    intToString(t)
  }
}

sig updt : (Msg, Model) ~%e~> Model
fun updt(msg, model) { 
  switch(msg) {
    case Tick ->
      if (model.seconds < 59 && model.paused == false) {
        (model with seconds = model.seconds + 1)
      } else {
        if (model.paused == false) {
          (model with minutes = model.minutes + 1, seconds = 0)
        } else {
          model
        }
      }
    case Reset ->
      (model with minutes = 0, seconds = 0)   
    case TogglePause ->
      (model with paused = not(model.paused))
    case Stop ->
      (model with minutes = 0, seconds = 0, paused = true)
    case NoOp ->
      model
  }
}

sig view : (Model) ~%e~> Doc(Msg)
fun view(model) {
    var toggleText = if (model.paused == true) { 
      "Start"
    } else {
      "Pause"
    };
    div ([id ("swatch"), class ("swatch")],[], [
      h1 ([], [], [textDoc(pad(model.minutes)),textDoc(":"),textDoc(pad(model.seconds))]),
      button ([id ("togglepause")], [togglePauseHandler()], [textDoc(toggleText)]),
      button ([id ("reset")], [resetHandler()], [textDoc("Reset")]),
      button ([id ("stop")], [stopHandler()], [textDoc("Stop")]),
      div ([class ("footer")], [], [
        b ([],[],[textDoc("Keyboard shortcuts")]),
        br ([],[],[]),
        textDoc("| p : start/pause | "),
        textDoc("r : reset | "),
        textDoc("s : stop |")
      ])
    ])
}

#sig subscriptions : Model -> [Sub(Msg)] 
fun subscriptions(model) {
    if (model.paused == true) {
      [secondsHandler(), shortcutHandler("80",TogglePause), shortcutHandler("82",Reset), shortcutHandler("83",Stop)]
    } else {
      []
    }
}


fun mainPage(_, _) {
  var initialModel = (seconds = 0, minutes = 0, paused = true);
  var evtHandler = runVDom("placeholder", view, updt, initialModel, subscriptions);
  page
  <html>
    <head>
      <title>Stopwatch</title>
      <link rel="stylesheet" href="css/stopwatch.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", mainPage);
  addStaticRoute("/css", "css", [("css", "text/css")]);
  servePages()
}

main()
