### VDOM STUFF ###

# Doc Type

# typename VirtualHandler(a) = [| StringHandler: ((String) -> a) | Pines: a |];
typename VirtualHandler(a) =
  [| StringHandler: (String, (String) {}~> a) | UnitHandler: (String, () {}~> a) | TupleIntHandler: (String, (Int,Int) {}~> a) | TimeHandler: (Int, () {}~> a) |];

typename Doc(a) =
  [| DocTextNode: (String)
   | DocTagNode:
      (tagName: String, attrs: [(String, String)], eventHandlers: [VirtualHandler(a)],
       children: [Doc(a)])
   |];

# Needed to ensure that virtual-dom is open
alien javascript module "virtual-dom.js" VirtualDOM {
  dummy : ();
}

typename Sub(a) = [| EmptySub | HandlerSub : (Int, VirtualHandler(a)) | Sub : (a) |];

# Loads the "vdom.js" file, exposes runDom and updateDom.
alien javascript module "vdom.js" VDom {
  runDom : forall a . (String, Doc(a), Process({hear:a, wild}), [Sub(a)]) ~%e~> ();
  updateDom : forall a . (Doc(a)) ~%e~> ();
  getUniqueID : () ~%e~> (Int);
}

### SUBSCRIPTIONS ### 

fun uniqueID() {
  VDom.getUniqueID()
}

fun getKeyCode(f) {
  HandlerSub(uniqueID(), StringHandler("keypress", f))
}

fun getEvery(interval, f) {
  HandlerSub(uniqueID(), TimeHandler(interval, f))
}

######

fun textDoc(str) {
  DocTextNode(str)
}

# sig tag : (String, [(String, String)], [VirtualHandler(a)], [Doc(a)]) -> Doc(a)
fun tag(nameOfTag, attrsOfTag, handlers, childrenOfTag) {
  DocTagNode((tagName=nameOfTag, attrs=attrsOfTag, eventHandlers=handlers, children=childrenOfTag))
}

fun attr(k, v) {
  (k, v)
}

# Main event loop
fun evtLoop(updt, render, model, prevSubscriptions, subscriptionsFn) {
  receive {
    case msg ->
      var newModel = updt(msg, model);
      # Get new subscriptions
      # var newSubscriptions = subscriptionsFn(newModel);
      # var subscriptionsDiff = diffSubscriptions(prevSubscriptions, newSubscriptions);
      # Update subscriptions on the DOM (FFI call)
      # VDom.updateSubscriptions(subscriptionsDiff);
      # Update DOM
      VDom.updateDom(render(newModel));
      # Loop with new subscriptions
      evtLoop(updt, render, newModel, prevSubscriptions, subscriptionsFn)
  }
}

# User-facing function
fun runVDom(placeholder, view, updt, model, subscriptions) {
  var evtHandler = spawnClient {
    evtLoop(updt, view, model, subscriptions(model), subscriptions)
  };
  var _ = spawnClient { VDom.runDom(placeholder, view(model), evtHandler, subscriptions(model)) };
  evtHandler
}
